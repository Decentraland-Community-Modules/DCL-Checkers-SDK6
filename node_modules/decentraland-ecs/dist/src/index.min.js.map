{"version":3,"file":"index.min.js","sources":["../../src/ecs/Attachable.ts","../../src/ecs/helpers.ts","../../src/ecs/EventManager.ts","../../src/ecs/UIValue.ts","../../src/ecs/IEntity.ts","../../src/ecs/Component.ts","../../src/ecs/ComponentGroup.ts","../../src/ecs/Entity.ts","../../src/ecs/Engine.ts","../../src/ecs/Task.ts","../../src/ecs/UserActions.ts","../../src/ecs/Observable.ts","../../src/decentraland/Events.ts","../../src/decentraland/Implementation.ts","../../src/decentraland/math/types.ts","../../src/decentraland/Types.ts","../../src/decentraland/math/Scalar.ts","../../src/decentraland/math/Vector4.ts","../../src/decentraland/math/Matrix.ts","../../src/decentraland/math/Quaternion.ts","../../src/decentraland/math/Vector3.ts","../../src/decentraland/math/preallocatedVariables.ts","../../src/decentraland/math/Angle.ts","../../src/decentraland/math/Vector2.ts","../../src/decentraland/math/Arc2.ts","../../src/decentraland/math/Axis.ts","../../src/decentraland/math/BezierCurve.ts","../../src/decentraland/math/Color4.ts","../../src/decentraland/math/Color3.ts","../../src/decentraland/math/Curve3d.ts","../../src/decentraland/math/Plane.ts","../../src/decentraland/math/Furstum.ts","../../src/decentraland/math/Path2d.ts","../../src/decentraland/math/Path3d.ts","../../src/decentraland/math/Size.ts","../../src/decentraland/AnimationState.ts","../../src/decentraland/Input.ts","../../src/decentraland/Components.ts","../../src/decentraland/PhysicsCast.ts","../../src/decentraland/Camera.ts","../../src/decentraland/Gizmos.ts","../../src/decentraland/Systems.ts","../../src/decentraland/Audio.ts","../../src/decentraland/UIShapes.ts","../../src/decentraland/AvatarShape.ts","../../src/decentraland/UIEvents.ts","../../src/decentraland/MessageBus.ts","../../src/index.ts"],"sourcesContent":["import { IEntity, IEngine } from \"./IEntity\"\n\n/**\n * Entities can be attached to each other by using the `setParent` method. However, there are cases where we might want to attach entities\n * to other objects that are not entities created by the same scene (for example, the player's avatar). For those cases, we have this class.\n * @public\n */\nexport abstract class Attachable {\n\n  /** Used to attach entities to the avatar. Entities will follow the avatar when it moves */\n  static readonly AVATAR: Attachable = { getEntityRepresentation: (engine: IEngine) => engine.avatarEntity } as const\n  /** Used to attach entities to the camera. When in first person mode, the attached entities will also rotate with the camera */\n  static readonly FIRST_PERSON_CAMERA: Attachable = { getEntityRepresentation: (engine: IEngine) => engine.firstPersonCameraEntity } as const\n\n  // @internal\n  /** Entities must be attached to entities, so in this case, each attachable object must return the entity used to present it */\n  abstract getEntityRepresentation(engine: IEngine): IEntity\n}\n","let lastGeneratedId = 0\n\ndeclare var console: any\n\n/**\n * Log function. Only works in debug mode, otherwise it does nothing.\n * @param args - any loggable parameter\n * @public\n */\nexport function log(...args: any[]) {\n  if (typeof dcl !== 'undefined') {\n    dcl.log(...args)\n  } else {\n    // tslint:disable-next-line:no-console\n    console.log('DEBUG:', ...args)\n  }\n}\n\n/**\n * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.\n * @param error - string or Error object.\n * @param data - any debug information.\n * @public\n */\nexport function error(error: string | Error, data?: any) {\n  if (typeof dcl !== 'undefined') {\n    dcl.error(error as any, data)\n  } else {\n    // tslint:disable-next-line:no-console\n    console.error('ERROR:', error, data)\n  }\n}\n\n/**\n * Generates a new prefixed id\n * @public\n */\nexport function newId(type: string) {\n  lastGeneratedId++\n  if (type.length === 0) throw new Error('newId(type: string): type cannot be empty')\n  return type + lastGeneratedId.toString(36)\n}\n\n/**\n * @internal\n */\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = (Math.random() * 16) | 0\n    let v = c === 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\n/**\n * Returns an array of the given size filled with element built from the given constructor and the paramters\n * @param size - the number of element to construct and put in the array\n * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\n * @returns a new array filled with new objects\n * @internal\n */\nexport function buildArray<T>(size: number, itemBuilder: () => T): Array<T> {\n  const a: T[] = []\n  for (let i = 0; i < size; ++i) {\n    a.push(itemBuilder())\n  }\n  return a\n}\n\n/**\n * @public\n */\nexport function openExternalURL(url: string) {\n  if (typeof dcl !== 'undefined') {\n    dcl.openExternalUrl(url)\n  } else {\n    error('ERROR: openExternalURL dcl is undefined')\n  }\n}\n\n/**\n * Popup NFT info dialog\n * @param scr - 'ethereum://contractAddress/tokenID'\n * @param comment - optional. add a comment.\n * @public\n */\nexport function openNFTDialog(scr: string, comment: string | null = null) {\n  if (typeof dcl !== 'undefined') {\n    const regex = /ethereum:\\/\\/(.+)\\/(.+)/\n    const matches = scr.match(regex)\n\n    if (!matches || matches.length < 3) {\n      return\n    }\n\n    dcl.openNFTDialog(matches[1], matches[2], comment)\n  } else {\n    error('ERROR: openNFTDialog dcl is undefined')\n  }\n}\n","import { error, newId } from './helpers'\n\nconst eventNameSymbol = '__event_name__'\n\n/**\n * @public\n */\nexport interface IEventConstructor<T> {\n  // @internal\n  [eventNameSymbol]?: string\n  new (...args: any[]): T\n}\n\nconst takenEventNames: string[] = []\n\nfunction getEventNameFromConstructor<T>(ctor: IEventConstructor<T>): string {\n  if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {\n    throw new Error('The EventConstructor is not registered')\n  }\n  return ctor[eventNameSymbol] as any as string\n}\n\ntype EventListener<X> = {\n  listener: X\n  fn: (this: X, event: any) => void\n}\n\n/**\n * @public\n */\nexport class EventManager {\n  private listeners: Record<string, Array<EventListener<any>>> = {}\n\n  addListener<T, X>(eventClass: IEventConstructor<T>, listener: X, listenerFunction: (this: X, event: T) => void) {\n    if (!eventClass || typeof (eventClass as any) !== 'function') {\n      throw new Error('Invalid EventConstructor')\n    }\n    const eventName = getEventNameFromConstructor(eventClass)\n\n    let listeners = this.listeners[eventName]\n\n    if (!listeners) {\n      listeners = this.listeners[eventName] = []\n    }\n\n    for (let i = 0; i < listeners.length; i++) {\n      const x = listeners[i]\n      if (x.listener === listener) {\n        throw new Error('The provided listener is already registered')\n      }\n    }\n\n    listeners.push({\n      listener,\n      fn: listenerFunction\n    })\n\n    return this\n  }\n\n  removeListener<X>(listener: X, eventClass: IEventConstructor<any>): boolean {\n    if (!eventClass || typeof (eventClass as any) !== 'function') {\n      throw new Error('Invalid EventConstructor')\n    }\n\n    const eventName = getEventNameFromConstructor(eventClass)\n\n    let listeners = this.listeners[eventName]\n\n    if (!listeners) {\n      return false\n    }\n\n    for (let i = 0; i < listeners.length; i++) {\n      const x = listeners[i]\n      if (x.listener === listener) {\n        listeners.splice(i, 1)\n        return true\n      }\n    }\n\n    return false\n  }\n\n  fireEvent<T extends object>(event: T) {\n    const eventName = getEventNameFromConstructor((event as any).constructor)\n\n    let listeners = this.listeners[eventName]\n\n    if (listeners) {\n      for (let i = 0; i < listeners.length; i++) {\n        try {\n          const l = listeners[i]\n          l.fn.call(l.listener, event)\n        } catch (e) {\n          // TODO: e may not be an instance of Error\n          error(e as any)\n        }\n      }\n    }\n\n    return this\n  }\n}\n\n/**\n * @public\n */\nexport function EventConstructor(): ClassDecorator {\n  const eventName = newId('EV')\n\n  if (takenEventNames.indexOf(eventName) !== -1) {\n    throw new Error(`The event name ${eventName} is already taken`)\n  }\n\n  takenEventNames.push(eventName)\n\n  return <TFunction extends Function>(target: TFunction): TFunction | void => {\n    // tslint:disable-next-line:semicolon\n    ;(target as any)[eventNameSymbol] = eventName\n    return target\n  }\n}\n","/**\n * @public\n */\nexport enum UIValueType {\n  PERCENT = 0,\n  PIXELS = 1\n}\n\n/**\n * @public\n */\nexport class UIValue {\n  value: number\n  type: UIValueType\n\n  constructor(value: string | number) {\n    this.type = UIValueType.PIXELS\n\n    if (typeof value === 'string') {\n      let valueAsString: string = value\n      if (valueAsString.indexOf('px') > -1) {\n        this.type = UIValueType.PIXELS\n      } else if (valueAsString.indexOf('%') > -1) {\n        this.type = UIValueType.PERCENT\n      }\n\n      this.value = parseFloat(valueAsString)\n    } else {\n      this.value = value\n    }\n  }\n\n  toString(): string {\n    let result: string = this.value.toString()\n\n    if (this.type === UIValueType.PERCENT) {\n      result += '%'\n    } else {\n      result += 'px'\n    }\n\n    return result\n  }\n}\n","import { ComponentLike, ComponentConstructor } from './Component'\nimport { EventConstructor, EventManager } from './EventManager'\nimport { Attachable } from './Attachable'\n\n/**\n * @public\n */\nexport interface ISystem {\n  active?: boolean\n\n  activate?(engine: IEngine): void\n  deactivate?(): void\n\n  update?(dt: number): void\n\n  onAddEntity?(entity: IEntity): void\n  onRemoveEntity?(entity: IEntity): void\n}\n\n/**\n * @public\n */\nexport interface IEngine {\n  rootEntity: IEntity\n  readonly firstPersonCameraEntity: IEntity\n  readonly avatarEntity: IEntity\n  readonly entities: Readonly<Record<string, IEntity>>\n\n  addEntity(entity: IEntity): void\n  removeEntity(entity: IEntity): void\n  addSystem(system: ISystem, priority: number): void\n  removeSystem(system: ISystem): void\n}\n\n/**\n * @public\n */\nexport interface IEntity {\n  children: Record<string, IEntity>\n  eventManager: EventManager | null\n  alive: boolean\n  readonly uuid: string\n  readonly components: Record<string, any>\n\n  isAddedToEngine(): boolean\n  getParent(): IEntity | null\n  setParent(e: IEntity | Attachable | null): void\n\n  getComponent<T = any>(component: string): T\n  getComponent<T>(component: ComponentConstructor<T>): T\n  getComponent<T>(component: ComponentConstructor<T> | string): T\n\n  /**\n   * Gets a component, if it doesn't exist, it returns null.\n   * @param component - component class or name\n   */\n  getComponentOrNull<T = any>(component: string): T | null\n  getComponentOrNull<T>(component: ComponentConstructor<T>): T | null\n  getComponentOrNull<T>(component: ComponentConstructor<T> | string): T | null\n\n  getComponentOrCreate<T>(component: ComponentConstructor<T> & { new(): T }): T\n\n  /**\n   * Adds a component. If the component already exist, it throws an Error.\n   * @param component - component instance.\n   */\n  addComponent<T extends object>(component: T): void\n\n  addComponentOrReplace<T extends object>(component: T): void\n\n  removeComponent(component: string, triggerRemovedEvent?: boolean): void\n  removeComponent<T extends object>(component: T, triggerRemovedEvent?: boolean): void\n  removeComponent(component: ComponentConstructor<any>, triggerRemovedEvent?: boolean): void\n  removeComponent(component: object | string | Function, triggerRemovedEvent: any): void\n\n  hasComponent<T = any>(component: string): boolean\n  hasComponent<T>(component: ComponentConstructor<T>): boolean\n  hasComponent<T extends object>(component: T): boolean\n  hasComponent<T>(component: ComponentConstructor<T> | string): boolean\n}\n\n/**\n * @public\n */\n@EventConstructor()\nexport class ComponentRemoved {\n  constructor(public entity: IEntity, public componentName: string, public component: ComponentLike) {\n    // stub\n  }\n}\n\n/**\n * @public\n */\n@EventConstructor()\nexport class ComponentAdded {\n  constructor(public entity: IEntity, public componentName: string, public classId: number | null) {\n    // stub\n  }\n}\n\n/**\n * @public\n */\n@EventConstructor()\nexport class ParentChanged {\n  constructor(public entity: IEntity, public parent: IEntity | null) {\n    // stub\n  }\n}\n","import { newId } from './helpers'\nimport { EventConstructor } from './EventManager'\nimport { UIValue } from './UIValue'\n\nconst componentSymbol = '__name__symbol_'\nconst componentClassIdSymbol = '__classId__symbol_'\nconst componentIdSymbol = '__component__id_'\n\n/**\n * @public\n */\nexport interface ComponentLike {\n  // @internal\n  [componentSymbol]?: string\n  // @internal\n  [componentClassIdSymbol]?: number\n\n  // @internal\n  addedToEntity?(entity: any): void\n  // @internal\n  removedFromEntity?(entity: any): void\n}\n\n/**\n * @public\n */\nexport interface DisposableComponentLike extends ComponentLike {\n  // @internal\n  [componentIdSymbol]?: string\n  onDispose?(): void\n}\n\n/**\n * @public\n */\nexport interface ComponentConstructor<T extends ComponentLike> {\n  // @internal\n  [componentSymbol]?: string\n  // @internal\n  [componentClassIdSymbol]?: number\n  isComponent?: boolean\n  originalClassName?: string\n  new (...args: any[]): T\n}\n\n/**\n * @public\n */\nexport interface DisposableComponentConstructor<T extends DisposableComponentLike> {\n  // @internal\n  [componentSymbol]?: string\n  // @internal\n  [componentClassIdSymbol]?: number\n  isComponent?: boolean\n  isDisposableComponent?: true\n  originalClassName?: string\n  new (...args: any[]): T\n}\n\n/**\n * @public\n */\n@EventConstructor()\nexport class DisposableComponentCreated {\n  constructor(public componentId: string, public componentName: string, public classId: number) {\n    // stub\n  }\n}\n\n/**\n * @public\n */\n@EventConstructor()\nexport class DisposableComponentRemoved {\n  constructor(public componentId: string) {\n    // stub\n  }\n}\n\n/**\n * @public\n */\n@EventConstructor()\nexport class DisposableComponentUpdated {\n  constructor(public componentId: string, public component: DisposableComponentLike) {\n    // stub\n  }\n}\n\n/**\n * @public\n */\nexport function Component(componentName: string, classId?: number) {\n  return function<TFunction extends ComponentConstructor<any>>(target: TFunction): TFunction | void {\n    if (target.isComponent) {\n      throw new TypeError(\n        `You cannot extend a component. Trying to extend ${target.originalClassName} with: ${componentName}`\n      )\n    }\n\n    const extendedClass = target as any\n\n    const RegisteredComponent: any = function RegisteredComponent() {\n      const args = Array.prototype.slice.call(arguments)\n      const ret = new extendedClass(...args)\n\n      Object.defineProperty(ret, componentSymbol, {\n        enumerable: false,\n        writable: false,\n        configurable: false,\n        value: componentName\n      })\n\n      if (classId !== undefined) {\n        Object.defineProperty(ret, componentClassIdSymbol, {\n          enumerable: false,\n          writable: false,\n          configurable: false,\n          value: classId\n        })\n      }\n\n      return ret\n    }\n\n    if (classId !== undefined) {\n      RegisteredComponent[componentClassIdSymbol] = classId\n    }\n\n    RegisteredComponent[componentSymbol] = componentName\n    RegisteredComponent.isComponent = true\n    RegisteredComponent.originalClassName = componentName\n\n    RegisteredComponent.prototype = target.prototype\n    RegisteredComponent.prototype.constructor = target\n\n    return RegisteredComponent as TFunction\n  }\n}\n\n/**\n * @public\n */\n\nexport function DisposableComponent(componentName: string, classId: number) {\n  return function<TFunction extends DisposableComponentConstructor<any>>(target: TFunction): TFunction | void {\n    if (target.isComponent) {\n      throw new TypeError(\n        `You cannot extend a component. Trying to extend ${target.originalClassName} with: ${componentName}`\n      )\n    }\n\n    if (typeof (classId as any) !== 'number' || isNaN(classId)) {\n      throw new Error(`classId: ${classId} is an invalid integer`)\n    }\n\n    const extendedClass = target as any\n\n    const RegisteredComponent: any = function RegisteredComponent() {\n      if (!DisposableComponent.engine) {\n        throw new Error('You need to set a DisposableComponent.engine before creating disposable components')\n      }\n\n      const args = Array.prototype.slice.call(arguments)\n      const ret = new extendedClass(...args)\n      const id = newId('C')\n\n      Object.defineProperty(ret, componentSymbol, {\n        enumerable: false,\n        writable: false,\n        configurable: false,\n        value: componentName\n      })\n\n      Object.defineProperty(ret, componentIdSymbol, {\n        enumerable: false,\n        writable: false,\n        configurable: false,\n        value: id\n      })\n\n      if ((classId as any) !== undefined) {\n        Object.defineProperty(ret, componentClassIdSymbol, {\n          enumerable: false,\n          writable: false,\n          configurable: false,\n          value: classId\n        })\n      }\n\n      if (DisposableComponent.engine) {\n        DisposableComponent.engine.registerComponent(ret)\n      }\n\n      return ret\n    }\n\n    if ((classId as any) !== undefined) {\n      RegisteredComponent[componentClassIdSymbol] = classId\n    }\n\n    RegisteredComponent[componentSymbol] = componentName\n    RegisteredComponent.isComponent = true\n    RegisteredComponent.isDisposableComponent = true\n    RegisteredComponent.originalClassName = componentName\n\n    RegisteredComponent.prototype = target.prototype\n    RegisteredComponent.prototype.constructor = target\n\n    return RegisteredComponent as TFunction\n  }\n}\n\n/** @internal */\nexport namespace DisposableComponent {\n  /** @internal */\n  // tslint:disable-next-line:whitespace\n  export let engine: any = null\n}\n\n/**\n * @public\n */\nexport function getComponentName<T extends Record<any, any> = any>(component: T | ComponentConstructor<T>): string {\n  if (!component) {\n    throw new TypeError(component + ' is not a component.')\n  }\n  if (component[componentSymbol]) {\n    return component[componentSymbol] as string\n  }\n  throw new TypeError(component + ' is not a registered component.')\n}\n\n/**\n * @public\n */\nexport function getComponentClassId<T extends Record<any, any> = any>(\n  component: T | ComponentConstructor<T>\n): number | null {\n  if (!component) {\n    throw new TypeError(component + ' is not a component.')\n  }\n  if (component[componentClassIdSymbol]) {\n    return component[componentClassIdSymbol] as number\n  }\n  if (!component[componentSymbol]) {\n    throw new TypeError(component + ' is not a registered component.')\n  }\n\n  return null\n}\n\n/**\n * @public\n */\nexport function getComponentId<T extends DisposableComponentLike>(component: T): string {\n  if (!component) {\n    throw new TypeError(component + ' is not a component.')\n  }\n  if (component[componentIdSymbol]) {\n    return (component[componentIdSymbol] as any) as string\n  }\n  throw new TypeError(component + ' is not a registered disposable component.')\n}\n\n/** @public */\nexport type ObservableComponentSubscription = (key: string, newVal: any, oldVal: any) => void\n\n/**\n * @public\n */\nexport class ObservableComponent {\n  dirty: boolean = false\n  data: any = {}\n  private subscriptions: Array<ObservableComponentSubscription> = []\n\n  static component(target: ObservableComponent, propertyKey: string) {\n    if (delete (target as any)[propertyKey]) {\n      const componentSymbol = propertyKey + '_' + Math.random()\n      ;(target as any)[componentSymbol] = undefined\n\n      Object.defineProperty(target, componentSymbol, {\n        ...Object.getOwnPropertyDescriptor(target, componentSymbol),\n        enumerable: false\n      })\n\n      Object.defineProperty(target, propertyKey.toString(), {\n        get: function() {\n          return this[componentSymbol]\n        },\n        set: function(value) {\n          const oldValue = this[componentSymbol]\n\n          if (value) {\n            this.data[propertyKey] = getComponentId(value)\n          } else {\n            this.data[propertyKey] = null\n          }\n\n          this[componentSymbol] = value\n\n          if (value !== oldValue) {\n            this.dirty = true\n\n            for (let i = 0; i < this.subscriptions.length; i++) {\n              this.subscriptions[i](propertyKey, value, oldValue)\n            }\n          }\n        },\n        enumerable: true\n      })\n    }\n  }\n\n  static field(target: ObservableComponent, propertyKey: string) {\n    if (delete (target as any)[propertyKey]) {\n      Object.defineProperty(target, propertyKey.toString(), {\n        get: function(this: ObservableComponent) {\n          return this.data[propertyKey]\n        },\n        set: function(this: ObservableComponent, value) {\n          const oldValue = this.data[propertyKey]\n          this.data[propertyKey] = value\n\n          if (value !== oldValue) {\n            this.dirty = true\n\n            for (let i = 0; i < this.subscriptions.length; i++) {\n              this.subscriptions[i](propertyKey, value, oldValue)\n            }\n          }\n        },\n        enumerable: true\n      })\n    }\n  }\n\n  static uiValue(target: ObservableComponent, propertyKey: string) {\n    if (delete (target as any)[propertyKey]) {\n      Object.defineProperty(target, propertyKey.toString(), {\n        get: function(this: ObservableComponent): string | number {\n          return this.data[propertyKey].toString()\n        },\n        set: function(this: ObservableComponent, value: string | number) {\n          const oldValue = this.data[propertyKey]\n\n          const finalValue = new UIValue(value)\n\n          this.data[propertyKey] = finalValue\n\n          if (finalValue !== oldValue) {\n            this.dirty = true\n\n            for (let i = 0; i < this.subscriptions.length; i++) {\n              this.subscriptions[i](propertyKey, finalValue, oldValue)\n            }\n          }\n        },\n        enumerable: true\n      })\n    }\n  }\n\n  static readonly(target: ObservableComponent, propertyKey: string) {\n    if (delete (target as any)[propertyKey]) {\n      Object.defineProperty(target, propertyKey.toString(), {\n        get: function(this: ObservableComponent) {\n          if (propertyKey in this.data === false) {\n            throw new Error(`The field ${propertyKey} is uninitialized`)\n          }\n          return this.data[propertyKey]\n        },\n        set: function(this: ObservableComponent, value) {\n          if (propertyKey in this.data) {\n            throw new Error(`The field ${propertyKey} is readonly`)\n          }\n          this.data[propertyKey] = value\n          this.dirty = true\n        },\n        enumerable: true,\n        configurable: false\n      })\n    }\n  }\n\n  onChange(fn: ObservableComponentSubscription) {\n    this.subscriptions.push(fn)\n    return this\n  }\n\n  toJSON() {\n    return this.data\n  }\n}\n\n/**\n * @public\n */\nexport function isDisposableComponent(component: ComponentLike) {\n  return componentIdSymbol in component\n}\n","import { getComponentName, ComponentConstructor } from './Component'\nimport { IEntity } from './IEntity'\n\n/**\n * @public\n */\nexport class ComponentGroup {\n  readonly entities: ReadonlyArray<IEntity> = []\n  readonly requires!: ReadonlyArray<ComponentConstructor<any>>\n  readonly requiresNames!: ReadonlyArray<string>\n\n  active: boolean = false\n\n  private _requiresNames: string[] = []\n\n  constructor(...requires: ComponentConstructor<any>[]) {\n    // validate requires list\n    if (!requires) {\n      throw new Error('ComponentGroup: Could not load the requires list')\n    }\n    if (!(requires instanceof Array)) {\n      throw new Error('ComponentGroup: requires list is not an Array')\n    }\n\n    Object.defineProperty(this, 'requires', {\n      get: function() {\n        return requires.slice()\n      }\n    })\n\n    Object.defineProperty(this, 'requiresNames', {\n      get: function() {\n        return this._requiresNames.slice()\n      }\n    })\n\n    for (let ix = 0; ix < requires.length; ix++) {\n      const component = requires[ix]\n      let name: string | null = null\n\n      if (!component) {\n        throw new Error(`ComponentGroup: the required component at location ${ix} is invalid`)\n      }\n\n      try {\n        name = getComponentName(component)\n      } catch (e) {\n        throw new Error(\n          `ComponentGroup: the required component at location ${ix} is not registered as a @Component. Remember to provide the class of the component, not the name`\n        )\n      }\n\n      if (this._requiresNames.some($ => $ === name)) {\n        throw new Error(`ComponentGroup: the required component list has a repeated name ${name}`)\n      }\n\n      this._requiresNames.push(name)\n    }\n  }\n\n  hasEntity(entity: IEntity): boolean {\n    if (!entity.isAddedToEngine()) return false\n\n    return this.entities.indexOf(entity) !== -1\n  }\n\n  // @internal\n  addEntity(entity: IEntity) {\n    if (!entity.isAddedToEngine()) {\n      throw new TypeError('ComponentGroup: Cannot add a entity that is not added to the engine')\n    }\n\n    if (this.entities.indexOf(entity) === -1) {\n      // tslint:disable-next-line:semicolon\n      ;(this.entities as IEntity[]).push(entity)\n    }\n  }\n\n  // @internal\n  removeEntity(entity: IEntity) {\n    const id = this.entities.indexOf(entity)\n\n    if (id !== -1) {\n      // tslint:disable-next-line:semicolon\n      ;(this.entities as IEntity[]).splice(id, 1)\n    }\n  }\n\n  // @internal\n  componentRemoved(entity: IEntity, component: string) {\n    if (this._requiresNames.indexOf(component) !== -1) {\n      this.removeEntity(entity)\n    }\n  }\n\n  // @internal\n  meetsRequirements(entity: IEntity) {\n    for (let i = 0; i < this._requiresNames.length; i++) {\n      const componentName = this._requiresNames[i]\n      if (!(componentName in entity.components)) {\n        return false\n      }\n    }\n    return true\n  }\n}\n","import { getComponentName, ComponentConstructor, getComponentClassId, ComponentLike } from './Component'\nimport { IEngine, IEntity, ComponentAdded, ComponentRemoved, ParentChanged } from './IEntity'\nimport { EventManager } from './EventManager'\nimport { newId, log } from './helpers'\nimport { Attachable } from './Attachable'\n\n// tslint:disable:no-use-before-declare\n\n/**\n * @public\n */\nexport class Entity implements IEntity {\n  public children: Record<string, IEntity> = {}\n  public eventManager: EventManager | null = null\n  public alive: boolean = false\n\n  public readonly uuid: string = newId('E')\n  public readonly components: Record<string, any> = {}\n\n  // @internal\n  public engine: IEngine | null = null\n\n  // @internal\n  private _parent: IEntity | null = null\n\n  constructor(public name?: string) {\n    // stub\n  }\n\n  /**\n   * Adds or replaces a component in the entity.\n   * @param component - component instance.\n   */\n  addComponentOrReplace<T extends object>(component: T): T {\n    if (typeof component === 'function') {\n      throw new Error('You passed a function or class as a component, an instance of component is expected')\n    }\n\n    if (typeof component !== 'object') {\n      throw new Error(`You passed a ${typeof component}, an instance of component is expected`)\n    }\n\n    const componentName = getComponentName(component)\n\n    if (this.components[componentName]) {\n      if (this.components[componentName] === component) {\n        return component\n      }\n      this.removeComponent(this.components[componentName], false)\n    }\n\n    return this.addComponent(component)\n  }\n\n  /**\n   * Returns a boolean indicating if a component is present in the entity.\n   * @param component - component class, instance or name\n   */\n  hasComponent<T = any>(component: string): boolean\n  hasComponent<T>(component: ComponentConstructor<T>): boolean\n  hasComponent<T extends object>(component: T): boolean\n  hasComponent<T>(component: ComponentConstructor<T> | string): boolean {\n    const typeOfComponent = typeof component\n\n    if (typeOfComponent !== 'string' && typeOfComponent !== 'object' && typeOfComponent !== 'function') {\n      throw new Error('Entity#has(component): component is not a class, name or instance')\n    }\n\n    if ((component as any) == null) return false\n\n    const componentName = typeOfComponent === 'string' ? (component as string) : getComponentName(component as any)\n\n    const storedComponent = this.components[componentName]\n\n    if (!storedComponent) {\n      return false\n    }\n\n    if (typeOfComponent === 'object') {\n      return storedComponent === component\n    }\n\n    if (typeOfComponent === 'function') {\n      return storedComponent instanceof (component as ComponentConstructor<T>)\n    }\n\n    return true\n  }\n\n  /**\n   * Gets a component, if it doesn't exist, it throws an Error.\n   * @param component - component class or name\n   */\n  getComponent<T = any>(component: string): T\n  getComponent<T>(component: ComponentConstructor<T>): T\n  getComponent<T>(component: ComponentConstructor<T> | string): T {\n    const typeOfComponent = typeof component\n\n    if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\n      throw new Error('Entity#get(component): component is not a class or name')\n    }\n\n    const componentName = typeOfComponent === 'string' ? (component as string) : getComponentName(component as any)\n\n    const storedComponent = this.components[componentName]\n\n    if (!storedComponent) {\n      throw new Error(`Can not get component \"${componentName}\" from entity \"${this.identifier}\"`)\n    }\n\n    if (typeOfComponent === 'function') {\n      if (storedComponent instanceof (component as ComponentConstructor<T>)) {\n        return storedComponent\n      } else {\n        throw new Error(`Can not get component \"${componentName}\" from entity \"${this.identifier}\" (by instance)`)\n      }\n    }\n\n    return storedComponent\n  }\n\n  /**\n   * Gets a component, if it doesn't exist, it returns null.\n   * @param component - component class or name\n   */\n  getComponentOrNull<T = any>(component: string): T | null\n  getComponentOrNull<T>(component: ComponentConstructor<T>): T | null\n  getComponentOrNull<T>(component: ComponentConstructor<T> | string): T | null {\n    const typeOfComponent = typeof component\n\n    if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\n      throw new Error('Entity#getOrNull(component): component is not a class or name')\n    }\n\n    const componentName = typeOfComponent === 'string' ? (component as string) : getComponentName(component as any)\n\n    const storedComponent = this.components[componentName]\n\n    if (!storedComponent) {\n      return null\n    }\n\n    if (typeOfComponent === 'function') {\n      if (storedComponent instanceof (component as ComponentConstructor<T>)) {\n        return storedComponent\n      } else {\n        return null\n      }\n    }\n\n    return storedComponent\n  }\n\n  /**\n   * Gets a component, if it doesn't exist, it creates the component and returns it.\n   * @param component - component class\n   */\n  getComponentOrCreate<T>(component: ComponentConstructor<T> & { new(): T }): T {\n    if (typeof (component as any) !== 'function') {\n      throw new Error('Entity#getOrCreate(component): component is not a class')\n    }\n\n    let ret = this.getComponentOrNull(component)\n\n    if (!ret) {\n      ret = new component()\n      // Safe-guard to only add registered components to entities\n      getComponentName(ret)\n      this.addComponentOrReplace(ret as any)\n    }\n\n    return ret\n  }\n\n  /**\n   * Adds a component. If the component already exist, it throws an Error.\n   * @param component - component instance.\n   */\n  addComponent<T extends object>(component: T): T {\n    if (typeof component !== 'object') {\n      throw new Error(\n        'Entity#add(component): You passed a function or class as a component, an instance of component is expected'\n      )\n    }\n\n    const componentName = getComponentName(component)\n    const classId = getComponentClassId(component)\n\n    if (this.components[componentName]) {\n      throw new Error(`A component of type \"${componentName}\" is already present in entity \"${this.identifier}\"`)\n    }\n\n    this.components[componentName] = component\n\n    if (this.eventManager) {\n      this.eventManager.fireEvent(new ComponentAdded(this, componentName, classId))\n    }\n\n    const storedComponent = component as ComponentLike\n\n    if (typeof storedComponent.addedToEntity === 'function') {\n      storedComponent.addedToEntity(this)\n    }\n    return component\n  }\n\n  /**\n   * Removes a component instance from the entity.\n   * @param component - component instance to remove\n   * @param triggerRemovedEvent - should this action trigger an event?\n   */\n  removeComponent(component: string, triggerRemovedEvent?: boolean): void\n  removeComponent<T extends object>(component: T, triggerRemovedEvent?: boolean): void\n  removeComponent(component: ComponentConstructor<any>, triggerRemovedEvent?: boolean): void\n  removeComponent(component: object | string | Function, triggerRemovedEvent = true): void {\n    const typeOfComponent = typeof component\n\n    if (typeOfComponent !== 'string' && typeOfComponent !== 'function' && typeOfComponent !== 'object') {\n      throw new Error('Entity#remove(component): component is not a class, class or name')\n    }\n\n    const componentName = typeOfComponent === 'string' ? (component as string) : getComponentName(component as any)\n\n    const storedComponent = this.components[componentName] as ComponentLike | void\n\n    if (!storedComponent) {\n      log(`Entity Warning: Trying to remove inexisting component \"${componentName}\" from entity \"${this.identifier}\"`)\n      return\n    }\n\n    if (typeOfComponent === 'function') {\n      if (storedComponent instanceof (component as ComponentConstructor<any>)) {\n        delete this.components[componentName]\n\n        if (storedComponent) {\n          if (triggerRemovedEvent && this.eventManager) {\n            this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent))\n          }\n\n          if (typeof storedComponent.removedFromEntity === 'function') {\n            storedComponent.removedFromEntity(this)\n          }\n        }\n        return\n      } else {\n        log(\n          `Entity Warning: Trying to remove wrong (by constructor) component \"${componentName}\" from entity \"${this.identifier}\"`\n        )\n        return\n      }\n    }\n\n    delete this.components[componentName]\n\n    if (storedComponent) {\n      if (triggerRemovedEvent && this.eventManager) {\n        this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent))\n      }\n\n      if (typeof storedComponent.removedFromEntity === 'function') {\n        storedComponent.removedFromEntity(this)\n      }\n    }\n\n    return\n  }\n\n  /**\n   * Returns true if the entity is already added to the engine.\n   * Returns false if no engine was defined.\n   */\n  isAddedToEngine(): boolean {\n    if (this.engine && (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Sets the parent entity\n   */\n  setParent(_parent: IEntity | Attachable | null): IEntity {\n    let newParent: IEntity | null\n\n    // Check if parent is of type Attachable\n    if (_parent && 'getEntityRepresentation' in _parent) {\n      if (!this.engine) {\n        throw new Error(`In order to set an attachable as parent, you first need to add the entity to the engine.`)\n      }\n      newParent = _parent.getEntityRepresentation(this.engine)\n    } else {\n      // @ts-ignore\n      newParent = !_parent && this.engine ? this.engine.rootEntity : _parent\n    }\n    let currentParent = this.getParent()\n\n    if (newParent === this) {\n      throw new Error(\n        `Failed to set parent for entity \"${this.identifier}\": An entity can't set itself as a its own parent`\n      )\n    }\n\n    if (newParent === currentParent) {\n      return this\n    }\n\n    const circularAncestor = this.getCircularAncestor(newParent)\n\n    if (circularAncestor) {\n      throw new Error(\n        `Failed to set parent for entity \"${this.identifier}\": Circular parent references are not allowed (See entity \"${circularAncestor}\")`\n      )\n    }\n\n    if (currentParent) {\n      delete currentParent.children[this.uuid]\n    }\n\n    // Make sure that the parent and child are both on the engine, or off the engine, together\n    if (newParent !== null && newParent.uuid !== '0') {\n      if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {\n        // tslint:disable-next-line:semicolon\n        this.engine!.removeEntity(this)\n      }\n      if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {\n        // tslint:disable-next-line:semicolon\n        (newParent as Entity).engine!.addEntity(this)\n      }\n    }\n\n    this._parent = newParent || null\n    this.registerAsChild()\n\n    if (this.eventManager && this.engine) {\n      this.eventManager.fireEvent(new ParentChanged(this, newParent))\n    }\n\n    return this\n  }\n\n  /**\n   * Gets the parent entity\n   */\n  getParent(): IEntity | null {\n    return this._parent\n  }\n\n  private get identifier() {\n    return this.name || this.uuid\n  }\n\n  private getCircularAncestor(ent: IEntity | null): string | null {\n    const root = this.engine ? this.engine.rootEntity : null\n    let e: IEntity | null = ent\n\n    while (e && e !== root) {\n      const parent: IEntity | null = e.getParent()\n      if (parent === this) {\n        return e.uuid\n      }\n      e = parent\n    }\n\n    return null\n  }\n\n  private registerAsChild() {\n    const parent = this.getParent()\n\n    if (this.uuid && parent) {\n      parent.children[this.uuid] = this\n    }\n  }\n}\n","import { IEngine, ISystem, IEntity, ComponentAdded, ComponentRemoved } from './IEntity'\n\nimport {\n  getComponentName,\n  getComponentId,\n  DisposableComponentUpdated,\n  DisposableComponentLike,\n  ComponentConstructor,\n  DisposableComponentCreated,\n  DisposableComponentRemoved,\n  getComponentClassId\n} from './Component'\nimport { EventManager } from './EventManager'\nimport { ComponentGroup } from './ComponentGroup'\n\nimport { log, error } from './helpers'\nimport { Entity } from './Entity'\n\n/**\n * @internal\n */\ntype SystemEntry = { system: ISystem; priority: number }\n\n/**\n * @public\n */\nexport class Engine implements IEngine {\n  readonly eventManager: EventManager = new EventManager()\n  readonly rootEntity: IEntity\n  readonly firstPersonCameraEntity: IEntity\n  readonly avatarEntity: IEntity\n\n  // @internal\n  readonly systems: SystemEntry[] = []\n\n  // @internal\n  readonly entityLists: Record<string, Record<string, IEntity>> = {}\n\n  // @internal\n  readonly addedSystems: ISystem[] = []\n\n  private readonly _entities: Record<string, IEntity> = {}\n  private readonly _disposableComponents: Record<string, DisposableComponentLike> = {}\n  private readonly _componentGroups: Record<string, ComponentGroup[]> = {}\n\n  // systems that doesn't require any component or handle their own logic\n  private readonly simpleSystems: ISystem[] = []\n\n  get entities() {\n    return this._entities as Readonly<Record<string, IEntity>>\n  }\n\n  get disposableComponents() {\n    return this._disposableComponents as Readonly<Record<string, DisposableComponentLike>>\n  }\n\n  constructor(rootEntity: IEntity) {\n    this.eventManager.addListener(ComponentAdded, this, this.componentAddedHandler)\n    this.eventManager.addListener(ComponentRemoved, this, this.componentRemovedHandler)\n    this.rootEntity = rootEntity\n    this.firstPersonCameraEntity = new Entity()\n    ;(this.firstPersonCameraEntity as any).uuid = 'FirstPersonCameraEntityReference'\n    this.addEntity(this.firstPersonCameraEntity)\n    this.avatarEntity = new Entity()\n    ;(this.avatarEntity as any).uuid = 'AvatarEntityReference'\n    this.addEntity(this.avatarEntity)\n  }\n\n  addEntity(entity: IEntity): IEntity {\n    const parent = entity.getParent()\n\n    if (entity.isAddedToEngine()) {\n      return entity\n    }\n\n    entity.eventManager = this.eventManager\n    ;(entity as Entity).engine = this\n\n    this._entities[entity.uuid] = entity\n\n    this.checkRequirementsAndAdd(entity)\n\n    if (!parent) {\n      entity.setParent(this.rootEntity)\n    } else {\n      if (!parent.isAddedToEngine() && parent !== this.rootEntity) {\n        log('Engine: warning, added an entity with a parent not present in the engine. Parent id: ' + parent.uuid)\n      }\n    }\n\n    entity.alive = true\n\n    for (let i in entity.children) {\n      const child = entity.children[i]\n      if (child) {\n        if (!child.isAddedToEngine()) {\n          this.addEntity(child)\n        }\n      }\n    }\n\n    return entity\n  }\n\n  removeEntity(entity: IEntity): boolean {\n    const id = entity.uuid\n\n    if (entity.isAddedToEngine()) {\n      for (let componentName in entity.components) {\n        const componentGroups = this._componentGroups[componentName]\n\n        if (componentGroups) {\n          for (let groupIndex in componentGroups) {\n            componentGroups[groupIndex].removeEntity(entity)\n          }\n        }\n\n        delete this.entityLists[componentName][id]\n      }\n\n      for (let i = 0; i < this.simpleSystems.length; i++) {\n        const system = this.simpleSystems[i]\n\n        if (system.onRemoveEntity) {\n          system.onRemoveEntity(entity)\n        }\n      }\n\n      for (let i in entity.children) {\n        const child = entity.children[i]\n        if (child) {\n          this.removeEntity(child)\n        }\n      }\n\n      entity.alive = false\n      entity.eventManager = null\n\n      delete this._entities[id]\n\n      return true\n    } else {\n      log('Engine: Trying to remove non existent entity from engine.')\n      if (!entity.isAddedToEngine()) {\n        log(`Engine: Entity \"${entity.uuid}\" has not been added to any engine yet.`)\n      } else {\n        log('Engine: Entity id: ' + id)\n      }\n      log(\"Engine: Entity's components:\")\n      for (let componentName in entity.components) {\n        log(componentName)\n      }\n      return false\n    }\n  }\n\n  addSystem(system: ISystem, priority: number = 0) {\n    if (this.addedSystems.indexOf(system) !== -1) {\n      log('Engine: Trying to add a system that is already added. Aborting')\n      return system\n    }\n\n    if (this.systems.length > 0) {\n      for (let i = 0; i < this.systems.length; i++) {\n        const entry = this.systems[i]\n        const isLast = i === this.systems.length - 1\n\n        if (entry.priority > priority) {\n          this.addedSystems.push(system)\n          this.systems.splice(i, 0, { system, priority })\n          break\n        } else if (isLast) {\n          this.addedSystems.push(system)\n          this.systems.splice(i + 1, 0, { system, priority })\n          break\n        }\n      }\n    } else {\n      this.addedSystems.push(system)\n      this.systems.splice(1, 0, { system, priority })\n    }\n\n    this.registerSystem(system)\n\n    return system\n  }\n\n  removeSystem(system: ISystem) {\n    const idx = this.addedSystems.indexOf(system)\n\n    if (idx !== -1) {\n      system.active = false\n\n      if (system.deactivate) {\n        system.deactivate()\n      }\n\n      this.addedSystems.splice(idx, 1)\n\n      for (let i = 0; i < this.systems.length; i++) {\n        const sys = this.systems[i].system\n        if (sys === system) {\n          this.systems.splice(i, 1)\n        }\n      }\n      return true\n    }\n    return false\n  }\n\n  update(dt: number) {\n    for (let i in this.systems) {\n      const system = this.systems[i].system\n      if (system.active && system.update) {\n        try {\n          system.update(dt)\n        } catch (e) {\n          // TODO: e may not be an Error\n          error(e as any)\n        }\n      }\n    }\n    return this\n  }\n\n  getEntitiesWithComponent(component: string): Record<string, any>\n  getEntitiesWithComponent(component: ComponentConstructor<any>): Record<string, IEntity>\n  getEntitiesWithComponent(component: ComponentConstructor<any> | string): Record<string, IEntity> {\n    const componentName = typeof component === 'string' ? component : getComponentName(component)\n\n    if (componentName in this.entityLists) {\n      return this.entityLists[componentName]\n    } else {\n      return (this.entityLists[componentName] = {})\n    }\n  }\n\n  registerComponent(component: DisposableComponentLike) {\n    const id = getComponentId(component)\n    const name = getComponentName(component)\n    const classId = getComponentClassId(component)\n    this._disposableComponents[id] = component\n    if (classId !== null) {\n      this.eventManager.fireEvent(new DisposableComponentCreated(id, name, classId))\n      this.eventManager.fireEvent(new DisposableComponentUpdated(id, component))\n    }\n  }\n\n  disposeComponent(component: DisposableComponentLike) {\n    const id = getComponentId(component)\n\n    if (delete this._disposableComponents[id]) {\n      this.eventManager.fireEvent(new DisposableComponentRemoved(id))\n\n      if (component.onDispose) {\n        component.onDispose()\n      }\n      return true\n    }\n    return false\n  }\n\n  updateComponent(component: DisposableComponentLike) {\n    this.eventManager.fireEvent(new DisposableComponentUpdated(getComponentId(component), component))\n  }\n\n  getComponentGroup(...requires: ComponentConstructor<any>[]) {\n    let componentGroup = undefined\n\n    // Return an already created component-group if it already exists\n    if (requires.length > 0) {\n      // 1. get component groups for first require\n      let componentGroups = this._componentGroups[getComponentName(requires[0])]\n\n      if (componentGroups) {\n        const components = requires.slice()\n\n        // 2. search for a component group that has all the same requirements\n        for (let i = 0; i < componentGroups.length; i++) {\n          const traversedComponentGroup = componentGroups[i]\n\n          if (components.length === traversedComponentGroup.requires.length) {\n            for (let j = 0; j < components.length; j++) {\n              if (traversedComponentGroup.requires.indexOf(components[j]) === -1) break\n\n              if (j === components.length - 1) {\n                componentGroup = traversedComponentGroup\n              }\n            }\n\n            if (componentGroup) break\n          }\n        }\n      }\n    }\n\n    if (componentGroup) {\n      // 3. Found an existent component group with the exact same requirements\n      return componentGroup\n    }\n\n    // Otherwise create and store it\n    componentGroup = new ComponentGroup(...requires)\n\n    componentGroup.active = true\n\n    const requiresNames = componentGroup.requiresNames\n\n    for (let i = 0; i < requiresNames.length; i++) {\n      const componentName = requiresNames[i]\n\n      let componentGroups = this._componentGroups[componentName]\n\n      if (!componentGroups) {\n        this._componentGroups[componentName] = componentGroups = []\n      }\n\n      if (componentGroups.indexOf(componentGroup) === -1) {\n        componentGroups.push(componentGroup)\n      }\n    }\n\n    for (let entityId in this._entities) {\n      this.checkRequirements(this._entities[entityId], componentGroup)\n    }\n\n    return componentGroup\n  }\n\n  removeComponentGroup(componentGroup: ComponentGroup) {\n    if (componentGroup.active) {\n      componentGroup.active = false\n      const requiresNames = componentGroup.requiresNames\n      for (let i = 0; i < requiresNames.length; i++) {\n        const componentName = requiresNames[i]\n\n        let componentGroups = this._componentGroups[componentName]\n\n        if (componentGroups) {\n          const idx = componentGroups.indexOf(componentGroup)\n          if (idx !== -1) {\n            componentGroups.splice(idx, 1)\n          }\n        }\n      }\n      return true\n    }\n    return false\n  }\n\n  private registerSystem(system: ISystem) {\n    system.active = true\n\n    if (system.activate) {\n      system.activate(this)\n    }\n\n    this.simpleSystems.push(system)\n  }\n\n  private checkRequirementsAndAdd(entity: IEntity) {\n    if (!entity.isAddedToEngine()) return\n\n    for (let componentName in entity.components) {\n      if (!(componentName in this.entityLists)) {\n        this.entityLists[componentName] = {}\n      }\n\n      this.entityLists[componentName][entity.uuid] = entity\n\n      const componentGroups = this._componentGroups[componentName]\n\n      if (componentGroups) {\n        for (let systemIndex in componentGroups) {\n          this.checkRequirements(entity, componentGroups[systemIndex])\n        }\n      }\n    }\n\n    for (let i = 0; i < this.simpleSystems.length; i++) {\n      const system = this.simpleSystems[i]\n\n      if (system.onAddEntity) {\n        system.onAddEntity(entity)\n      }\n    }\n  }\n\n  private checkRequirements(entity: IEntity, system: ComponentGroup) {\n    if (system.meetsRequirements(entity)) {\n      if (!system.hasEntity(entity)) {\n        system.addEntity(entity)\n      }\n    } else {\n      if (system.hasEntity(entity)) {\n        system.removeEntity(entity)\n      }\n    }\n  }\n\n  private componentAddedHandler(event: ComponentAdded) {\n    const { entity, componentName } = event\n\n    if (!entity.isAddedToEngine()) return\n\n    if (!this.entityLists[componentName]) {\n      this.entityLists[componentName] = { [entity.uuid]: entity }\n    } else {\n      this.entityLists[componentName][entity.uuid] = entity\n    }\n\n    const componentGroups = this._componentGroups[componentName]\n\n    if (componentGroups) {\n      for (let i in componentGroups) {\n        this.checkRequirements(entity, componentGroups[i])\n      }\n    }\n  }\n\n  private componentRemovedHandler(event: ComponentRemoved) {\n    // In case a single component gets removed from an entity, we inform\n    // all systems that this entity lost this specific component.\n    const { entity, componentName } = event\n\n    if (!entity.isAddedToEngine()) return\n\n    delete this.entityLists[componentName][entity.uuid]\n\n    const componentGroups = this._componentGroups[componentName]\n\n    if (componentGroups) {\n      for (let i in componentGroups) {\n        this.checkRequirements(entity, componentGroups[i])\n      }\n    }\n  }\n}\n","import { error } from './helpers'\n\ndeclare var Promise: any\n\n/** @public */\nexport type TaskResult<T> = Promise<T> & {\n  isComplete: boolean\n  didFail?: boolean\n  error?: Error\n  result?: T\n}\n\nconst _defer = Promise.resolve().then.bind(Promise.resolve())\n\n/**\n * Executes an asynchronous task\n * @param task - the task to execute\n * @public\n */\nexport function executeTask<T>(task: () => Promise<T>): TaskResult<T> {\n  const result: TaskResult<T> = _defer(task)\n\n  result.isComplete = false\n\n  result\n    .then($ => {\n      result.isComplete = true\n      result.result = $\n      result.didFail = false\n    })\n    .catch($ => {\n      result.isComplete = true\n      result.error = $\n      result.didFail = true\n      error('executeTask: FAILED ' + $.toString(), $)\n    })\n\n  return result\n}\n","let modulePromise: any\n\n/**\n * teleport player to a destination\n * @param destination - \"coordX,coordY\", \"magic\", \"crowd\"\n * @public\n */\nexport function teleportTo(destination: string) {\n  // error(`teleportTo(destination) was deprecated. Please use:\n\n  // import {requestTeleport} from '@decentraland/UserActionModule'\n  // executeTask(async () => {\n  //   await requestTeleport(destination)\n  // })`)\n  callModuleRpc('requestTeleport', [destination])\n}\n\nfunction ensureModule(): boolean {\n  if (typeof modulePromise === 'undefined' && typeof dcl !== 'undefined') {\n    modulePromise = dcl.loadModule('@decentraland/UserActionModule', {})\n  }\n  return typeof modulePromise !== 'undefined' && typeof dcl !== 'undefined'\n}\n\nfunction callModuleRpc(methodName: string, args: any[]): void {\n  if (ensureModule()) {\n    modulePromise.then(($: any) => {\n      dcl.callRpc($.rpcHandle, methodName, args)\n    })\n  }\n}\n","import { executeTask } from './Task'\n\ndeclare var Promise: any\n\n/**\n * A class serves as a medium between the observable and its observers\n * @public\n */\nexport class ObserverEventState {\n  /**\n   * An Observer can set this property to true to prevent subsequent observers of being notified\n   */\n  public skipNextObservers!: boolean\n\n  /**\n   * Get the mask value that were used to trigger the event corresponding to this EventState object\n   */\n  public mask!: number\n\n  /**\n   * The object that originally notified the event\n   */\n  public target?: any\n\n  /**\n   * The current object in the bubbling phase\n   */\n  public currentTarget?: any\n\n  /**\n   * This will be populated with the return value of the last function that was executed.\n   * If it is the first function in the callback chain it will be the event data.\n   */\n  public lastReturnValue?: any\n\n  /**\n   * Create a new EventState\n   * @param mask - defines the mask associated with this state\n   * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\n   * @param target - defines the original target of the state\n   * @param currentTarget - defines the current target of the state\n   */\n  constructor(mask: number, skipNextObservers = false, target?: any, currentTarget?: any) {\n    this.initalize(mask, skipNextObservers, target, currentTarget)\n  }\n\n  /**\n   * Initialize the current event state\n   * @param mask - defines the mask associated with this state\n   * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\n   * @param target - defines the original target of the state\n   * @param currentTarget - defines the current target of the state\n   * @returns the current event state\n   */\n  public initalize(mask: number, skipNextObservers = false, target?: any, currentTarget?: any): ObserverEventState {\n    this.mask = mask\n    this.skipNextObservers = skipNextObservers\n    this.target = target\n    this.currentTarget = currentTarget\n    return this\n  }\n}\n\n/**\n * Represent an Observer registered to a given Observable object.\n * @public\n */\nexport class Observer<T> {\n  /**\n   * Gets or sets a property defining that the observer as to be unregistered after the next notification\n   */\n  public unregisterOnNextCall = false\n\n  /** For internal usage */\n  public _willBeUnregistered = false\n\n  /**\n   * Creates a new observer\n   * @param callback - defines the callback to call when the observer is notified\n   * @param mask - defines the mask of the observer (used to filter notifications)\n   * @param scope - defines the current scope used to restore the JS context\n   */\n  constructor(\n    /**\n     * Defines the callback to call when the observer is notified\n     */\n    public callback: (eventData: T, eventState: ObserverEventState) => void,\n    /**\n     * Defines the mask of the observer (used to filter notifications)\n     */\n    public mask: number,\n    /**\n     * Defines the current scope used to restore the JS context\n     */\n    public scope: any = null\n  ) {}\n}\n\n/**\n * Represent a list of observers registered to multiple Observables object.\n * @public\n */\nexport class MultiObserver<T> {\n  private _observers: Observer<T>[] | null = null\n  private _observables: Observable<T>[] | null = null\n\n  /**\n   * Raise a callback when one of the observable will notify\n   * @param observables - defines a list of observables to watch\n   * @param callback - defines the callback to call on notification\n   * @param mask - defines the mask used to filter notifications\n   * @param scope - defines the current scope used to restore the JS context\n   * @returns the new MultiObserver\n   */\n  public static Watch<T>(\n    observables: Observable<T>[],\n    callback: (eventData: T, eventState: ObserverEventState) => void,\n    mask: number = -1,\n    scope: any = null\n  ): MultiObserver<T> {\n    let result = new MultiObserver<T>()\n\n    result._observers = new Array<Observer<T>>()\n    result._observables = observables\n\n    for (let observable of observables) {\n      let observer = observable.add(callback, mask, false, scope)\n      if (observer) {\n        result._observers.push(observer)\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * Release associated resources\n   */\n  public dispose(): void {\n    if (this._observers && this._observables) {\n      for (let index = 0; index < this._observers.length; index++) {\n        this._observables[index].remove(this._observers[index])\n      }\n    }\n\n    this._observers = null\n    this._observables = null\n  }\n}\n\n/**\n * The Observable class is a simple implementation of the Observable pattern.\n *\n * There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\n * This enable a more fine grained execution without having to rely on multiple different Observable objects.\n * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\n * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\n *\n * @public\n */\nexport class Observable<T> {\n  private _observers = new Array<Observer<T>>()\n\n  private _eventState: ObserverEventState\n\n  private _onObserverAdded: null | ((observer: Observer<T>) => void) = null\n\n  /**\n   * Creates a new observable\n   * @param onObserverAdded - defines a callback to call when a new observer is added\n   */\n  constructor(onObserverAdded?: (observer: Observer<T>) => void) {\n    this._eventState = new ObserverEventState(0)\n\n    if (onObserverAdded) {\n      this._onObserverAdded = onObserverAdded\n    }\n  }\n\n  /**\n   * Create a new Observer with the specified callback\n   * @param callback - the callback that will be executed for that Observer\n   * @param mask - the mask used to filter observers\n   * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\n   * @param scope - optional scope for the callback to be called from\n   * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\n   * @returns the new observer created for the callback\n   */\n  public add(\n    callback: (eventData: T, eventState: ObserverEventState) => void,\n    mask: number = -1,\n    insertFirst = false,\n    scope: any = null,\n    unregisterOnFirstCall = false\n  ): null | Observer<T> {\n    if (!callback) {\n      return null\n    }\n\n    let observer = new Observer(callback, mask, scope)\n    observer.unregisterOnNextCall = unregisterOnFirstCall\n\n    if (insertFirst) {\n      this._observers.unshift(observer)\n    } else {\n      this._observers.push(observer)\n    }\n\n    if (this._onObserverAdded) {\n      this._onObserverAdded(observer)\n    }\n\n    return observer\n  }\n\n  /**\n   * Create a new Observer with the specified callback and unregisters after the next notification\n   * @param callback - the callback that will be executed for that Observer\n   * @returns the new observer created for the callback\n   */\n  public addOnce(callback: (eventData: T, eventState: ObserverEventState) => void): null | Observer<T> {\n    return this.add(callback, undefined, undefined, undefined, true)\n  }\n\n  /**\n   * Remove an Observer from the Observable object\n   * @param observer - the instance of the Observer to remove\n   * @returns false if it doesn't belong to this Observable\n   */\n  public remove(observer: null | Observer<T>): boolean {\n    if (!observer) {\n      return false\n    }\n\n    let index = this._observers.indexOf(observer)\n\n    if (index !== -1) {\n      this._deferUnregister(observer)\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Remove a callback from the Observable object\n   * @param callback - the callback to remove\n   * @param scope - optional scope. If used only the callbacks with this scope will be removed\n   * @returns false if it doesn't belong to this Observable\n   */\n  public removeCallback(callback: (eventData: T, eventState: ObserverEventState) => void, scope?: any): boolean {\n    for (let index = 0; index < this._observers.length; index++) {\n      if (this._observers[index].callback === callback && (!scope || scope === this._observers[index].scope)) {\n        this._deferUnregister(this._observers[index])\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Notify all Observers by calling their respective callback with the given data\n   * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\n   * @param eventData - defines the data to send to all observers\n   * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\n   * @param target - defines the original target of the state\n   * @param currentTarget - defines the current target of the state\n   * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\n   */\n  public notifyObservers(eventData: T, mask: number = -1, target?: any, currentTarget?: any): boolean {\n    if (!this._observers.length) {\n      return true\n    }\n\n    let state = this._eventState\n    state.mask = mask\n    state.target = target\n    state.currentTarget = currentTarget\n    state.skipNextObservers = false\n    state.lastReturnValue = eventData\n\n    for (let obs of this._observers) {\n      if (obs._willBeUnregistered) {\n        continue\n      }\n\n      if (obs.mask & mask) {\n        if (obs.scope) {\n          state.lastReturnValue = obs.callback.apply(obs.scope, [eventData, state])\n        } else {\n          state.lastReturnValue = obs.callback(eventData, state)\n        }\n\n        if (obs.unregisterOnNextCall) {\n          this._deferUnregister(obs)\n        }\n      }\n      if (state.skipNextObservers) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Calling this will execute each callback, expecting it to be a promise or return a value.\n   * If at any point in the chain one function fails, the promise will fail and the execution will not continue.\n   * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object\n   * and it is crucial that all callbacks will be executed.\n   * The order of the callbacks is kept, callbacks are not executed parallel.\n   *\n   * @param eventData - The data to be sent to each callback\n   * @param mask - is used to filter observers defaults to -1\n   * @param target - defines the callback target (see EventState)\n   * @param currentTarget - defines he current object in the bubbling phase\n   * @returns will return a Promise than resolves when all callbacks executed successfully.\n   */\n  public notifyObserversWithPromise(eventData: T, mask: number = -1, target?: any, currentTarget?: any): Promise<T> {\n    // create an empty promise\n    let p: Promise<any> = Promise.resolve(eventData)\n\n    // no observers? return this promise.\n    if (!this._observers.length) {\n      return p\n    }\n\n    let state = this._eventState\n    state.mask = mask\n    state.target = target\n    state.currentTarget = currentTarget\n    state.skipNextObservers = false\n\n    // execute one callback after another (not using Promise.all, the order is important)\n    this._observers.forEach(obs => {\n      if (state.skipNextObservers) {\n        return\n      }\n      if (obs._willBeUnregistered) {\n        return\n      }\n      if (obs.mask & mask) {\n        if (obs.scope) {\n          p = p.then(lastReturnedValue => {\n            state.lastReturnValue = lastReturnedValue\n            return obs.callback.apply(obs.scope, [eventData, state])\n          })\n        } else {\n          p = p.then(lastReturnedValue => {\n            state.lastReturnValue = lastReturnedValue\n            return obs.callback(eventData, state)\n          })\n        }\n        if (obs.unregisterOnNextCall) {\n          this._deferUnregister(obs)\n        }\n      }\n    })\n\n    // return the eventData\n    return p.then(() => {\n      return eventData\n    })\n  }\n\n  /**\n   * Notify a specific observer\n   * @param observer - defines the observer to notify\n   * @param eventData - defines the data to be sent to each callback\n   * @param mask - is used to filter observers defaults to -1\n   */\n  public notifyObserver(observer: Observer<T>, eventData: T, mask: number = -1): void {\n    let state = this._eventState\n    state.mask = mask\n    state.skipNextObservers = false\n\n    observer.callback(eventData, state)\n  }\n\n  /**\n   * Gets a boolean indicating if the observable has at least one observer\n   * @returns true is the Observable has at least one Observer registered\n   */\n  public hasObservers(): boolean {\n    return this._observers.length > 0\n  }\n\n  /**\n   * Clear the list of observers\n   */\n  public clear(): void {\n    this._observers = new Array<Observer<T>>()\n    this._onObserverAdded = null\n  }\n\n  /**\n   * Clone the current observable\n   * @returns a new observable\n   */\n  public clone(): Observable<T> {\n    let result = new Observable<T>()\n\n    result._observers = this._observers.slice(0)\n\n    return result\n  }\n\n  /**\n   * Does this observable handles observer registered with a given mask\n   * @param mask - defines the mask to be tested\n   * @returns whether or not one observer registered with the given mask is handeled\n   */\n  public hasSpecificMask(mask: number = -1): boolean {\n    for (let obs of this._observers) {\n      if (obs.mask & mask || obs.mask === mask) {\n        return true\n      }\n    }\n    return false\n  }\n\n  private _deferUnregister(observer: Observer<T>): void {\n    observer.unregisterOnNextCall = false\n    observer._willBeUnregistered = true\n    executeTask(async () => this._remove(observer))\n  }\n\n  // This should only be called when not iterating over _observers to avoid callback skipping.\n  // Removes an observer from the _observer Array.\n  private _remove(observer: null | Observer<T>): boolean {\n    if (!observer) {\n      return false\n    }\n\n    let index = this._observers.indexOf(observer)\n\n    if (index !== -1) {\n      this._observers.splice(index, 1)\n      return true\n    }\n\n    return false\n  }\n}\n","import { EventConstructor } from '../ecs/EventManager'\nimport { Observable } from '../ecs/Observable'\nimport { VideoTexture} from './Components'\nimport { DisposableComponent } from '../ecs/Component'\n\n/**\n * @public\n */\n@EventConstructor()\nexport class UUIDEvent<T = any> {\n  constructor(public readonly uuid: string, public readonly payload: T) { }\n}\n\n/**\n * @public\n */\n@EventConstructor()\nexport class RaycastResponse<T> {\n  constructor(\n    public readonly payload: RaycastResponsePayload<T>\n  ) { }\n}\n\n/**\n * @public\n */\n@EventConstructor()\nexport class PointerEvent<GlobalInputEventResult> {\n  constructor(public readonly payload: GlobalInputEventResult) { }\n}\n\nlet internalDcl: DecentralandInterface | void\n\n/**\n * @internal\n * This function generates a callback that is passed to the Observable\n * constructor to subscribe to the events of the DecentralandInterface\n */\nfunction createSubscriber(eventName: keyof IEvents) {\n  return () => {\n    if (internalDcl) {\n      internalDcl.subscribe(eventName)\n    }\n  }\n}\n\n/**\n * This event is triggered when you change your camera between 1st and 3rd person\n * @public\n */\nexport const onCameraModeChangedObservable = new Observable<IEvents['cameraModeChanged']>(createSubscriber('cameraModeChanged'))\n\n/**\n * This event is triggered when you change your camera between 1st and 3rd person\n * @public\n */\nexport const onIdleStateChangedObservable = new Observable<IEvents['idleStateChanged']>(createSubscriber('idleStateChanged'))\n\n/**\n * These events are triggered after your character enters the scene.\n * @public\n */\nexport const onEnterSceneObservable = new Observable<IEvents['onEnterScene']>(createSubscriber('onEnterScene'))\n\n/** @public @deprecated Use onEnterSceneObservable instead. */\nexport const onEnterScene = onEnterSceneObservable\n\n/**\n * These events are triggered after your character leaves the scene.\n * @public\n */\nexport const onLeaveSceneObservable = new Observable<IEvents['onLeaveScene']>(createSubscriber('onLeaveScene'))\n\n/** @public @deprecated Use onLeaveSceneObservable instead. */\nexport const onLeaveScene = onLeaveSceneObservable\n\n/**\n * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)\n * @public\n */\nexport const onSceneReadyObservable = new Observable<IEvents['sceneStart']>(createSubscriber('sceneStart'))\n\n/**\n * @public\n */\nexport const onPlayerExpressionObservable = new Observable<IEvents['playerExpression']>(createSubscriber('playerExpression'))\n\n/**\n* @public\n*/\nexport const onVideoEvent = new Observable<IEvents['videoEvent']>(createSubscriber('videoEvent'))\n\n/**\n* @public\n*/\nexport const onProfileChanged = new Observable<IEvents['profileChanged']>(createSubscriber('profileChanged'))\n\n/**\n * @internal\n * This function adds _one_ listener to the onEvent event of dcl interface.\n * Leveraging a switch to route events to the Observable handlers.\n */\nexport function _initEventObservables(dcl: DecentralandInterface) {\n  // store internal reference to dcl, it is going to be used to subscribe to the events\n  internalDcl = dcl\n\n  if (internalDcl) {\n    internalDcl.onEvent((event) => {\n      switch (event.type) {\n        case 'onEnterScene': {\n          onEnterSceneObservable.notifyObservers(event.data as IEvents['onEnterScene'])\n          return\n        }\n        case 'onLeaveScene': {\n          onLeaveSceneObservable.notifyObservers(event.data as IEvents['onLeaveScene'])\n          return\n        }\n        case 'cameraModeChanged': {\n          onCameraModeChangedObservable.notifyObservers(event.data as IEvents['cameraModeChanged'])\n          return\n        }\n        case 'idleStateChanged': {\n          onIdleStateChangedObservable.notifyObservers(event.data as IEvents['idleStateChanged'])\n          return\n        }\n        case 'sceneStart': {\n          onSceneReadyObservable.notifyObservers(event.data as IEvents['sceneStart'])\n          return\n        }\n        case 'playerExpression': {\n          onPlayerExpressionObservable.notifyObservers(event.data as IEvents['playerExpression'])\n          return\n        }\n        case 'videoEvent': {\n          const videoData = event.data as IEvents['videoEvent']\n          const component = DisposableComponent.engine.disposableComponents[videoData.componentId] as VideoTexture\n          if (component) {\n            component.update(videoData)\n          }\n          onVideoEvent.notifyObservers(videoData)\n          return\n        }\n        case 'profileChanged': {\n          onProfileChanged.notifyObservers(event.data as IEvents['profileChanged'])\n          return\n        }\n      }\n    })\n  }\n}\n","import {\n  DisposableComponentCreated,\n  DisposableComponentRemoved,\n  DisposableComponentUpdated,\n  getComponentClassId,\n  getComponentId,\n  isDisposableComponent,\n  ObservableComponent\n} from '../ecs/Component'\nimport { Engine } from '../ecs/Engine'\nimport { ComponentAdded, ComponentRemoved, IEntity, ISystem, ParentChanged } from '../ecs/IEntity'\nimport { UUIDEvent, PointerEvent, RaycastResponse } from './Events'\nimport { RaycastHitEntities, RaycastHitEntity } from './PhysicsCast'\n\n// This number is defined in the protocol ECS.SetEntityParent.3\nconst ROOT_ENTITY_ID = '0'\n\nexport class DecentralandSynchronizationSystem implements ISystem {\n  cachedComponents: Record<string, Record<string, string>> = {}\n  engine!: Engine\n\n  constructor(public dcl: DecentralandInterface) {}\n\n  activate(engine: Engine) {\n    this.engine = engine\n    engine.eventManager.addListener(ComponentAdded, this, this.componentAdded)\n    engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved)\n    engine.eventManager.addListener(DisposableComponentCreated, this, this.disposableComponentCreated)\n    engine.eventManager.addListener(DisposableComponentRemoved, this, this.disposableComponentRemoved)\n    engine.eventManager.addListener(DisposableComponentUpdated, this, this.disposableComponentUpdated)\n    engine.eventManager.addListener(ParentChanged, this, this.parentChanged)\n\n    const rootId = engine.rootEntity.uuid\n\n    this.dcl.addEntity(rootId)\n\n    // TODO(agus): send disposableComponents if exist\n\n    this.dcl.onUpdate((dt) => {\n      engine.update(dt)\n      this.presentEntities()\n    })\n\n    this.dcl.onEvent((event) => {\n      const data = event.data as any\n      switch (event.type) {\n        case 'uuidEvent':\n          engine.eventManager.fireEvent(new UUIDEvent(data.uuid, data.payload))\n          break\n        case 'raycastResponse':\n          if (data.queryType === 'HitFirst') {\n            engine.eventManager.fireEvent(new RaycastResponse<RaycastHitEntity>(data))\n          } else if (data.queryType === 'HitAll') {\n            engine.eventManager.fireEvent(new RaycastResponse<RaycastHitEntities>(data))\n          }\n          break\n        case 'pointerEvent':\n          engine.eventManager.fireEvent(new PointerEvent(data.payload))\n          break\n      }\n    })\n  }\n\n  /**\n   * system.onAddEntity is called by the engine when a entity is added to the\n   * engine.\n   */\n  onAddEntity(entity: IEntity) {\n    if (entity && entity.isAddedToEngine()) {\n      const entityId = entity.uuid\n      const parent = entity.getParent()\n\n      this.dcl.addEntity(entityId)\n\n      if (parent) {\n        // If the entity has a parent, we send the the enparenting signal\n        // otherwise the engine will know the entity is set as a child of\n        // engine.rootEntity by default\n        this.dcl.setParent(entityId, parent.uuid)\n      }\n\n      // This creates a cache dictionary to avoid send redundant information to\n      // the engine in order to avoid unnecessary work in the main thread.\n      this.cachedComponents[entityId] = {}\n\n      // this iterator sends the current components of te engine at the moment\n      // of addition\n      for (let componentName in entity.components) {\n        const component = entity.components[componentName]\n        const classId = getComponentClassId(component)\n\n        if (classId !== null) {\n          if (isDisposableComponent(component)) {\n            // Send the attach component signal\n            this.dcl.attachEntityComponent(entity.uuid, componentName, getComponentId(component))\n          } else {\n            const componentJson: string = JSON.stringify(component)\n\n            // Send the updated component\n            this.dcl.updateEntityComponent(entityId, componentName, classId, componentJson)\n\n            // Update the cached copy of the sent component\n            this.cachedComponents[entityId][componentName] = componentJson\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * system.onRemoveEntity is called by the engine when a entity gets removed\n   * from the engine.\n   */\n  onRemoveEntity(entity: IEntity) {\n    if (entity.isAddedToEngine()) {\n      const entityId = entity.uuid\n\n      // Send the removeEntity signal\n      this.dcl.removeEntity(entityId)\n\n      // Remove the caches from local memory\n      delete this.cachedComponents[entityId]\n    }\n  }\n\n  /**\n   * This method is called at the end of every update cycle.\n   * It finds and sends updates in components of the engine entities.\n   */\n  private presentEntities() {\n    for (let i in this.engine.entities) {\n      const entity = this.engine.entities[i]\n\n      for (let componentName in entity.components) {\n        const component = entity.components[componentName]\n        const classId = getComponentClassId(component)\n\n        if (classId !== null && !isDisposableComponent(component)) {\n          const jsonRepresentation = this.getJsonIfDirty(entity.uuid, componentName, component)\n          if (jsonRepresentation) {\n            // Send the updated component\n            this.dcl.updateEntityComponent(entity.uuid, componentName, classId, jsonRepresentation)\n            this.clearDirty(entity.uuid, componentName, component, jsonRepresentation)\n          }\n        }\n      }\n    }\n\n    for (let id in this.engine.disposableComponents) {\n      const component = this.engine.disposableComponents[id]\n      if (component instanceof ObservableComponent && component.dirty) {\n        this.dcl.componentUpdated(id, JSON.stringify(component))\n        component.dirty = false\n      }\n    }\n  }\n\n  /**\n   * This method is called after a component is added to an entity. The event\n   * (param 1) contains the necessary information to notify the engine about the\n   * component that was added and the entity.\n   */\n  private componentAdded(event: ComponentAdded) {\n    if (event.entity.isAddedToEngine()) {\n      const component = event.entity.components[event.componentName]\n\n      if (isDisposableComponent(component)) {\n        this.dcl.attachEntityComponent(event.entity.uuid, event.componentName, getComponentId(component))\n      } else if (event.classId !== null) {\n        const componentJson: string = JSON.stringify(component)\n\n        // Send the updated component\n        this.dcl.updateEntityComponent(event.entity.uuid, event.componentName, event.classId, componentJson)\n\n        // Update the cached copy of the sent component\n        this.cachedComponents[event.entity.uuid][event.componentName] = componentJson\n      }\n    }\n  }\n\n  /**\n   * This method is called when a component is removed from an entity.\n   */\n  private componentRemoved(event: ComponentRemoved) {\n    if (event.entity.isAddedToEngine()) {\n      this.dcl.removeEntityComponent(event.entity.uuid, event.componentName)\n\n      // Remove the cached component so we can send it again when re-adding\n      delete this.cachedComponents[event.entity.uuid][event.componentName]\n    }\n  }\n\n  /**\n   * This method is called after a disposableComponent is created.\n   * It instantiates the component in the engine, the event that updates the\n   * created component is fired immediatly after.\n   */\n  private disposableComponentCreated(event: DisposableComponentCreated) {\n    this.dcl.componentCreated(event.componentId, event.componentName, event.classId)\n  }\n\n  /**\n   * This method is called after a disposableComponent is updated, once per\n   * update cycle and once after creation.\n   */\n  private disposableComponentRemoved(event: DisposableComponentRemoved) {\n    this.dcl.componentDisposed(event.componentId)\n  }\n\n  /**\n   * This method is called right after a diposableComponent gets disposed. That\n   * process is manual.\n   *\n   * TODO(menduz,dani): What happens if a disposableComponent gets disposed and\n   * it remains attached to some entities?\n   */\n  private disposableComponentUpdated(event: DisposableComponentUpdated) {\n    this.dcl.componentUpdated(event.componentId, JSON.stringify(event.component))\n  }\n\n  /**\n   * This method is called when a parent changes in an entity.\n   */\n  private parentChanged(event: ParentChanged) {\n    this.dcl.setParent(event.entity.uuid, event.parent ? event.parent.uuid : ROOT_ENTITY_ID)\n  }\n\n  private getJsonIfDirty(entityId: string, componentName: string, component: any): false | string {\n    const jsonRepresentation = JSON.stringify(component)\n    return jsonRepresentation !== this.cachedComponents[entityId][componentName] && jsonRepresentation\n  }\n\n  private clearDirty(entityId: string, componentName: string, component: any, jsonRepresentation: string) {\n    this.cachedComponents[entityId][componentName] = jsonRepresentation\n  }\n}\n","/**\n * Defines potential orientation for back face culling\n * @public\n */\nexport enum Orientation {\n  /**\n   * Clockwise\n   */\n  CW = 0,\n  /** Counter clockwise */\n  CCW = 1\n}\n\n/**\n * Defines supported spaces\n * @public\n */\nexport enum Space {\n  /** Local (object) space */\n  LOCAL = 0,\n  /** World space */\n  WORLD = 1,\n  /** Bone space */\n  BONE = 2\n}\n\n/** @public */\nexport type Nullable<T> = T | null\n/** @public */\nexport type FloatArray = number[]\n/** @public */\nexport type float = number\n/** @public */\nexport type double = number\n\n/**\n * Constant used to convert a value to gamma space\n * @public\n */\nexport const ToGammaSpace = 1 / 2.2\n\n/**\n * Constant used to convert a value to linear space\n * @public\n */\nexport const ToLinearSpace = 2.2\n\n/**\n * Constant used to define the minimal number value in Babylon.js\n * @public\n */\nexport const Epsilon = 0.000001\n\n/**\n * Constant used to convert from Euler degrees to radians\n * @public\n */\nexport const DEG2RAD = Math.PI / 180\n\n/**\n * Constant used to convert from radians to Euler degrees\n * @public\n */\nexport const RAD2DEG = 360 / (Math.PI * 2)\n\n/**\n * Interface for the size containing width and height\n * @public\n */\nexport interface ISize {\n  /**\n   * Width\n   */\n  width: number\n  /**\n   * Heighht\n   */\n  height: number\n}\n","import { ReadOnlyColor4 } from './math'\n\n/** @public */\nexport enum InputEventType {\n  DOWN,\n  UP\n}\n\n/** @public */\nexport enum CameraMode {\n  FirstPerson,\n  ThirdPerson,\n  BuildingToolGodMode\n}\n\n// @internal\nexport const AVATAR_OBSERVABLE = 'AVATAR_OBSERVABLE'\n\n/**\n * @public\n */\nexport type WearableId = string\n\n/**\n * @public\n */\nexport type AvatarForRenderer = {\n  bodyShape: WearableId\n  skinColor: ReadOnlyColor4\n  hairColor: ReadOnlyColor4\n  eyeColor: ReadOnlyColor4\n  wearables: WearableId[]\n}\n\n/**\n * @public\n */\nexport type Wearable = {\n  id: WearableId\n  type: 'wearable'\n  category: string\n  baseUrl: string\n  tags: string[]\n  representations: BodyShapeRespresentation[]\n}\n\n/**\n * @public\n */\nexport type BodyShapeRespresentation = {\n  bodyShapes: string[]\n  mainFile: string\n  contents: FileAndHash[]\n}\n\n/**\n * @public\n */\nexport type FileAndHash = {\n  file: string\n  hash: string\n}\n\n/**\n * @public\n */\nexport type ProfileForRenderer = {\n  userId: string\n  name: string\n  description: string\n  email: string\n  avatar: AvatarForRenderer\n  snapshots: {\n    face: string\n    body: string\n  }\n  version: number\n  hasConnectedWeb3: boolean\n  updatedAt?: number\n  createdAt?: number\n  parcelsWithAccess?: ParcelsWithAccess\n}\n\n/** @public */\nexport type ParcelsWithAccess = Array<{\n  x: number\n  y: number\n  role: LandRole\n}>\n\n/** @public */\nexport enum LandRole {\n  OWNER = 'owner',\n  OPERATOR = 'operator'\n}\n\n/**\n * @public\n */\nexport type MinimapSceneInfo = {\n  name: string\n  owner: string\n  description: string\n  previewImageUrl: string | undefined\n  type: number\n  parcels: { x: number; y: number }[]\n  isPOI: boolean\n}\n","/**\n * Scalar computation library\n * @public\n */\nexport class Scalar {\n  /**\n   * Two pi constants convenient for computation.\n   */\n  public static TwoPi: number = Math.PI * 2\n\n  /**\n   * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n   * @param a - number\n   * @param b - number\n   * @param epsilon - (default = 1.401298E-45)\n   * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n   */\n  public static WithinEpsilon(a: number, b: number, epsilon: number = 1.401298e-45): boolean {\n    let num = a - b\n    return -epsilon <= num && num <= epsilon\n  }\n\n  /**\n   * Returns a string : the upper case translation of the number i to hexadecimal.\n   * @param i - number\n   * @returns the upper case translation of the number i to hexadecimal.\n   */\n  public static ToHex(i: number): string {\n    let str = i.toString(16)\n\n    if (i <= 15) {\n      return ('0' + str).toUpperCase()\n    }\n\n    return str.toUpperCase()\n  }\n\n  /**\n   * Returns -1 if value is negative and +1 is value is positive.\n   * @param _value - the value\n   * @returns the value itself if it's equal to zero.\n   */\n  public static Sign(value: number): number {\n    const _value = +value // convert to a number\n\n    if (_value === 0 || isNaN(_value)) {\n      return _value\n    }\n\n    return _value > 0 ? 1 : -1\n  }\n\n  /**\n   * Returns the value itself if it's between min and max.\n   * Returns min if the value is lower than min.\n   * Returns max if the value is greater than max.\n   * @param value - the value to clmap\n   * @param min - the min value to clamp to (default: 0)\n   * @param max - the max value to clamp to (default: 1)\n   * @returns the clamped value\n   */\n  public static Clamp(value: number, min = 0, max = 1): number {\n    return Math.min(max, Math.max(min, value))\n  }\n\n  /**\n   * the log2 of value.\n   * @param value - the value to compute log2 of\n   * @returns the log2 of value.\n   */\n  public static Log2(value: number): number {\n    return Math.log(value) * Math.LOG2E\n  }\n\n  /**\n   * Loops the value, so that it is never larger than length and never smaller than 0.\n   *\n   * This is similar to the modulo operator but it works with floating point numbers.\n   * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n   * With t = 5 and length = 2.5, the result would be 0.0.\n   * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n   * @param value - the value\n   * @param length - the length\n   * @returns the looped value\n   */\n  public static Repeat(value: number, length: number): number {\n    return value - Math.floor(value / length) * length\n  }\n\n  /**\n   * Normalize the value between 0.0 and 1.0 using min and max values\n   * @param value - value to normalize\n   * @param min - max to normalize between\n   * @param max - min to normalize between\n   * @returns the normalized value\n   */\n  public static Normalize(value: number, min: number, max: number): number {\n    return (value - min) / (max - min)\n  }\n\n  /**\n   * Denormalize the value from 0.0 and 1.0 using min and max values\n   * @param normalized - value to denormalize\n   * @param min - max to denormalize between\n   * @param max - min to denormalize between\n   * @returns the denormalized value\n   */\n  public static Denormalize(normalized: number, min: number, max: number): number {\n    return normalized * (max - min) + min\n  }\n\n  /**\n   * Calculates the shortest difference between two given angles given in degrees.\n   * @param current - current angle in degrees\n   * @param target - target angle in degrees\n   * @returns the delta\n   */\n  public static DeltaAngle(current: number, target: number): number {\n    let num: number = Scalar.Repeat(target - current, 360.0)\n    if (num > 180.0) {\n      num -= 360.0\n    }\n    return num\n  }\n\n  /**\n   * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n   * @param tx - value\n   * @param length - length\n   * @returns The returned value will move back and forth between 0 and length\n   */\n  public static PingPong(tx: number, length: number): number {\n    let t: number = Scalar.Repeat(tx, length * 2.0)\n    return length - Math.abs(t - length)\n  }\n\n  /**\n   * Interpolates between min and max with smoothing at the limits.\n   *\n   * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n   * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n   * @param from - from\n   * @param to - to\n   * @param tx - value\n   * @returns the smooth stepped value\n   */\n  public static SmoothStep(from: number, to: number, tx: number): number {\n    let t: number = Scalar.Clamp(tx)\n    t = -2.0 * t * t * t + 3.0 * t * t\n    return to * t + from * (1.0 - t)\n  }\n\n  /**\n   * Moves a value current towards target.\n   *\n   * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n   * Negative values of maxDelta pushes the value away from target.\n   * @param current - current value\n   * @param target - target value\n   * @param maxDelta - max distance to move\n   * @returns resulting value\n   */\n  public static MoveTowards(current: number, target: number, maxDelta: number): number {\n    let result: number = 0\n    if (Math.abs(target - current) <= maxDelta) {\n      result = target\n    } else {\n      result = current + Scalar.Sign(target - current) * maxDelta\n    }\n    return result\n  }\n\n  /**\n   * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n   *\n   * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n   *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n   * @param current - current value\n   * @param target - target value\n   * @param maxDelta - max distance to move\n   * @returns resulting angle\n   */\n  public static MoveTowardsAngle(current: number, target: number, maxDelta: number): number {\n    let num: number = Scalar.DeltaAngle(current, target)\n    let result: number = 0\n    if (-maxDelta < num && num < maxDelta) {\n      result = target\n    } else {\n      result = Scalar.MoveTowards(current, current + num, maxDelta)\n    }\n    return result\n  }\n\n  /**\n   * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\n   * @param start - start value\n   * @param end - target value\n   * @param amount - amount to lerp between\n   * @returns the lerped value\n   */\n  public static Lerp(start: number, end: number, amount: number): number {\n    return start + (end - start) * amount\n  }\n\n  /**\n   * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n   * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n   * @param start - start value\n   * @param end - target value\n   * @param amount - amount to lerp between\n   * @returns the lerped value\n   */\n  public static LerpAngle(start: number, end: number, amount: number): number {\n    let num: number = Scalar.Repeat(end - start, 360.0)\n    if (num > 180.0) {\n      num -= 360.0\n    }\n    return start + num * Scalar.Clamp(amount)\n  }\n\n  /**\n   * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n   * @param a - start value\n   * @param b - target value\n   * @param value - value between a and b\n   * @returns the inverseLerp value\n   */\n  public static InverseLerp(a: number, b: number, value: number): number {\n    let result: number = 0\n    if (a !== b) {\n      result = Scalar.Clamp((value - a) / (b - a))\n    } else {\n      result = 0.0\n    }\n    return result\n  }\n\n  /**\n   * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\n   * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n   * @param value1 - spline value\n   * @param tangent1 - spline value\n   * @param value2 - spline value\n   * @param tangent2 - spline value\n   * @param amount - input value\n   * @returns hermite result\n   */\n  public static Hermite(value1: number, tangent1: number, value2: number, tangent2: number, amount: number): number {\n    let squared = amount * amount\n    let cubed = amount * squared\n    let part1 = 2.0 * cubed - 3.0 * squared + 1.0\n    let part2 = -2.0 * cubed + 3.0 * squared\n    let part3 = cubed - 2.0 * squared + amount\n    let part4 = cubed - squared\n\n    return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4\n  }\n\n  /**\n   * Returns a random float number between and min and max values\n   * @param min - min value of random\n   * @param max - max value of random\n   * @returns random value\n   */\n  public static RandomRange(min: number, max: number): number {\n    if (min === max) {\n      return min\n    }\n    return Math.random() * (max - min) + min\n  }\n\n  /**\n   * This function returns percentage of a number in a given range.\n   *\n   * RangeToPercent(40,20,60) will return 0.5 (50%)\n   * RangeToPercent(34,0,100) will return 0.34 (34%)\n   * @param num - to convert to percentage\n   * @param min - min range\n   * @param max - max range\n   * @returns the percentage\n   */\n  public static RangeToPercent(num: number, min: number, max: number): number {\n    return (num - min) / (max - min)\n  }\n\n  /**\n   * This function returns number that corresponds to the percentage in a given range.\n   *\n   * PercentToRange(0.34,0,100) will return 34.\n   * @param percent - to convert to number\n   * @param min - min range\n   * @param max - max range\n   * @returns the number\n   */\n  public static PercentToRange(percent: number, min: number, max: number): number {\n    return (max - min) * percent + min\n  }\n\n  /**\n   * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n   * @param angle - The angle to normalize in radian.\n   * @returns The converted angle.\n   */\n  public static NormalizeRadians(angle: number): number {\n    // More precise but slower version kept for reference.\n    // tslint:disable:no-commented-out-code\n    /*\n      // angle = angle % Tools.TwoPi;\n      // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n\n      //if (angle > Math.PI) {\n      //\tangle -= Tools.TwoPi;\n      //}\n       */\n\n    return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi)\n  }\n}\n","import { FloatArray, Epsilon } from './types'\nimport { Matrix } from './Matrix'\nimport { Scalar } from './Scalar'\nimport { Vector3 } from './Vector3'\n\n/**\n * Vector4 class created for EulerAngle class conversion to Quaternion\n * @public\n */\nexport class Vector4 implements ReadOnlyVector4 {\n  /**\n   * Creates a Vector4 object from the given floats.\n   * @param x - x value of the vector\n   * @param y - y value of the vector\n   * @param z - z value of the vector\n   * @param w - w value of the vector\n   */\n  constructor(\n    /** x value of the vector */\n    public x: number,\n    /** y value of the vector */\n    public y: number,\n    /** z value of the vector */\n    public z: number,\n    /** w value of the vector */\n    public w: number\n  ) {}\n\n  // Statics\n\n  /**\n   * Returns a new Vector4 as the result of the addition of the two given vectors.\n   * @param vector1 - the first vector\n   * @param vector2 - the second vector\n   * @returns the resulting vector\n   */\n  public static Add(vector1: ReadOnlyVector4, vector2: ReadOnlyVector4): Vector4 {\n    return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2)\n  }\n\n  /**\n   * Returns a new Vector4 set from the starting index of the given array.\n   * @param array - the array to pull values from\n   * @param offset - the offset into the array to start at\n   * @returns the new vector\n   */\n  public static FromArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3])\n  }\n  /**\n   * Updates the given vector \"result\" from the starting index of the given array.\n   * @param array - the array to pull values from\n   * @param offset - the offset into the array to start at\n   * @param result - the vector to store the result in\n   */\n  public static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector4): void {\n    result.x = array[offset]\n    result.y = array[offset + 1]\n    result.z = array[offset + 2]\n    result.w = array[offset + 3]\n  }\n  /**\n   * Updates the given vector \"result\" from the starting index of the given FloatArray.\n   * @param array - the array to pull values from\n   * @param offset - the offset into the array to start at\n   * @param result - the vector to store the result in\n   */\n  public static FromFloatArrayToRef(array: FloatArray, offset: number, result: Vector4): void {\n    Vector4.FromArrayToRef(array, offset, result)\n  }\n  /**\n   * Updates the given vector \"result\" coordinates from the given floats.\n   * @param x - float to set from\n   * @param y - float to set from\n   * @param z - float to set from\n   * @param w - float to set from\n   * @param result - the vector to the floats in\n   */\n  public static FromFloatsToRef(x: number, y: number, z: number, w: number, result: Vector4): void {\n    result.x = x\n    result.y = y\n    result.z = z\n    result.w = w\n  }\n  /**\n   * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n   * @returns the new vector\n   */\n  public static Zero(): Vector4 {\n    return new Vector4(0.0, 0.0, 0.0, 0.0)\n  }\n  /**\n   * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n   * @returns the new vector\n   */\n  public static One(): Vector4 {\n    return new Vector4(1.0, 1.0, 1.0, 1.0)\n  }\n  /**\n   * Returns a new normalized Vector4 from the given one.\n   * @param vector - the vector to normalize\n   * @returns the vector\n   */\n  public static Normalize(vector: ReadOnlyVector4): Vector4 {\n    let result = Vector4.Zero()\n    Vector4.NormalizeToRef(vector, result)\n    return result\n  }\n  /**\n   * Updates the given vector \"result\" from the normalization of the given one.\n   * @param vector - the vector to normalize\n   * @param result - the vector to store the result in\n   */\n  public static NormalizeToRef(vector: ReadOnlyVector4, result: Vector4): void {\n    result.copyFrom(vector)\n    result.normalize()\n  }\n\n  /**\n   * Returns a vector with the minimum values from the left and right vectors\n   * @param left - left vector to minimize\n   * @param right - right vector to minimize\n   * @returns a new vector with the minimum of the left and right vector values\n   */\n  public static Minimize(left: ReadOnlyVector4, right: ReadOnlyVector4): Vector4 {\n    let min = new Vector4(left.x, left.y, left.z, left.w)\n    min.minimizeInPlace(right)\n    return min\n  }\n\n  /**\n   * Returns a vector with the maximum values from the left and right vectors\n   * @param left - left vector to maximize\n   * @param right - right vector to maximize\n   * @returns a new vector with the maximum of the left and right vector values\n   */\n  public static Maximize(left: ReadOnlyVector4, right: ReadOnlyVector4): Vector4 {\n    let max = new Vector4(left.x, left.y, left.z, left.w)\n    max.maximizeInPlace(right)\n    return max\n  }\n  /**\n   * Returns the distance (float) between the vectors \"value1\" and \"value2\".\n   * @param value1 - value to calulate the distance between\n   * @param value2 - value to calulate the distance between\n   * @returns the distance between the two vectors\n   */\n  public static Distance(value1: ReadOnlyVector4, value2: ReadOnlyVector4): number {\n    return Math.sqrt(Vector4.DistanceSquared(value1, value2))\n  }\n  /**\n   * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\n   * @param value1 - value to calulate the distance between\n   * @param value2 - value to calulate the distance between\n   * @returns the distance between the two vectors squared\n   */\n  public static DistanceSquared(value1: ReadOnlyVector4, value2: ReadOnlyVector4): number {\n    let x = value1.x - value2.x\n    let y = value1.y - value2.y\n    let z = value1.z - value2.z\n    let w = value1.w - value2.w\n\n    return x * x + y * y + z * z + w * w\n  }\n  /**\n   * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\n   * @param value1 - value to calulate the center between\n   * @param value2 - value to calulate the center between\n   * @returns the center between the two vectors\n   */\n  public static Center(value1: ReadOnlyVector4, value2: ReadOnlyVector4): Vector4 {\n    let center = Vector4.Add(value1, value2)\n    center.scaleInPlace(0.5)\n    return center\n  }\n\n  /**\n   * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\n   * This methods computes transformed normalized direction vectors only.\n   * @param vector - the vector to transform\n   * @param transformation - the transformation matrix to apply\n   * @returns the new vector\n   */\n  public static TransformNormal(vector: ReadOnlyVector4, transformation: Matrix): Vector4 {\n    let result = Vector4.Zero()\n    Vector4.TransformNormalToRef(vector, transformation, result)\n    return result\n  }\n\n  /**\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\n   * This methods computes transformed normalized direction vectors only.\n   * @param vector - the vector to transform\n   * @param transformation - the transformation matrix to apply\n   * @param result - the vector to store the result in\n   */\n  public static TransformNormalToRef(vector: ReadOnlyVector4, transformation: Matrix, result: Vector4): void {\n    const m = transformation.m\n    let x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8]\n    let y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9]\n    let z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10]\n    result.x = x\n    result.y = y\n    result.z = z\n    result.w = vector.w\n  }\n\n  /**\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\n   * This methods computes transformed normalized direction vectors only.\n   * @param x - value to transform\n   * @param y - value to transform\n   * @param z - value to transform\n   * @param w - value to transform\n   * @param transformation - the transformation matrix to apply\n   * @param result - the vector to store the results in\n   */\n  public static TransformNormalFromFloatsToRef(\n    x: number,\n    y: number,\n    z: number,\n    w: number,\n    transformation: Matrix,\n    result: Vector4\n  ): void {\n    const m = transformation.m\n    result.x = x * m[0] + y * m[4] + z * m[8]\n    result.y = x * m[1] + y * m[5] + z * m[9]\n    result.z = x * m[2] + y * m[6] + z * m[10]\n    result.w = w\n  }\n\n  /**\n   * Returns the string with the Vector4 coordinates.\n   * @returns a string containing all the vector values\n   */\n  public toString(): string {\n    return '{X: ' + this.x + ' Y:' + this.y + ' Z:' + this.z + ' W:' + this.w + '}'\n  }\n\n  /**\n   * Returns the string \"Vector4\".\n   * @returns \"Vector4\"\n   */\n  public getClassName(): string {\n    return 'Vector4'\n  }\n\n  /**\n   * Returns the Vector4 hash code.\n   * @returns a unique hash code\n   */\n  public getHashCode(): number {\n    let hash = this.x || 0\n    hash = (hash * 397) ^ (this.y || 0)\n    hash = (hash * 397) ^ (this.z || 0)\n    hash = (hash * 397) ^ (this.w || 0)\n    return hash\n  }\n\n  // Operators\n  /**\n   * Returns a new array populated with 4 elements : the Vector4 coordinates.\n   * @returns the resulting array\n   */\n  public asArray(): number[] {\n    let result = new Array<number>()\n\n    this.toArray(result, 0)\n\n    return result\n  }\n\n  /**\n   * Populates the given array from the given index with the Vector4 coordinates.\n   * @param array - array to populate\n   * @param index - index of the array to start at (default: 0)\n   * @returns the Vector4.\n   */\n  public toArray(array: FloatArray, index: number = 0): Vector4 {\n    array[index] = this.x\n    array[index + 1] = this.y\n    array[index + 2] = this.z\n    array[index + 3] = this.w\n    return this\n  }\n\n  /**\n   * Adds the given vector to the current Vector4.\n   * @param otherVector - the vector to add\n   * @returns the updated Vector4.\n   */\n  public addInPlace(otherVector: ReadOnlyVector4): Vector4 {\n    this.x += otherVector.x\n    this.y += otherVector.y\n    this.z += otherVector.z\n    this.w += otherVector.w\n    return this\n  }\n\n  /**\n   * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n   * @param otherVector - the vector to add\n   * @returns the resulting vector\n   */\n  public add(otherVector: ReadOnlyVector4): Vector4 {\n    return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w)\n  }\n\n  /**\n   * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\n   * @param otherVector - the vector to add\n   * @param result - the vector to store the result\n   * @returns the current Vector4.\n   */\n  public addToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4 {\n    result.x = this.x + otherVector.x\n    result.y = this.y + otherVector.y\n    result.z = this.z + otherVector.z\n    result.w = this.w + otherVector.w\n    return this\n  }\n\n  /**\n   * Subtract in place the given vector from the current Vector4.\n   * @param otherVector - the vector to subtract\n   * @returns the updated Vector4.\n   */\n  public subtractInPlace(otherVector: ReadOnlyVector4): Vector4 {\n    this.x -= otherVector.x\n    this.y -= otherVector.y\n    this.z -= otherVector.z\n    this.w -= otherVector.w\n    return this\n  }\n\n  /**\n   * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n   * @param otherVector - the vector to add\n   * @returns the new vector with the result\n   */\n  public subtract(otherVector: ReadOnlyVector4): Vector4 {\n    return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w)\n  }\n\n  /**\n   * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\n   * @param otherVector - the vector to subtract\n   * @param result - the vector to store the result\n   * @returns the current Vector4.\n   */\n  public subtractToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4 {\n    result.x = this.x - otherVector.x\n    result.y = this.y - otherVector.y\n    result.z = this.z - otherVector.z\n    result.w = this.w - otherVector.w\n    return this\n  }\n\n  /**\n   * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n   */\n  /**\n   * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n   * @param x - value to subtract\n   * @param y - value to subtract\n   * @param z - value to subtract\n   * @param w - value to subtract\n   * @returns new vector containing the result\n   */\n  public subtractFromFloats(x: number, y: number, z: number, w: number): Vector4 {\n    return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w)\n  }\n\n  /**\n   * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n   * @param x - value to subtract\n   * @param y - value to subtract\n   * @param z - value to subtract\n   * @param w - value to subtract\n   * @param result - the vector to store the result in\n   * @returns the current Vector4.\n   */\n  public subtractFromFloatsToRef(x: number, y: number, z: number, w: number, result: Vector4): Vector4 {\n    result.x = this.x - x\n    result.y = this.y - y\n    result.z = this.z - z\n    result.w = this.w - w\n    return this\n  }\n\n  /**\n   * Returns a new Vector4 set with the current Vector4 negated coordinates.\n   * @returns a new vector with the negated values\n   */\n  public negate(): Vector4 {\n    return new Vector4(-this.x, -this.y, -this.z, -this.w)\n  }\n\n  /**\n   * Multiplies the current Vector4 coordinates by scale (float).\n   * @param scale - the number to scale with\n   * @returns the updated Vector4.\n   */\n  public scaleInPlace(scale: number): Vector4 {\n    this.x *= scale\n    this.y *= scale\n    this.z *= scale\n    this.w *= scale\n    return this\n  }\n\n  /**\n   * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n   * @param scale - the number to scale with\n   * @returns a new vector with the result\n   */\n  public scale(scale: number): Vector4 {\n    return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale)\n  }\n\n  /**\n   * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\n   * @param scale - the number to scale with\n   * @param result - a vector to store the result in\n   * @returns the current Vector4.\n   */\n  public scaleToRef(scale: number, result: Vector4): Vector4 {\n    result.x = this.x * scale\n    result.y = this.y * scale\n    result.z = this.z * scale\n    result.w = this.w * scale\n    return this\n  }\n\n  /**\n   * Scale the current Vector4 values by a factor and add the result to a given Vector4\n   * @param scale - defines the scale factor\n   * @param result - defines the Vector4 object where to store the result\n   * @returns the unmodified current Vector4\n   */\n  public scaleAndAddToRef(scale: number, result: Vector4): Vector4 {\n    result.x += this.x * scale\n    result.y += this.y * scale\n    result.z += this.z * scale\n    result.w += this.w * scale\n    return this\n  }\n\n  /**\n   * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n   * @param otherVector - the vector to compare against\n   * @returns true if they are equal\n   */\n  public equals(otherVector: ReadOnlyVector4): boolean {\n    return (\n      otherVector &&\n      this.x === otherVector.x &&\n      this.y === otherVector.y &&\n      this.z === otherVector.z &&\n      this.w === otherVector.w\n    )\n  }\n\n  /**\n   * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\n   * @param otherVector - vector to compare against\n   * @param epsilon - (Default: very small number)\n   * @returns true if they are equal\n   */\n  public equalsWithEpsilon(otherVector: ReadOnlyVector4, epsilon: number = Epsilon): boolean {\n    return (\n      otherVector &&\n      Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n      Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n      Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) &&\n      Scalar.WithinEpsilon(this.w, otherVector.w, epsilon)\n    )\n  }\n\n  /**\n   * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n   * @param x - x value to compare against\n   * @param y - y value to compare against\n   * @param z - z value to compare against\n   * @param w - w value to compare against\n   * @returns true if equal\n   */\n  public equalsToFloats(x: number, y: number, z: number, w: number): boolean {\n    return this.x === x && this.y === y && this.z === z && this.w === w\n  }\n\n  /**\n   * Multiplies in place the current Vector4 by the given one.\n   * @param otherVector - vector to multiple with\n   * @returns the updated Vector4.\n   */\n  public multiplyInPlace(otherVector: ReadOnlyVector4): Vector4 {\n    this.x *= otherVector.x\n    this.y *= otherVector.y\n    this.z *= otherVector.z\n    this.w *= otherVector.w\n    return this\n  }\n\n  /**\n   * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n   * @param otherVector - vector to multiple with\n   * @returns resulting new vector\n   */\n  public multiply(otherVector: ReadOnlyVector4): Vector4 {\n    return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w)\n  }\n  /**\n   * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\n   * @param otherVector - vector to multiple with\n   * @param result - vector to store the result\n   * @returns the current Vector4.\n   */\n  public multiplyToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4 {\n    result.x = this.x * otherVector.x\n    result.y = this.y * otherVector.y\n    result.z = this.z * otherVector.z\n    result.w = this.w * otherVector.w\n    return this\n  }\n  /**\n   * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n   * @param x - x value multiply with\n   * @param y - y value multiply with\n   * @param z - z value multiply with\n   * @param w - w value multiply with\n   * @returns resulting new vector\n   */\n  public multiplyByFloats(x: number, y: number, z: number, w: number): Vector4 {\n    return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w)\n  }\n  /**\n   * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n   * @param otherVector - vector to devide with\n   * @returns resulting new vector\n   */\n  public divide(otherVector: ReadOnlyVector4): Vector4 {\n    return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w)\n  }\n  /**\n   * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\n   * @param otherVector - vector to devide with\n   * @param result - vector to store the result\n   * @returns the current Vector4.\n   */\n  public divideToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4 {\n    result.x = this.x / otherVector.x\n    result.y = this.y / otherVector.y\n    result.z = this.z / otherVector.z\n    result.w = this.w / otherVector.w\n    return this\n  }\n\n  /**\n   * Divides the current Vector3 coordinates by the given ones.\n   * @param otherVector - vector to devide with\n   * @returns the updated Vector3.\n   */\n  public divideInPlace(otherVector: ReadOnlyVector4): Vector4 {\n    return this.divideToRef(otherVector, this)\n  }\n\n  /**\n   * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n   * @param other - defines the second operand\n   * @returns the current updated Vector4\n   */\n  public minimizeInPlace(other: ReadOnlyVector4): Vector4 {\n    if (other.x < this.x) {\n      this.x = other.x\n    }\n    if (other.y < this.y) {\n      this.y = other.y\n    }\n    if (other.z < this.z) {\n      this.z = other.z\n    }\n    if (other.w < this.w) {\n      this.w = other.w\n    }\n    return this\n  }\n  /**\n   * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n   * @param other - defines the second operand\n   * @returns the current updated Vector4\n   */\n  public maximizeInPlace(other: ReadOnlyVector4): Vector4 {\n    if (other.x > this.x) {\n      this.x = other.x\n    }\n    if (other.y > this.y) {\n      this.y = other.y\n    }\n    if (other.z > this.z) {\n      this.z = other.z\n    }\n    if (other.w > this.w) {\n      this.w = other.w\n    }\n    return this\n  }\n\n  /**\n   * Gets a new Vector4 from current Vector4 floored values\n   * @returns a new Vector4\n   */\n  public floor(): Vector4 {\n    return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w))\n  }\n\n  /**\n   * Gets a new Vector4 from current Vector3 floored values\n   * @returns a new Vector4\n   */\n  public fract(): Vector4 {\n    return new Vector4(\n      this.x - Math.floor(this.x),\n      this.y - Math.floor(this.y),\n      this.z - Math.floor(this.z),\n      this.w - Math.floor(this.w)\n    )\n  }\n\n  // Properties\n  /**\n   * Returns the Vector4 length (float).\n   * @returns the length\n   */\n  public length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)\n  }\n  /**\n   * Returns the Vector4 squared length (float).\n   * @returns the length squared\n   */\n  public lengthSquared(): number {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w\n  }\n\n  // Methods\n  /**\n   * Normalizes in place the Vector4.\n   * @returns the updated Vector4.\n   */\n  public normalize(): Vector4 {\n    let len = this.length()\n\n    if (len === 0) {\n      return this\n    }\n\n    return this.scaleInPlace(1.0 / len)\n  }\n\n  /**\n   * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n   * @returns this converted to a new vector3\n   */\n  public toVector3(): Vector3 {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  /**\n   * Returns a new Vector4 copied from the current one.\n   * @returns the new cloned vector\n   */\n  public clone(): Vector4 {\n    return new Vector4(this.x, this.y, this.z, this.w)\n  }\n  /**\n   * Updates the current Vector4 with the given one coordinates.\n   * @param source - the source vector to copy from\n   * @returns the updated Vector4.\n   */\n  public copyFrom(source: ReadOnlyVector4): Vector4 {\n    this.x = source.x\n    this.y = source.y\n    this.z = source.z\n    this.w = source.w\n    return this\n  }\n  /**\n   * Updates the current Vector4 coordinates with the given floats.\n   * @param x - float to copy from\n   * @param y - float to copy from\n   * @param z - float to copy from\n   * @param w - float to copy from\n   * @returns the updated Vector4.\n   */\n  public copyFromFloats(x: number, y: number, z: number, w: number): Vector4 {\n    this.x = x\n    this.y = y\n    this.z = z\n    this.w = w\n    return this\n  }\n  /**\n   * Updates the current Vector4 coordinates with the given floats.\n   * @param x - float to set from\n   * @param y - float to set from\n   * @param z - float to set from\n   * @param w - float to set from\n   * @returns the updated Vector4.\n   */\n  public set(x: number, y: number, z: number, w: number): Vector4 {\n    return this.copyFromFloats(x, y, z, w)\n  }\n\n  /**\n   * Copies the given float to the current Vector3 coordinates\n   * @param v - defines the x, y, z and w coordinates of the operand\n   * @returns the current updated Vector3\n   */\n  public setAll(v: number): Vector4 {\n    this.x = this.y = this.z = this.w = v\n    return this\n  }\n}\n","import { FloatArray, Nullable } from './types'\nimport { Vector3 } from './Vector3'\nimport { Quaternion } from './Quaternion'\nimport { MathTmp } from './preallocatedVariables'\nimport { Plane } from './Plane'\nimport { Vector4 } from './Vector4'\n\n/**\n * Class used to store matrix data (4x4)\n * @public\n */\nexport class Matrix {\n  /**\n   * Gets the internal data of the matrix\n   */\n  public get m(): Readonly<FloatArray> {\n    return this._m\n  }\n\n  /**\n   * Gets an identity matrix that must not be updated\n   */\n  public static get IdentityReadOnly(): Readonly<Matrix> {\n    return Matrix._identityReadOnly\n  }\n\n  private static _updateFlagSeed = 0\n  private static _identityReadOnly = Matrix.Identity()\n\n  /**\n   * Gets the update flag of the matrix which is an unique number for the matrix.\n   * It will be incremented every time the matrix data change.\n   * You can use it to speed the comparison between two versions of the same matrix.\n   */\n  public updateFlag!: number\n\n  private _isIdentity = false\n  private _isIdentityDirty = true\n  private _isIdentity3x2 = true\n  private _isIdentity3x2Dirty = true\n\n  private readonly _m: FloatArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n  /**\n   * Creates an empty matrix (filled with zeros)\n   */\n  public constructor() {\n    this._updateIdentityStatus(false)\n  }\n\n  // Statics\n\n  /**\n   * Creates a matrix from an array\n   * @param array - defines the source array\n   * @param offset - defines an offset in the source array\n   * @returns a new Matrix set from the starting index of the given array\n   */\n  public static FromArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    let result = new Matrix()\n    Matrix.FromArrayToRef(array, offset, result)\n    return result\n  }\n\n  /**\n   * Copy the content of an array into a given matrix\n   * @param array - defines the source array\n   * @param offset - defines an offset in the source array\n   * @param result - defines the target matrix\n   */\n  public static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Matrix) {\n    for (let index = 0; index < 16; index++) {\n      result._m[index] = array[index + offset]\n    }\n    result._markAsUpdated()\n  }\n\n  /**\n   * Stores an array into a matrix after having multiplied each component by a given factor\n   * @param array - defines the source array\n   * @param offset - defines the offset in the source array\n   * @param scale - defines the scaling factor\n   * @param result - defines the target matrix\n   */\n  public static FromFloatArrayToRefScaled(array: FloatArray, offset: number, scale: number, result: Matrix) {\n    for (let index = 0; index < 16; index++) {\n      result._m[index] = array[index + offset] * scale\n    }\n    result._markAsUpdated()\n  }\n\n  /**\n   * Stores a list of values (16) inside a given matrix\n   * @param initialM11 - defines 1st value of 1st row\n   * @param initialM12 - defines 2nd value of 1st row\n   * @param initialM13 - defines 3rd value of 1st row\n   * @param initialM14 - defines 4th value of 1st row\n   * @param initialM21 - defines 1st value of 2nd row\n   * @param initialM22 - defines 2nd value of 2nd row\n   * @param initialM23 - defines 3rd value of 2nd row\n   * @param initialM24 - defines 4th value of 2nd row\n   * @param initialM31 - defines 1st value of 3rd row\n   * @param initialM32 - defines 2nd value of 3rd row\n   * @param initialM33 - defines 3rd value of 3rd row\n   * @param initialM34 - defines 4th value of 3rd row\n   * @param initialM41 - defines 1st value of 4th row\n   * @param initialM42 - defines 2nd value of 4th row\n   * @param initialM43 - defines 3rd value of 4th row\n   * @param initialM44 - defines 4th value of 4th row\n   * @param result - defines the target matrix\n   */\n  public static FromValuesToRef(\n    initialM11: number,\n    initialM12: number,\n    initialM13: number,\n    initialM14: number,\n    initialM21: number,\n    initialM22: number,\n    initialM23: number,\n    initialM24: number,\n    initialM31: number,\n    initialM32: number,\n    initialM33: number,\n    initialM34: number,\n    initialM41: number,\n    initialM42: number,\n    initialM43: number,\n    initialM44: number,\n    result: Matrix\n  ): void {\n    const m = result._m\n    m[0] = initialM11\n    m[1] = initialM12\n    m[2] = initialM13\n    m[3] = initialM14\n    m[4] = initialM21\n    m[5] = initialM22\n    m[6] = initialM23\n    m[7] = initialM24\n    m[8] = initialM31\n    m[9] = initialM32\n    m[10] = initialM33\n    m[11] = initialM34\n    m[12] = initialM41\n    m[13] = initialM42\n    m[14] = initialM43\n    m[15] = initialM44\n\n    result._markAsUpdated()\n  }\n\n  /**\n   * Creates new matrix from a list of values (16)\n   * @param initialM11 - defines 1st value of 1st row\n   * @param initialM12 - defines 2nd value of 1st row\n   * @param initialM13 - defines 3rd value of 1st row\n   * @param initialM14 - defines 4th value of 1st row\n   * @param initialM21 - defines 1st value of 2nd row\n   * @param initialM22 - defines 2nd value of 2nd row\n   * @param initialM23 - defines 3rd value of 2nd row\n   * @param initialM24 - defines 4th value of 2nd row\n   * @param initialM31 - defines 1st value of 3rd row\n   * @param initialM32 - defines 2nd value of 3rd row\n   * @param initialM33 - defines 3rd value of 3rd row\n   * @param initialM34 - defines 4th value of 3rd row\n   * @param initialM41 - defines 1st value of 4th row\n   * @param initialM42 - defines 2nd value of 4th row\n   * @param initialM43 - defines 3rd value of 4th row\n   * @param initialM44 - defines 4th value of 4th row\n   * @returns the new matrix\n   */\n  public static FromValues(\n    initialM11: number,\n    initialM12: number,\n    initialM13: number,\n    initialM14: number,\n    initialM21: number,\n    initialM22: number,\n    initialM23: number,\n    initialM24: number,\n    initialM31: number,\n    initialM32: number,\n    initialM33: number,\n    initialM34: number,\n    initialM41: number,\n    initialM42: number,\n    initialM43: number,\n    initialM44: number\n  ): Matrix {\n    let result = new Matrix()\n    const m = result._m\n    m[0] = initialM11\n    m[1] = initialM12\n    m[2] = initialM13\n    m[3] = initialM14\n    m[4] = initialM21\n    m[5] = initialM22\n    m[6] = initialM23\n    m[7] = initialM24\n    m[8] = initialM31\n    m[9] = initialM32\n    m[10] = initialM33\n    m[11] = initialM34\n    m[12] = initialM41\n    m[13] = initialM42\n    m[14] = initialM43\n    m[15] = initialM44\n    result._markAsUpdated()\n    return result\n  }\n\n  /**\n   * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n   * @param scale - defines the scale vector3\n   * @param rotation - defines the rotation quaternion\n   * @param translation - defines the translation vector3\n   * @returns a new matrix\n   */\n  public static Compose(scale: Vector3, rotation: Quaternion, translation: Vector3): Matrix {\n    let result = new Matrix()\n    Matrix.ComposeToRef(scale, rotation, translation, result)\n    return result\n  }\n\n  /**\n   * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n   * @param scale - defines the scale vector3\n   * @param rotation - defines the rotation quaternion\n   * @param translation - defines the translation vector3\n   * @param result - defines the target matrix\n   */\n  public static ComposeToRef(scale: Vector3, rotation: Quaternion, translation: Vector3, result: Matrix): void {\n    Matrix.ScalingToRef(scale.x, scale.y, scale.z, MathTmp.Matrix[1])\n    rotation.toRotationMatrix(MathTmp.Matrix[0])\n    MathTmp.Matrix[1].multiplyToRef(MathTmp.Matrix[0], result)\n\n    result.setTranslation(translation)\n  }\n\n  /**\n   * Creates a new identity matrix\n   * @returns a new identity matrix\n   */\n  public static Identity(): Matrix {\n    const identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)\n    identity._updateIdentityStatus(true)\n    return identity\n  }\n\n  /**\n   * Creates a new identity matrix and stores the result in a given matrix\n   * @param result - defines the target matrix\n   */\n  public static IdentityToRef(result: Matrix): void {\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result)\n    result._updateIdentityStatus(true)\n  }\n\n  /**\n   * Creates a new zero matrix\n   * @returns a new zero matrix\n   */\n  public static Zero(): Matrix {\n    const zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\n    zero._updateIdentityStatus(false)\n    return zero\n  }\n\n  /**\n   * Creates a new rotation matrix for \"angle\" radians around the X axis\n   * @param angle - defines the angle (in radians) to use\n   * @returns the new matrix\n   */\n  public static RotationX(angle: number): Matrix {\n    let result = new Matrix()\n    Matrix.RotationXToRef(angle, result)\n    return result\n  }\n\n  /**\n   * Creates a new matrix as the invert of a given matrix\n   * @param source - defines the source matrix\n   * @returns the new matrix\n   */\n  public static Invert(source: Matrix): Matrix {\n    let result = new Matrix()\n    source.invertToRef(result)\n    return result\n  }\n\n  /**\n   * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n   * @param angle - defines the angle (in radians) to use\n   * @param result - defines the target matrix\n   */\n  public static RotationXToRef(angle: number, result: Matrix): void {\n    let s = Math.sin(angle)\n    let c = Math.cos(angle)\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result)\n\n    result._updateIdentityStatus(c === 1 && s === 0)\n  }\n\n  /**\n   * Creates a new rotation matrix for \"angle\" radians around the Y axis\n   * @param angle - defines the angle (in radians) to use\n   * @returns the new matrix\n   */\n  public static RotationY(angle: number): Matrix {\n    let result = new Matrix()\n    Matrix.RotationYToRef(angle, result)\n    return result\n  }\n\n  /**\n   * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n   * @param angle - defines the angle (in radians) to use\n   * @param result - defines the target matrix\n   */\n  public static RotationYToRef(angle: number, result: Matrix): void {\n    let s = Math.sin(angle)\n    let c = Math.cos(angle)\n    Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result)\n\n    result._updateIdentityStatus(c === 1 && s === 0)\n  }\n\n  /**\n   * Creates a new rotation matrix for \"angle\" radians around the Z axis\n   * @param angle - defines the angle (in radians) to use\n   * @returns the new matrix\n   */\n  public static RotationZ(angle: number): Matrix {\n    let result = new Matrix()\n    Matrix.RotationZToRef(angle, result)\n    return result\n  }\n\n  /**\n   * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n   * @param angle - defines the angle (in radians) to use\n   * @param result - defines the target matrix\n   */\n  public static RotationZToRef(angle: number, result: Matrix): void {\n    let s = Math.sin(angle)\n    let c = Math.cos(angle)\n    Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result)\n\n    result._updateIdentityStatus(c === 1 && s === 0)\n  }\n\n  /**\n   * Creates a new rotation matrix for \"angle\" radians around the given axis\n   * @param axis - defines the axis to use\n   * @param angle - defines the angle (in radians) to use\n   * @returns the new matrix\n   */\n  public static RotationAxis(axis: Vector3, angle: number): Matrix {\n    let result = new Matrix()\n    Matrix.RotationAxisToRef(axis, angle, result)\n    return result\n  }\n\n  /**\n   * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n   * @param axis - defines the axis to use\n   * @param angle - defines the angle (in radians) to use\n   * @param result - defines the target matrix\n   */\n  public static RotationAxisToRef(axis: Vector3, angle: number, result: Matrix): void {\n    let s = Math.sin(-angle)\n    let c = Math.cos(-angle)\n    let c1 = 1 - c\n\n    axis.normalize()\n    const m = result._m\n    m[0] = axis.x * axis.x * c1 + c\n    m[1] = axis.x * axis.y * c1 - axis.z * s\n    m[2] = axis.x * axis.z * c1 + axis.y * s\n    m[3] = 0.0\n\n    m[4] = axis.y * axis.x * c1 + axis.z * s\n    m[5] = axis.y * axis.y * c1 + c\n    m[6] = axis.y * axis.z * c1 - axis.x * s\n    m[7] = 0.0\n\n    m[8] = axis.z * axis.x * c1 - axis.y * s\n    m[9] = axis.z * axis.y * c1 + axis.x * s\n    m[10] = axis.z * axis.z * c1 + c\n    m[11] = 0.0\n\n    m[12] = 0.0\n    m[13] = 0.0\n    m[14] = 0.0\n    m[15] = 1.0\n\n    result._markAsUpdated()\n  }\n\n  /**\n   * Creates a rotation matrix\n   * @param yaw - defines the yaw angle in radians (Y axis)\n   * @param pitch - defines the pitch angle in radians (X axis)\n   * @param roll - defines the roll angle in radians (X axis)\n   * @returns the new rotation matrix\n   */\n  public static RotationYawPitchRoll(yaw: number, pitch: number, roll: number): Matrix {\n    let result = new Matrix()\n    Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result)\n    return result\n  }\n\n  /**\n   * Creates a rotation matrix and stores it in a given matrix\n   * @param yaw - defines the yaw angle in radians (Y axis)\n   * @param pitch - defines the pitch angle in radians (X axis)\n   * @param roll - defines the roll angle in radians (X axis)\n   * @param result - defines the target matrix\n   */\n  public static RotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Matrix): void {\n    Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, MathTmp.Quaternion[0])\n    MathTmp.Quaternion[0].toRotationMatrix(result)\n  }\n\n  /**\n   * Creates a scaling matrix\n   * @param x - defines the scale factor on X axis\n   * @param y - defines the scale factor on Y axis\n   * @param z - defines the scale factor on Z axis\n   * @returns the new matrix\n   */\n  public static Scaling(x: number, y: number, z: number): Matrix {\n    let result = new Matrix()\n    Matrix.ScalingToRef(x, y, z, result)\n    return result\n  }\n\n  /**\n   * Creates a scaling matrix and stores it in a given matrix\n   * @param x - defines the scale factor on X axis\n   * @param y - defines the scale factor on Y axis\n   * @param z - defines the scale factor on Z axis\n   * @param result - defines the target matrix\n   */\n  public static ScalingToRef(x: number, y: number, z: number, result: Matrix): void {\n    Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result)\n\n    result._updateIdentityStatus(x === 1 && y === 1 && z === 1)\n  }\n\n  /**\n   * Creates a translation matrix\n   * @param x - defines the translation on X axis\n   * @param y - defines the translation on Y axis\n   * @param z - defines the translationon Z axis\n   * @returns the new matrix\n   */\n  public static Translation(x: number, y: number, z: number): Matrix {\n    let result = new Matrix()\n    Matrix.TranslationToRef(x, y, z, result)\n    return result\n  }\n\n  /**\n   * Creates a translation matrix and stores it in a given matrix\n   * @param x - defines the translation on X axis\n   * @param y - defines the translation on Y axis\n   * @param z - defines the translationon Z axis\n   * @param result - defines the target matrix\n   */\n  public static TranslationToRef(x: number, y: number, z: number, result: Matrix): void {\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result)\n    result._updateIdentityStatus(x === 0 && y === 0 && z === 0)\n  }\n\n  /**\n   * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n   * @param startValue - defines the start value\n   * @param endValue - defines the end value\n   * @param gradient - defines the gradient factor\n   * @returns the new matrix\n   */\n  public static Lerp(startValue: Matrix, endValue: Matrix, gradient: number): Matrix {\n    let result = new Matrix()\n    Matrix.LerpToRef(startValue, endValue, gradient, result)\n    return result\n  }\n\n  /**\n   * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n   * @param startValue - defines the start value\n   * @param endValue - defines the end value\n   * @param gradient - defines the gradient factor\n   * @param result - defines the Matrix object where to store data\n   */\n  public static LerpToRef(startValue: Matrix, endValue: Matrix, gradient: number, result: Matrix): void {\n    for (let index = 0; index < 16; index++) {\n      result._m[index] = startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient\n    }\n    result._markAsUpdated()\n  }\n\n  /**\n   * Builds a new matrix whose values are computed by:\n   * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n   * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n   * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n   * @param startValue - defines the first matrix\n   * @param endValue - defines the second matrix\n   * @param gradient - defines the gradient between the two matrices\n   * @returns the new matrix\n   */\n  public static DecomposeLerp(startValue: Matrix, endValue: Matrix, gradient: number): Matrix {\n    let result = new Matrix()\n    Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result)\n    return result\n  }\n\n  /**\n   * Update a matrix to values which are computed by:\n   * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n   * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n   * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n   * @param startValue - defines the first matrix\n   * @param endValue - defines the second matrix\n   * @param gradient - defines the gradient between the two matrices\n   * @param result - defines the target matrix\n   */\n  public static DecomposeLerpToRef(startValue: Matrix, endValue: Matrix, gradient: number, result: Matrix) {\n    let startScale = MathTmp.Vector3[0]\n    let startRotation = MathTmp.Quaternion[0]\n    let startTranslation = MathTmp.Vector3[1]\n    startValue.decompose(startScale, startRotation, startTranslation)\n\n    let endScale = MathTmp.Vector3[2]\n    let endRotation = MathTmp.Quaternion[1]\n    let endTranslation = MathTmp.Vector3[3]\n    endValue.decompose(endScale, endRotation, endTranslation)\n\n    let resultScale = MathTmp.Vector3[4]\n    Vector3.LerpToRef(startScale, endScale, gradient, resultScale)\n    let resultRotation = MathTmp.Quaternion[2]\n    Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation)\n\n    let resultTranslation = MathTmp.Vector3[5]\n    Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation)\n\n    Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result)\n  }\n\n  /**\n   * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n   * This function works in left handed mode\n   * @param eye - defines the final position of the entity\n   * @param target - defines where the entity should look at\n   * @param up - defines the up vector for the entity\n   * @returns the new matrix\n   */\n  public static LookAtLH(eye: Vector3, target: Vector3, up: Vector3): Matrix {\n    let result = new Matrix()\n    Matrix.LookAtLHToRef(eye, target, up, result)\n    return result\n  }\n\n  /**\n   * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n   * This function works in left handed mode\n   * @param eye - defines the final position of the entity\n   * @param target - defines where the entity should look at\n   * @param up - defines the up vector for the entity\n   * @param result - defines the target matrix\n   */\n  public static LookAtLHToRef(eye: Vector3, target: Vector3, up: Vector3, result: Matrix): void {\n    const xAxis = MathTmp.Vector3[0]\n    const yAxis = MathTmp.Vector3[1]\n    const zAxis = MathTmp.Vector3[2]\n\n    // Z axis\n    target.subtractToRef(eye, zAxis)\n    zAxis.normalize()\n\n    // X axis\n    Vector3.CrossToRef(up, zAxis, xAxis)\n\n    const xSquareLength = xAxis.lengthSquared()\n    if (xSquareLength === 0) {\n      xAxis.x = 1.0\n    } else {\n      xAxis.normalizeFromLength(Math.sqrt(xSquareLength))\n    }\n\n    // Y axis\n    Vector3.CrossToRef(zAxis, xAxis, yAxis)\n    yAxis.normalize()\n\n    // Eye angles\n    let ex = -Vector3.Dot(xAxis, eye)\n    let ey = -Vector3.Dot(yAxis, eye)\n    let ez = -Vector3.Dot(zAxis, eye)\n\n    Matrix.FromValuesToRef(\n      xAxis.x,\n      yAxis.x,\n      zAxis.x,\n      0.0,\n      xAxis.y,\n      yAxis.y,\n      zAxis.y,\n      0.0,\n      xAxis.z,\n      yAxis.z,\n      zAxis.z,\n      0.0,\n      ex,\n      ey,\n      ez,\n      1.0,\n      result\n    )\n  }\n\n  /**\n   * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n   * This function works in right handed mode\n   * @param eye - defines the final position of the entity\n   * @param target - defines where the entity should look at\n   * @param up - defines the up vector for the entity\n   * @returns the new matrix\n   */\n  public static LookAtRH(eye: Vector3, target: Vector3, up: Vector3): Matrix {\n    let result = new Matrix()\n    Matrix.LookAtRHToRef(eye, target, up, result)\n    return result\n  }\n\n  /**\n   * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n   * This function works in right handed mode\n   * @param eye - defines the final position of the entity\n   * @param target - defines where the entity should look at\n   * @param up - defines the up vector for the entity\n   * @param result - defines the target matrix\n   */\n  public static LookAtRHToRef(eye: Vector3, target: Vector3, up: Vector3, result: Matrix): void {\n    const xAxis = MathTmp.Vector3[0]\n    const yAxis = MathTmp.Vector3[1]\n    const zAxis = MathTmp.Vector3[2]\n\n    // Z axis\n    eye.subtractToRef(target, zAxis)\n    zAxis.normalize()\n\n    // X axis\n    Vector3.CrossToRef(up, zAxis, xAxis)\n\n    const xSquareLength = xAxis.lengthSquared()\n    if (xSquareLength === 0) {\n      xAxis.x = 1.0\n    } else {\n      xAxis.normalizeFromLength(Math.sqrt(xSquareLength))\n    }\n\n    // Y axis\n    Vector3.CrossToRef(zAxis, xAxis, yAxis)\n    yAxis.normalize()\n\n    // Eye angles\n    let ex = -Vector3.Dot(xAxis, eye)\n    let ey = -Vector3.Dot(yAxis, eye)\n    let ez = -Vector3.Dot(zAxis, eye)\n\n    Matrix.FromValuesToRef(\n      xAxis.x,\n      yAxis.x,\n      zAxis.x,\n      0.0,\n      xAxis.y,\n      yAxis.y,\n      zAxis.y,\n      0.0,\n      xAxis.z,\n      yAxis.z,\n      zAxis.z,\n      0.0,\n      ex,\n      ey,\n      ez,\n      1.0,\n      result\n    )\n  }\n\n  /**\n   * Create a left-handed orthographic projection matrix\n   * @param width - defines the viewport width\n   * @param height - defines the viewport height\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @returns a new matrix as a left-handed orthographic projection matrix\n   */\n  public static OrthoLH(width: number, height: number, znear: number, zfar: number): Matrix {\n    let matrix = new Matrix()\n    Matrix.OrthoLHToRef(width, height, znear, zfar, matrix)\n    return matrix\n  }\n\n  /**\n   * Store a left-handed orthographic projection to a given matrix\n   * @param width - defines the viewport width\n   * @param height - defines the viewport height\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @param result - defines the target matrix\n   */\n  public static OrthoLHToRef(width: number, height: number, znear: number, zfar: number, result: Matrix): void {\n    let n = znear\n    let f = zfar\n\n    let a = 2.0 / width\n    let b = 2.0 / height\n    let c = 2.0 / (f - n)\n    let d = -(f + n) / (f - n)\n\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result)\n\n    result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0)\n  }\n\n  /**\n   * Create a left-handed orthographic projection matrix\n   * @param left - defines the viewport left coordinate\n   * @param right - defines the viewport right coordinate\n   * @param bottom - defines the viewport bottom coordinate\n   * @param top - defines the viewport top coordinate\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @returns a new matrix as a left-handed orthographic projection matrix\n   */\n  public static OrthoOffCenterLH(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number,\n    znear: number,\n    zfar: number\n  ): Matrix {\n    let matrix = new Matrix()\n    Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix)\n    return matrix\n  }\n\n  /**\n   * Stores a left-handed orthographic projection into a given matrix\n   * @param left - defines the viewport left coordinate\n   * @param right - defines the viewport right coordinate\n   * @param bottom - defines the viewport bottom coordinate\n   * @param top - defines the viewport top coordinate\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @param result - defines the target matrix\n   */\n  public static OrthoOffCenterLHToRef(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number,\n    znear: number,\n    zfar: number,\n    result: Matrix\n  ): void {\n    let n = znear\n    let f = zfar\n\n    let a = 2.0 / (right - left)\n    let b = 2.0 / (top - bottom)\n    let c = 2.0 / (f - n)\n    let d = -(f + n) / (f - n)\n    let i0 = (left + right) / (left - right)\n    let i1 = (top + bottom) / (bottom - top)\n\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result)\n\n    result._markAsUpdated()\n  }\n\n  /**\n   * Creates a right-handed orthographic projection matrix\n   * @param left - defines the viewport left coordinate\n   * @param right - defines the viewport right coordinate\n   * @param bottom - defines the viewport bottom coordinate\n   * @param top - defines the viewport top coordinate\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @returns a new matrix as a right-handed orthographic projection matrix\n   */\n  public static OrthoOffCenterRH(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number,\n    znear: number,\n    zfar: number\n  ): Matrix {\n    let matrix = new Matrix()\n    Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix)\n    return matrix\n  }\n\n  /**\n   * Stores a right-handed orthographic projection into a given matrix\n   * @param left - defines the viewport left coordinate\n   * @param right - defines the viewport right coordinate\n   * @param bottom - defines the viewport bottom coordinate\n   * @param top - defines the viewport top coordinate\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @param result - defines the target matrix\n   */\n  public static OrthoOffCenterRHToRef(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number,\n    znear: number,\n    zfar: number,\n    result: Matrix\n  ): void {\n    Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result)\n    result._m[10] *= -1 // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n  }\n\n  /**\n   * Creates a left-handed perspective projection matrix\n   * @param width - defines the viewport width\n   * @param height - defines the viewport height\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @returns a new matrix as a left-handed perspective projection matrix\n   */\n  public static PerspectiveLH(width: number, height: number, znear: number, zfar: number): Matrix {\n    let matrix = new Matrix()\n\n    let n = znear\n    let f = zfar\n\n    let a = (2.0 * n) / width\n    let b = (2.0 * n) / height\n    let c = (f + n) / (f - n)\n    let d = (-2.0 * f * n) / (f - n)\n\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix)\n\n    matrix._updateIdentityStatus(false)\n    return matrix\n  }\n\n  /**\n   * Creates a left-handed perspective projection matrix\n   * @param fov - defines the horizontal field of view\n   * @param aspect - defines the aspect ratio\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @returns a new matrix as a left-handed perspective projection matrix\n   */\n  public static PerspectiveFovLH(fov: number, aspect: number, znear: number, zfar: number): Matrix {\n    let matrix = new Matrix()\n    Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix)\n    return matrix\n  }\n\n  /**\n   * Stores a left-handed perspective projection into a given matrix\n   * @param fov - defines the horizontal field of view\n   * @param aspect - defines the aspect ratio\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @param result - defines the target matrix\n   * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n   */\n  public static PerspectiveFovLHToRef(\n    fov: number,\n    aspect: number,\n    znear: number,\n    zfar: number,\n    result: Matrix,\n    isVerticalFovFixed = true\n  ): void {\n    let n = znear\n    let f = zfar\n\n    let t = 1.0 / Math.tan(fov * 0.5)\n    let a = isVerticalFovFixed ? t / aspect : t\n    let b = isVerticalFovFixed ? t : t * aspect\n    let c = (f + n) / (f - n)\n    let d = (-2.0 * f * n) / (f - n)\n\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result)\n    result._updateIdentityStatus(false)\n  }\n\n  /**\n   * Creates a right-handed perspective projection matrix\n   * @param fov - defines the horizontal field of view\n   * @param aspect - defines the aspect ratio\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @returns a new matrix as a right-handed perspective projection matrix\n   */\n  public static PerspectiveFovRH(fov: number, aspect: number, znear: number, zfar: number): Matrix {\n    let matrix = new Matrix()\n    Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix)\n    return matrix\n  }\n\n  /**\n   * Stores a right-handed perspective projection into a given matrix\n   * @param fov - defines the horizontal field of view\n   * @param aspect - defines the aspect ratio\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @param result - defines the target matrix\n   * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n   */\n  public static PerspectiveFovRHToRef(\n    fov: number,\n    aspect: number,\n    znear: number,\n    zfar: number,\n    result: Matrix,\n    isVerticalFovFixed = true\n  ): void {\n    /* alternatively this could be expressed as:\n    //    m = PerspectiveFovLHToRef\n    //    m[10] *= -1.0;\n    //    m[11] *= -1.0;\n    */\n\n    let n = znear\n    let f = zfar\n\n    let t = 1.0 / Math.tan(fov * 0.5)\n    let a = isVerticalFovFixed ? t / aspect : t\n    let b = isVerticalFovFixed ? t : t * aspect\n    let c = -(f + n) / (f - n)\n    let d = (-2 * f * n) / (f - n)\n\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result)\n\n    result._updateIdentityStatus(false)\n  }\n\n  /**\n   * Stores a perspective projection for WebVR info a given matrix\n   * @param fov - defines the field of view\n   * @param znear - defines the near clip plane\n   * @param zfar - defines the far clip plane\n   * @param result - defines the target matrix\n   * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n   */\n  public static PerspectiveFovWebVRToRef(\n    fov: { upDegrees: number; downDegrees: number; leftDegrees: number; rightDegrees: number },\n    znear: number,\n    zfar: number,\n    result: Matrix,\n    rightHanded = false\n  ): void {\n    let rightHandedFactor = rightHanded ? -1 : 1\n\n    let upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0)\n    let downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0)\n    let leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0)\n    let rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0)\n    let xScale = 2.0 / (leftTan + rightTan)\n    let yScale = 2.0 / (upTan + downTan)\n    const m = result._m\n    m[0] = xScale\n    m[1] = m[2] = m[3] = m[4] = 0.0\n    m[5] = yScale\n    m[6] = m[7] = 0.0\n    m[8] = (leftTan - rightTan) * xScale * 0.5\n    m[9] = -((upTan - downTan) * yScale * 0.5)\n    m[10] = -zfar / (znear - zfar)\n    m[11] = 1.0 * rightHandedFactor\n    m[12] = m[13] = m[15] = 0.0\n    m[14] = -(2.0 * zfar * znear) / (zfar - znear)\n\n    result._markAsUpdated()\n  }\n\n  /**\n   * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n   * @param matrix - defines the matrix to use\n   * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n   */\n  public static GetAsMatrix2x2(matrix: Matrix): FloatArray {\n    return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]]\n  }\n  /**\n   * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n   * @param matrix - defines the matrix to use\n   * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n   */\n  public static GetAsMatrix3x3(matrix: Matrix): FloatArray {\n    return [\n      matrix._m[0],\n      matrix._m[1],\n      matrix._m[2],\n      matrix._m[4],\n      matrix._m[5],\n      matrix._m[6],\n      matrix._m[8],\n      matrix._m[9],\n      matrix._m[10]\n    ]\n  }\n\n  /**\n   * Compute the transpose of a given matrix\n   * @param matrix - defines the matrix to transpose\n   * @returns the new matrix\n   */\n  public static Transpose(matrix: Matrix): Matrix {\n    let result = new Matrix()\n    Matrix.TransposeToRef(matrix, result)\n    return result\n  }\n\n  /**\n   * Compute the transpose of a matrix and store it in a target matrix\n   * @param matrix - defines the matrix to transpose\n   * @param result - defines the target matrix\n   */\n  public static TransposeToRef(matrix: Matrix, result: Matrix): void {\n    const rm = result._m\n    const mm = matrix._m\n    rm[0] = mm[0]\n    rm[1] = mm[4]\n    rm[2] = mm[8]\n    rm[3] = mm[12]\n\n    rm[4] = mm[1]\n    rm[5] = mm[5]\n    rm[6] = mm[9]\n    rm[7] = mm[13]\n\n    rm[8] = mm[2]\n    rm[9] = mm[6]\n    rm[10] = mm[10]\n    rm[11] = mm[14]\n\n    rm[12] = mm[3]\n    rm[13] = mm[7]\n    rm[14] = mm[11]\n    rm[15] = mm[15]\n    // identity-ness does not change when transposing\n    result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty)\n  }\n\n  /**\n   * Computes a reflection matrix from a plane\n   * @param plane - defines the reflection plane\n   * @returns a new matrix\n   */\n  public static Reflection(plane: Plane): Matrix {\n    let matrix = new Matrix()\n    Matrix.ReflectionToRef(plane, matrix)\n    return matrix\n  }\n\n  /**\n   * Computes a reflection matrix from a plane\n   * @param plane - defines the reflection plane\n   * @param result - defines the target matrix\n   */\n  public static ReflectionToRef(plane: Plane, result: Matrix): void {\n    plane.normalize()\n    let x = plane.normal.x\n    let y = plane.normal.y\n    let z = plane.normal.z\n    let temp = -2 * x\n    let temp2 = -2 * y\n    let temp3 = -2 * z\n    Matrix.FromValuesToRef(\n      temp * x + 1,\n      temp2 * x,\n      temp3 * x,\n      0.0,\n      temp * y,\n      temp2 * y + 1,\n      temp3 * y,\n      0.0,\n      temp * z,\n      temp2 * z,\n      temp3 * z + 1,\n      0.0,\n      temp * plane.d,\n      temp2 * plane.d,\n      temp3 * plane.d,\n      1.0,\n      result\n    )\n  }\n\n  /**\n   * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n   * @param xaxis - defines the value of the 1st axis\n   * @param yaxis - defines the value of the 2nd axis\n   * @param zaxis - defines the value of the 3rd axis\n   * @param result - defines the target matrix\n   */\n  public static FromXYZAxesToRef(xaxis: Vector3, yaxis: Vector3, zaxis: Vector3, result: Matrix) {\n    Matrix.FromValuesToRef(\n      xaxis.x,\n      xaxis.y,\n      xaxis.z,\n      0.0,\n      yaxis.x,\n      yaxis.y,\n      yaxis.z,\n      0.0,\n      zaxis.x,\n      zaxis.y,\n      zaxis.z,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      result\n    )\n  }\n\n  /**\n   * Creates a rotation matrix from a quaternion and stores it in a target matrix\n   * @param quat - defines the quaternion to use\n   * @param result - defines the target matrix\n   */\n  public static FromQuaternionToRef(quat: Quaternion, result: Matrix) {\n    let xx = quat.x * quat.x\n    let yy = quat.y * quat.y\n    let zz = quat.z * quat.z\n    let xy = quat.x * quat.y\n    let zw = quat.z * quat.w\n    let zx = quat.z * quat.x\n    let yw = quat.y * quat.w\n    let yz = quat.y * quat.z\n    let xw = quat.x * quat.w\n\n    result._m[0] = 1.0 - 2.0 * (yy + zz)\n    result._m[1] = 2.0 * (xy + zw)\n    result._m[2] = 2.0 * (zx - yw)\n    result._m[3] = 0.0\n\n    result._m[4] = 2.0 * (xy - zw)\n    result._m[5] = 1.0 - 2.0 * (zz + xx)\n    result._m[6] = 2.0 * (yz + xw)\n    result._m[7] = 0.0\n\n    result._m[8] = 2.0 * (zx + yw)\n    result._m[9] = 2.0 * (yz - xw)\n    result._m[10] = 1.0 - 2.0 * (yy + xx)\n    result._m[11] = 0.0\n\n    result._m[12] = 0.0\n    result._m[13] = 0.0\n    result._m[14] = 0.0\n    result._m[15] = 1.0\n\n    result._markAsUpdated()\n  }\n\n  /** @internal */\n  public _markAsUpdated() {\n    this.updateFlag = Matrix._updateFlagSeed++\n    this._isIdentity = false\n    this._isIdentity3x2 = false\n    this._isIdentityDirty = true\n    this._isIdentity3x2Dirty = true\n  }\n\n  // Properties\n\n  /**\n   * Check if the current matrix is identity\n   * @returns true is the matrix is the identity matrix\n   */\n  public isIdentity(): boolean {\n    if (this._isIdentityDirty) {\n      this._isIdentityDirty = false\n      const m = this._m\n      this._isIdentity =\n        m[0] === 1.0 &&\n        m[1] === 0.0 &&\n        m[2] === 0.0 &&\n        m[3] === 0.0 &&\n        m[4] === 0.0 &&\n        m[5] === 1.0 &&\n        m[6] === 0.0 &&\n        m[7] === 0.0 &&\n        m[8] === 0.0 &&\n        m[9] === 0.0 &&\n        m[10] === 1.0 &&\n        m[11] === 0.0 &&\n        m[12] === 0.0 &&\n        m[13] === 0.0 &&\n        m[14] === 0.0 &&\n        m[15] === 1.0\n    }\n\n    return this._isIdentity\n  }\n\n  /**\n   * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n   * @returns true is the matrix is the identity matrix\n   */\n  public isIdentityAs3x2(): boolean {\n    if (this._isIdentity3x2Dirty) {\n      this._isIdentity3x2Dirty = false\n      if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n        this._isIdentity3x2 = false\n      } else if (\n        this._m[1] !== 0.0 ||\n        this._m[2] !== 0.0 ||\n        this._m[3] !== 0.0 ||\n        this._m[4] !== 0.0 ||\n        this._m[6] !== 0.0 ||\n        this._m[7] !== 0.0 ||\n        this._m[8] !== 0.0 ||\n        this._m[9] !== 0.0 ||\n        this._m[10] !== 0.0 ||\n        this._m[11] !== 0.0 ||\n        this._m[12] !== 0.0 ||\n        this._m[13] !== 0.0 ||\n        this._m[14] !== 0.0\n      ) {\n        this._isIdentity3x2 = false\n      } else {\n        this._isIdentity3x2 = true\n      }\n    }\n\n    return this._isIdentity3x2\n  }\n\n  /**\n   * Gets the determinant of the matrix\n   * @returns the matrix determinant\n   */\n  public determinant(): number {\n    if (this._isIdentity === true) {\n      return 1\n    }\n\n    const m = this._m\n    // tslint:disable-next-line:one-variable-per-declaration\n    const m00 = m[0],\n      m01 = m[1],\n      m02 = m[2],\n      m03 = m[3]\n    // tslint:disable-next-line:one-variable-per-declaration\n    const m10 = m[4],\n      m11 = m[5],\n      m12 = m[6],\n      m13 = m[7]\n    // tslint:disable-next-line:one-variable-per-declaration\n    const m20 = m[8],\n      m21 = m[9],\n      m22 = m[10],\n      m23 = m[11]\n    // tslint:disable-next-line:one-variable-per-declaration\n    const m30 = m[12],\n      m31 = m[13],\n      m32 = m[14],\n      m33 = m[15]\n    /*\n    // https://en.wikipedia.org/wiki/Laplace_expansion\n    // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n    // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n    // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n    // where\n    //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n    //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n    //\n    // Here we do that for the 1st row.\n    */\n\n    // tslint:disable:variable-name\n    const det_22_33 = m22 * m33 - m32 * m23\n    const det_21_33 = m21 * m33 - m31 * m23\n    const det_21_32 = m21 * m32 - m31 * m22\n    const det_20_33 = m20 * m33 - m30 * m23\n    const det_20_32 = m20 * m32 - m22 * m30\n    const det_20_31 = m20 * m31 - m30 * m21\n    const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32)\n    const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32)\n    const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31)\n    const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31)\n    // tslint:enable:variable-name\n    return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03\n  }\n\n  // Methods\n\n  /**\n   * Returns the matrix as a FloatArray\n   * @returns the matrix underlying array\n   */\n  public toArray(): Readonly<FloatArray> {\n    return this._m\n  }\n  /**\n   * Returns the matrix as a FloatArray\n   * @returns the matrix underlying array.\n   */\n  public asArray(): Readonly<FloatArray> {\n    return this._m\n  }\n\n  /**\n   * Inverts the current matrix in place\n   * @returns the current inverted matrix\n   */\n  public invert(): Matrix {\n    this.invertToRef(this)\n    return this\n  }\n  /**\n   * Sets all the matrix elements to zero\n   * @returns the current matrix\n   */\n  public reset(): Matrix {\n    Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this)\n    this._updateIdentityStatus(false)\n    return this\n  }\n\n  /**\n   * Adds the current matrix with a second one\n   * @param other - defines the matrix to add\n   * @returns a new matrix as the addition of the current matrix and the given one\n   */\n  public add(other: Matrix): Matrix {\n    let result = new Matrix()\n    this.addToRef(other, result)\n    return result\n  }\n\n  /**\n   * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n   * @param other - defines the matrix to add\n   * @param result - defines the target matrix\n   * @returns the current matrix\n   */\n  public addToRef(other: Matrix, result: Matrix): Matrix {\n    for (let index = 0; index < 16; index++) {\n      result._m[index] = this._m[index] + other._m[index]\n    }\n    result._markAsUpdated()\n    return this\n  }\n\n  /**\n   * Adds in place the given matrix to the current matrix\n   * @param other - defines the second operand\n   * @returns the current updated matrix\n   */\n  public addToSelf(other: Matrix): Matrix {\n    for (let index = 0; index < 16; index++) {\n      this._m[index] += other._m[index]\n    }\n    this._markAsUpdated()\n    return this\n  }\n\n  /**\n   * Sets the given matrix to the current inverted Matrix\n   * @param other - defines the target matrix\n   * @returns the unmodified current matrix\n   */\n  public invertToRef(other: Matrix): Matrix {\n    if (this._isIdentity === true) {\n      Matrix.IdentityToRef(other)\n      return this\n    }\n\n    // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n    const m = this._m\n    // tslint:disable:one-variable-per-declaration\n    const m00 = m[0],\n      m01 = m[1],\n      m02 = m[2],\n      m03 = m[3]\n    const m10 = m[4],\n      m11 = m[5],\n      m12 = m[6],\n      m13 = m[7]\n    const m20 = m[8],\n      m21 = m[9],\n      m22 = m[10],\n      m23 = m[11]\n    const m30 = m[12],\n      m31 = m[13],\n      m32 = m[14],\n      m33 = m[15]\n    // tslint:enable:one-variable-per-declaration\n\n    // tslint:disable:variable-name\n    const det_22_33 = m22 * m33 - m32 * m23\n    const det_21_33 = m21 * m33 - m31 * m23\n    const det_21_32 = m21 * m32 - m31 * m22\n    const det_20_33 = m20 * m33 - m30 * m23\n    const det_20_32 = m20 * m32 - m22 * m30\n    const det_20_31 = m20 * m31 - m30 * m21\n\n    const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32)\n    const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32)\n    const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31)\n    const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31)\n\n    const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03\n\n    if (det === 0) {\n      // not invertible\n      other.copyFrom(this)\n      return this\n    }\n\n    const detInv = 1 / det\n    const det_12_33 = m12 * m33 - m32 * m13\n    const det_11_33 = m11 * m33 - m31 * m13\n    const det_11_32 = m11 * m32 - m31 * m12\n    const det_10_33 = m10 * m33 - m30 * m13\n    const det_10_32 = m10 * m32 - m30 * m12\n    const det_10_31 = m10 * m31 - m30 * m11\n    const det_12_23 = m12 * m23 - m22 * m13\n    const det_11_23 = m11 * m23 - m21 * m13\n    const det_11_22 = m11 * m22 - m21 * m12\n    const det_10_23 = m10 * m23 - m20 * m13\n    const det_10_22 = m10 * m22 - m20 * m12\n    const det_10_21 = m10 * m21 - m20 * m11\n\n    const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32)\n    const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32)\n    const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31)\n    const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31)\n\n    const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32)\n    const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32)\n    const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31)\n    const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31)\n\n    const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22)\n    const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22)\n    const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21)\n    const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21)\n\n    Matrix.FromValuesToRef(\n      cofact_00 * detInv,\n      cofact_10 * detInv,\n      cofact_20 * detInv,\n      cofact_30 * detInv,\n      cofact_01 * detInv,\n      cofact_11 * detInv,\n      cofact_21 * detInv,\n      cofact_31 * detInv,\n      cofact_02 * detInv,\n      cofact_12 * detInv,\n      cofact_22 * detInv,\n      cofact_32 * detInv,\n      cofact_03 * detInv,\n      cofact_13 * detInv,\n      cofact_23 * detInv,\n      cofact_33 * detInv,\n      other\n    )\n    // tslint:enable:variable-name\n\n    return this\n  }\n\n  /**\n   * add a value at the specified position in the current Matrix\n   * @param index - the index of the value within the matrix. between 0 and 15.\n   * @param value - the value to be added\n   * @returns the current updated matrix\n   */\n  public addAtIndex(index: number, value: number): Matrix {\n    this._m[index] += value\n    this._markAsUpdated()\n    return this\n  }\n\n  /**\n   * mutiply the specified position in the current Matrix by a value\n   * @param index - the index of the value within the matrix. between 0 and 15.\n   * @param value - the value to be added\n   * @returns the current updated matrix\n   */\n  public multiplyAtIndex(index: number, value: number): Matrix {\n    this._m[index] *= value\n    this._markAsUpdated()\n    return this\n  }\n\n  /**\n   * Inserts the translation vector (using 3 floats) in the current matrix\n   * @param x - defines the 1st component of the translation\n   * @param y - defines the 2nd component of the translation\n   * @param z - defines the 3rd component of the translation\n   * @returns the current updated matrix\n   */\n  public setTranslationFromFloats(x: number, y: number, z: number): Matrix {\n    this._m[12] = x\n    this._m[13] = y\n    this._m[14] = z\n    this._markAsUpdated()\n    return this\n  }\n\n  /**\n   * Inserts the translation vector in the current matrix\n   * @param vector3 - defines the translation to insert\n   * @returns the current updated matrix\n   */\n  public setTranslation(vector3: Vector3): Matrix {\n    return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z)\n  }\n\n  /**\n   * Gets the translation value of the current matrix\n   * @returns a new Vector3 as the extracted translation from the matrix\n   */\n  public getTranslation(): Vector3 {\n    return new Vector3(this._m[12], this._m[13], this._m[14])\n  }\n\n  /**\n   * Fill a Vector3 with the extracted translation from the matrix\n   * @param result - defines the Vector3 where to store the translation\n   * @returns the current matrix\n   */\n  public getTranslationToRef(result: Vector3): Matrix {\n    result.x = this._m[12]\n    result.y = this._m[13]\n    result.z = this._m[14]\n    return this\n  }\n\n  /**\n   * Remove rotation and scaling part from the matrix\n   * @returns the updated matrix\n   */\n  public removeRotationAndScaling(): Matrix {\n    const m = this.m\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this)\n    this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1)\n    return this\n  }\n\n  /**\n   * Multiply two matrices\n   * @param other - defines the second operand\n   * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n   */\n  public multiply(other: Readonly<Matrix>): Matrix {\n    let result = new Matrix()\n    this.multiplyToRef(other, result)\n    return result\n  }\n\n  /**\n   * Copy the current matrix from the given one\n   * @param other - defines the source matrix\n   * @returns the current updated matrix\n   */\n  public copyFrom(other: Readonly<Matrix>): Matrix {\n    other.copyToArray(this._m)\n    const o = other as Matrix\n    this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty)\n    return this\n  }\n\n  /**\n   * Populates the given array from the starting index with the current matrix values\n   * @param array - defines the target array\n   * @param offset - defines the offset in the target array where to start storing values\n   * @returns the current matrix\n   */\n  public copyToArray(array: FloatArray, offset: number = 0): Matrix {\n    for (let index = 0; index < 16; index++) {\n      array[offset + index] = this._m[index]\n    }\n    return this\n  }\n\n  /**\n   * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n   * @param other - defines the second operand\n   * @param result - defines the matrix where to store the multiplication\n   * @returns the current matrix\n   */\n  public multiplyToRef(other: Readonly<Matrix>, result: Matrix): Matrix {\n    if (this._isIdentity) {\n      result.copyFrom(other)\n      return this\n    }\n    if ((other as Matrix)._isIdentity) {\n      result.copyFrom(this)\n      return this\n    }\n\n    this.multiplyToArray(other, result._m, 0)\n    result._markAsUpdated()\n    return this\n  }\n\n  /**\n   * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n   * @param other - defines the second operand\n   * @param result - defines the array where to store the multiplication\n   * @param offset - defines the offset in the target array where to start storing values\n   * @returns the current matrix\n   */\n  public multiplyToArray(other: Readonly<Matrix>, result: FloatArray, offset: number): Matrix {\n    const m = this._m\n    const otherM = other.m\n\n    // tslint:disable:one-variable-per-declaration\n    let tm0 = m[0],\n      tm1 = m[1],\n      tm2 = m[2],\n      tm3 = m[3]\n    let tm4 = m[4],\n      tm5 = m[5],\n      tm6 = m[6],\n      tm7 = m[7]\n    let tm8 = m[8],\n      tm9 = m[9],\n      tm10 = m[10],\n      tm11 = m[11]\n    let tm12 = m[12],\n      tm13 = m[13],\n      tm14 = m[14],\n      tm15 = m[15]\n\n    let om0 = otherM[0],\n      om1 = otherM[1],\n      om2 = otherM[2],\n      om3 = otherM[3]\n    let om4 = otherM[4],\n      om5 = otherM[5],\n      om6 = otherM[6],\n      om7 = otherM[7]\n    let om8 = otherM[8],\n      om9 = otherM[9],\n      om10 = otherM[10],\n      om11 = otherM[11]\n    let om12 = otherM[12],\n      om13 = otherM[13],\n      om14 = otherM[14],\n      om15 = otherM[15]\n    // tslint:enable:one-variable-per-declaration\n    result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12\n    result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13\n    result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14\n    result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15\n\n    result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12\n    result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13\n    result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14\n    result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15\n\n    result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12\n    result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13\n    result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14\n    result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15\n\n    result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12\n    result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13\n    result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14\n    result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15\n    return this\n  }\n\n  /**\n   * Check equality between this matrix and a second one\n   * @param value - defines the second matrix to compare\n   * @returns true is the current matrix and the given one values are strictly equal\n   */\n  public equals(value: Matrix): boolean {\n    const other = value\n    if (!other) {\n      return false\n    }\n\n    if (this._isIdentity || other._isIdentity) {\n      if (!this._isIdentityDirty && !other._isIdentityDirty) {\n        return this._isIdentity && other._isIdentity\n      }\n    }\n\n    const m = this.m\n    const om = other.m\n    return (\n      m[0] === om[0] &&\n      m[1] === om[1] &&\n      m[2] === om[2] &&\n      m[3] === om[3] &&\n      m[4] === om[4] &&\n      m[5] === om[5] &&\n      m[6] === om[6] &&\n      m[7] === om[7] &&\n      m[8] === om[8] &&\n      m[9] === om[9] &&\n      m[10] === om[10] &&\n      m[11] === om[11] &&\n      m[12] === om[12] &&\n      m[13] === om[13] &&\n      m[14] === om[14] &&\n      m[15] === om[15]\n    )\n  }\n\n  /**\n   * Clone the current matrix\n   * @returns a new matrix from the current matrix\n   */\n  public clone(): Matrix {\n    const matrix = new Matrix()\n    matrix.copyFrom(this)\n    return matrix\n  }\n\n  /**\n   * Returns the name of the current matrix class\n   * @returns the string \"Matrix\"\n   */\n  public getClassName(): string {\n    return 'Matrix'\n  }\n\n  /**\n   * Gets the hash code of the current matrix\n   * @returns the hash code\n   */\n  public getHashCode(): number {\n    let hash = this._m[0] || 0\n    for (let i = 1; i < 16; i++) {\n      hash = (hash * 397) ^ (this._m[i] || 0)\n    }\n    return hash\n  }\n\n  /**\n   * Decomposes the current Matrix into a translation, rotation and scaling components\n   * @param scale - defines the scale vector3 given as a reference to update\n   * @param rotation - defines the rotation quaternion given as a reference to update\n   * @param translation - defines the translation vector3 given as a reference to update\n   * @returns true if operation was successful\n   */\n  public decompose(scale?: Vector3, rotation?: Quaternion, translation?: Vector3): boolean {\n    if (this._isIdentity) {\n      if (translation) {\n        translation.setAll(0)\n      }\n      if (scale) {\n        scale.setAll(1)\n      }\n      if (rotation) {\n        rotation.copyFromFloats(0, 0, 0, 1)\n      }\n      return true\n    }\n\n    const m = this._m\n    if (translation) {\n      translation.copyFromFloats(m[12], m[13], m[14])\n    }\n\n    const usedScale = scale || MathTmp.Vector3[0]\n    usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2])\n    usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6])\n    usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10])\n\n    if (this.determinant() <= 0) {\n      usedScale.y *= -1\n    }\n\n    if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {\n      if (rotation) {\n        rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0)\n      }\n      return false\n    }\n\n    if (rotation) {\n      // tslint:disable-next-line:one-variable-per-declaration\n      const sx = 1 / usedScale.x,\n        sy = 1 / usedScale.y,\n        sz = 1 / usedScale.z\n      Matrix.FromValuesToRef(\n        m[0] * sx,\n        m[1] * sx,\n        m[2] * sx,\n        0.0,\n        m[4] * sy,\n        m[5] * sy,\n        m[6] * sy,\n        0.0,\n        m[8] * sz,\n        m[9] * sz,\n        m[10] * sz,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        1.0,\n        MathTmp.Matrix[0]\n      )\n\n      Quaternion.FromRotationMatrixToRef(MathTmp.Matrix[0], rotation)\n    }\n\n    return true\n  }\n\n  /**\n   * Gets specific row of the matrix\n   * @param index - defines the number of the row to get\n   * @returns the index-th row of the current matrix as a new Vector4\n   */\n  public getRow(index: number): Nullable<Vector4> {\n    if (index < 0 || index > 3) {\n      return null\n    }\n    let i = index * 4\n    return new Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3])\n  }\n\n  /**\n   * Sets the index-th row of the current matrix to the vector4 values\n   * @param index - defines the number of the row to set\n   * @param row - defines the target vector4\n   * @returns the updated current matrix\n   */\n  public setRow(index: number, row: Vector4): Matrix {\n    return this.setRowFromFloats(index, row.x, row.y, row.z, row.w)\n  }\n\n  /**\n   * Compute the transpose of the matrix\n   * @returns the new transposed matrix\n   */\n  public transpose(): Matrix {\n    return Matrix.Transpose(this)\n  }\n\n  /**\n   * Compute the transpose of the matrix and store it in a given matrix\n   * @param result - defines the target matrix\n   * @returns the current matrix\n   */\n  public transposeToRef(result: Matrix): Matrix {\n    Matrix.TransposeToRef(this, result)\n    return this\n  }\n\n  /**\n   * Sets the index-th row of the current matrix with the given 4 x float values\n   * @param index - defines the row index\n   * @param x - defines the x component to set\n   * @param y - defines the y component to set\n   * @param z - defines the z component to set\n   * @param w - defines the w component to set\n   * @returns the updated current matrix\n   */\n  public setRowFromFloats(index: number, x: number, y: number, z: number, w: number): Matrix {\n    if (index < 0 || index > 3) {\n      return this\n    }\n    let i = index * 4\n    this._m[i + 0] = x\n    this._m[i + 1] = y\n    this._m[i + 2] = z\n    this._m[i + 3] = w\n\n    this._markAsUpdated()\n    return this\n  }\n\n  /**\n   * Compute a new matrix set with the current matrix values multiplied by scale (float)\n   * @param scale - defines the scale factor\n   * @returns a new matrix\n   */\n  public scale(scale: number): Matrix {\n    let result = new Matrix()\n    this.scaleToRef(scale, result)\n    return result\n  }\n\n  /**\n   * Scale the current matrix values by a factor to a given result matrix\n   * @param scale - defines the scale factor\n   * @param result - defines the matrix to store the result\n   * @returns the current matrix\n   */\n  public scaleToRef(scale: number, result: Matrix): Matrix {\n    for (let index = 0; index < 16; index++) {\n      result._m[index] = this._m[index] * scale\n    }\n    result._markAsUpdated()\n    return this\n  }\n\n  /**\n   * Scale the current matrix values by a factor and add the result to a given matrix\n   * @param scale - defines the scale factor\n   * @param result - defines the Matrix to store the result\n   * @returns the current matrix\n   */\n  public scaleAndAddToRef(scale: number, result: Matrix): Matrix {\n    for (let index = 0; index < 16; index++) {\n      result._m[index] += this._m[index] * scale\n    }\n    result._markAsUpdated()\n    return this\n  }\n\n  /**\n   * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n   * @param ref - matrix to store the result\n   */\n  public toNormalMatrix(ref: Matrix): void {\n    const tmp = MathTmp.Matrix[0]\n    this.invertToRef(tmp)\n    tmp.transposeToRef(ref)\n    let m = ref._m\n    Matrix.FromValuesToRef(\n      m[0],\n      m[1],\n      m[2],\n      0.0,\n      m[4],\n      m[5],\n      m[6],\n      0.0,\n      m[8],\n      m[9],\n      m[10],\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      ref\n    )\n  }\n\n  /**\n   * Gets only rotation part of the current matrix\n   * @returns a new matrix sets to the extracted rotation matrix from the current one\n   */\n  public getRotationMatrix(): Matrix {\n    let result = new Matrix()\n    this.getRotationMatrixToRef(result)\n    return result\n  }\n\n  /**\n   * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n   * @param result - defines the target matrix to store data to\n   * @returns the current matrix\n   */\n  public getRotationMatrixToRef(result: Matrix): Matrix {\n    const scale = MathTmp.Vector3[0]\n    if (!this.decompose(scale)) {\n      Matrix.IdentityToRef(result)\n      return this\n    }\n\n    const m = this._m\n    // tslint:disable-next-line:one-variable-per-declaration\n    const sx = 1 / scale.x,\n      sy = 1 / scale.y,\n      sz = 1 / scale.z\n    Matrix.FromValuesToRef(\n      m[0] * sx,\n      m[1] * sx,\n      m[2] * sx,\n      0.0,\n      m[4] * sy,\n      m[5] * sy,\n      m[6] * sy,\n      0.0,\n      m[8] * sz,\n      m[9] * sz,\n      m[10] * sz,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      result\n    )\n    return this\n  }\n\n  /**\n   * Toggles model matrix from being right handed to left handed in place and vice versa\n   */\n  public toggleModelMatrixHandInPlace() {\n    const m = this._m\n    m[2] *= -1\n    m[6] *= -1\n    m[8] *= -1\n    m[9] *= -1\n    m[14] *= -1\n    this._markAsUpdated()\n  }\n\n  /**\n   * Toggles projection matrix from being right handed to left handed in place and vice versa\n   */\n  public toggleProjectionMatrixHandInPlace() {\n    let m = this._m\n    m[8] *= -1\n    m[9] *= -1\n    m[10] *= -1\n    m[11] *= -1\n    this._markAsUpdated()\n  }\n\n  /** @internal */\n  private _updateIdentityStatus(\n    isIdentity: boolean,\n    isIdentityDirty: boolean = false,\n    isIdentity3x2: boolean = false,\n    isIdentity3x2Dirty: boolean = true\n  ) {\n    this.updateFlag = Matrix._updateFlagSeed++\n    this._isIdentity = isIdentity\n    this._isIdentity3x2 = isIdentity || isIdentity3x2\n    this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty\n    this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty\n  }\n}\n","import { Matrix } from './Matrix'\nimport { Vector3 } from './Vector3'\nimport { MathTmp } from './preallocatedVariables'\nimport { DEG2RAD, RAD2DEG } from './types'\nimport { Scalar } from './Scalar'\n\n/**\n * Class used to store quaternion data\n * {@link https://en.wikipedia.org/wiki/Quaternion }\n * {@link http://doc.babylonjs.com/features/position,_rotation,_scaling }\n * @public\n */\nexport class Quaternion implements ReadOnlyQuaternion {\n  /**\n   * Creates a new Quaternion from the given floats\n   * @param x - defines the first component (0 by default)\n   * @param y - defines the second component (0 by default)\n   * @param z - defines the third component (0 by default)\n   * @param w - defines the fourth component (1.0 by default)\n   */\n  constructor(\n    /** defines the first component (0 by default) */\n    public x: number = 0.0,\n    /** defines the second component (0 by default) */\n    public y: number = 0.0,\n    /** defines the third component (0 by default) */\n    public z: number = 0.0,\n    /** defines the fourth component (1.0 by default) */\n    public w: number = 1.0\n  ) {}\n\n  // Statics\n\n  /**\n   * Creates a new quaternion from a rotation matrix\n   * @param matrix - defines the source matrix\n   * @returns a new quaternion created from the given rotation matrix values\n   */\n  public static FromRotationMatrix(matrix: Matrix): Quaternion {\n    let result = new Quaternion()\n    Quaternion.FromRotationMatrixToRef(matrix, result)\n    return result\n  }\n\n  /**\n   * Updates the given quaternion with the given rotation matrix values\n   * @param matrix - defines the source matrix\n   * @param result - defines the target quaternion\n   */\n  public static FromRotationMatrixToRef(matrix: Matrix, result: Quaternion): void {\n    let data = matrix.m\n    // tslint:disable:one-variable-per-declaration\n    let m11 = data[0],\n      m12 = data[4],\n      m13 = data[8]\n    let m21 = data[1],\n      m22 = data[5],\n      m23 = data[9]\n    let m31 = data[2],\n      m32 = data[6],\n      m33 = data[10]\n    // tslint:enable:one-variable-per-declaration\n    let trace = m11 + m22 + m33\n    let s\n\n    if (trace > 0) {\n      s = 0.5 / Math.sqrt(trace + 1.0)\n\n      result.w = 0.25 / s\n      result.x = (m32 - m23) * s\n      result.y = (m13 - m31) * s\n      result.z = (m21 - m12) * s\n    } else if (m11 > m22 && m11 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33)\n\n      result.w = (m32 - m23) / s\n      result.x = 0.25 * s\n      result.y = (m12 + m21) / s\n      result.z = (m13 + m31) / s\n    } else if (m22 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33)\n\n      result.w = (m13 - m31) / s\n      result.x = (m12 + m21) / s\n      result.y = 0.25 * s\n      result.z = (m23 + m32) / s\n    } else {\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22)\n\n      result.w = (m21 - m12) / s\n      result.x = (m13 + m31) / s\n      result.y = (m23 + m32) / s\n      result.z = 0.25 * s\n    }\n  }\n\n  /**\n   * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n   * @param left - defines the left operand\n   * @param right - defines the right operand\n   * @returns the dot product\n   */\n  public static Dot(left: ReadOnlyQuaternion, right: ReadOnlyQuaternion): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w\n  }\n\n  /**\n   * Checks if the two quaternions are close to each other\n   * @param quat0 - defines the first quaternion to check\n   * @param quat1 - defines the second quaternion to check\n   * @returns true if the two quaternions are close to each other\n   */\n  public static AreClose(quat0: ReadOnlyQuaternion, quat1: ReadOnlyQuaternion): boolean {\n    let dot = Quaternion.Dot(quat0, quat1)\n\n    return dot >= 0\n  }\n\n  /**\n   * Creates an empty quaternion\n   * @returns a new quaternion set to (0.0, 0.0, 0.0)\n   */\n  public static Zero(): Quaternion {\n    return new Quaternion(0.0, 0.0, 0.0, 0.0)\n  }\n\n  /**\n   * Inverse a given quaternion\n   * @param q - defines the source quaternion\n   * @returns a new quaternion as the inverted current quaternion\n   */\n  public static Inverse(q: Quaternion): Quaternion {\n    return new Quaternion(-q.x, -q.y, -q.z, q.w)\n  }\n\n  /**\n   * Gets a boolean indicating if the given quaternion is identity\n   * @param quaternion - defines the quaternion to check\n   * @returns true if the quaternion is identity\n   */\n  public static IsIdentity(quaternion: ReadOnlyQuaternion): boolean {\n    return quaternion && quaternion.x === 0 && quaternion.y === 0 && quaternion.z === 0 && quaternion.w === 1\n  }\n\n  /**\n   * Creates a quaternion from a rotation around an axis\n   * @param axis - defines the axis to use\n   * @param angle - defines the angle to use (in Euler degrees)\n   * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n   */\n  public static RotationAxis(axis: Vector3, angle: number): Quaternion {\n    const angleRad = angle * DEG2RAD\n    return Quaternion.RotationAxisToRef(axis, angleRad, new Quaternion())\n  }\n\n  /**\n   * Creates a rotation around an axis and stores it into the given quaternion\n   * @param axis - defines the axis to use\n   * @param angle - defines the angle to use (in Euler degrees)\n   * @param result - defines the target quaternion\n   * @returns the target quaternion\n   */\n  public static RotationAxisToRef(axis: Vector3, angle: number, result: Quaternion): Quaternion {\n    const angleRad = angle * DEG2RAD\n    let sin = Math.sin(angleRad / 2)\n    axis.normalize()\n    result.w = Math.cos(angleRad / 2)\n    result.x = axis.x * sin\n    result.y = axis.y * sin\n    result.z = axis.z * sin\n    return result\n  }\n\n  /**\n   * Creates a new quaternion from data stored into an array\n   * @param array - defines the data source\n   * @param offset - defines the offset in the source array where the data starts\n   * @returns a new quaternion\n   */\n  public static FromArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3])\n  }\n\n  /**\n   * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\n   */\n  public static FromEulerAnglesRef(x: number, y: number, z: number, result: Quaternion): void {\n    return Quaternion.RotationYawPitchRollToRef(y * DEG2RAD, x * DEG2RAD, z * DEG2RAD, result)\n  }\n\n  /**\n   * Creates a new quaternion from the given Euler float angles (y, x, z)\n   * @param yaw - defines the rotation around Y axis\n   * @param pitch - defines the rotation around X axis\n   * @param roll - defines the rotation around Z axis\n   * @returns the new quaternion\n   */\n  public static RotationYawPitchRoll(yaw: number, pitch: number, roll: number): Quaternion {\n    let q = new Quaternion()\n    Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q)\n    return q\n  }\n\n  /**\n   * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n   * @param yaw - defines the rotation around Y axis\n   * @param pitch - defines the rotation around X axis\n   * @param roll - defines the rotation around Z axis\n   * @param result - defines the target quaternion\n   */\n  public static RotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Quaternion): void {\n    // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\n    let halfPitch = pitch * 0.5\n    let halfYaw = yaw * 0.5\n    let halfRoll = roll * 0.5\n\n    const c1 = Math.cos(halfPitch)\n    const c2 = Math.cos(halfYaw)\n    const c3 = Math.cos(halfRoll)\n    const s1 = Math.sin(halfPitch)\n    const s2 = Math.sin(halfYaw)\n    const s3 = Math.sin(halfRoll)\n\n    result.x = c2 * s1 * c3 + s2 * c1 * s3\n    result.y = s2 * c1 * c3 - c2 * s1 * s3\n    result.z = c2 * c1 * s3 - s2 * s1 * c3\n    result.w = c2 * c1 * c3 + s2 * s1 * s3\n  }\n\n  /**\n   * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n   * @param alpha - defines the rotation around first axis\n   * @param beta - defines the rotation around second axis\n   * @param gamma - defines the rotation around third axis\n   * @returns the new quaternion\n   */\n  public static RotationAlphaBetaGamma(alpha: number, beta: number, gamma: number): Quaternion {\n    let result = new Quaternion()\n    Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result)\n    return result\n  }\n\n  /**\n   * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n   * @param alpha - defines the rotation around first axis\n   * @param beta - defines the rotation around second axis\n   * @param gamma - defines the rotation around third axis\n   * @param result - defines the target quaternion\n   */\n  public static RotationAlphaBetaGammaToRef(alpha: number, beta: number, gamma: number, result: Quaternion): void {\n    // Produces a quaternion from Euler angles in the z-x-z orientation\n    let halfGammaPlusAlpha = (gamma + alpha) * 0.5\n    let halfGammaMinusAlpha = (gamma - alpha) * 0.5\n    let halfBeta = beta * 0.5\n\n    result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta)\n    result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta)\n    result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta)\n    result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta)\n  }\n\n  /**\n   * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n   * @param axis1 - defines the first axis\n   * @param axis2 - defines the second axis\n   * @param axis3 - defines the third axis\n   * @returns the new quaternion\n   */\n  public static RotationQuaternionFromAxis(axis1: Vector3, axis2: Vector3, axis3: Vector3): Quaternion {\n    let quat = new Quaternion(0.0, 0.0, 0.0, 0.0)\n    Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat)\n    return quat\n  }\n\n  /**\n   * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n   * @param axis1 - defines the first axis\n   * @param axis2 - defines the second axis\n   * @param axis3 - defines the third axis\n   * @param ref - defines the target quaternion\n   */\n  public static RotationQuaternionFromAxisToRef(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Quaternion): void {\n    let rotMat = MathTmp.Matrix[0]\n    Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat)\n    Quaternion.FromRotationMatrixToRef(rotMat, ref)\n  }\n\n  /**\n   * Interpolates between two quaternions\n   * @param left - defines first quaternion\n   * @param right - defines second quaternion\n   * @param amount - defines the gradient to use\n   * @returns the new interpolated quaternion\n   */\n  public static Slerp(left: ReadOnlyQuaternion, right: ReadOnlyQuaternion, amount: number): Quaternion {\n    let result = Quaternion.Identity\n\n    Quaternion.SlerpToRef(left, right, amount, result)\n\n    return result\n  }\n\n  /**\n   * Interpolates between two quaternions and stores it into a target quaternion\n   * @param left - defines first quaternion\n   * @param right - defines second quaternion\n   * @param amount - defines the gradient to use\n   * @param result - defines the target quaternion\n   */\n  public static SlerpToRef(\n    left: ReadOnlyQuaternion,\n    right: ReadOnlyQuaternion,\n    amount: number,\n    result: Quaternion\n  ): void {\n    let num2\n    let num3\n    let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w\n    let flag = false\n\n    if (num4 < 0) {\n      flag = true\n      num4 = -num4\n    }\n\n    if (num4 > 0.999999) {\n      num3 = 1 - amount\n      num2 = flag ? -amount : amount\n    } else {\n      let num5 = Math.acos(num4)\n      let num6 = 1.0 / Math.sin(num5)\n      num3 = Math.sin((1.0 - amount) * num5) * num6\n      num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6\n    }\n\n    result.x = num3 * left.x + num2 * right.x\n    result.y = num3 * left.y + num2 * right.y\n    result.z = num3 * left.z + num2 * right.z\n    result.w = num3 * left.w + num2 * right.w\n  }\n\n  /**\n   * Interpolate between two quaternions using Hermite interpolation\n   * @param value1 - defines first quaternion\n   * @param tangent1 - defines the incoming tangent\n   * @param value2 - defines second quaternion\n   * @param tangent2 - defines the outgoing tangent\n   * @param amount - defines the target quaternion\n   * @returns the new interpolated quaternion\n   */\n  public static Hermite(\n    value1: ReadOnlyQuaternion,\n    tangent1: ReadOnlyQuaternion,\n    value2: ReadOnlyQuaternion,\n    tangent2: ReadOnlyQuaternion,\n    amount: number\n  ): Quaternion {\n    let squared = amount * amount\n    let cubed = amount * squared\n    let part1 = 2.0 * cubed - 3.0 * squared + 1.0\n    let part2 = -2.0 * cubed + 3.0 * squared\n    let part3 = cubed - 2.0 * squared + amount\n    let part4 = cubed - squared\n\n    let x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4\n    let y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4\n    let z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4\n    let w = value1.w * part1 + value2.w * part2 + tangent1.w * part3 + tangent2.w * part4\n    return new Quaternion(x, y, z, w)\n  }\n\n  /**\n   * Creates an identity quaternion\n   * @returns - the identity quaternion\n   */\n  public static get Identity(): Quaternion {\n    return new Quaternion(0.0, 0.0, 0.0, 1.0)\n  }\n\n  /**\n   * Returns the angle in degrees between two rotations a and b.\n   * @param quat1 - defines the first quaternion\n   * @param quat2 - defines the second quaternion\n   */\n  public static Angle(quat1: ReadOnlyQuaternion, quat2: ReadOnlyQuaternion): number {\n    const dot = Quaternion.Dot(quat1, quat2)\n    return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * RAD2DEG\n  }\n\n  /**\n   * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n   * @param x - the rotation on the x axis in euler degrees\n   * @param y - the rotation on the y axis in euler degrees\n   * @param z - the rotation on the z axis in euler degrees\n   */\n  public static Euler(x: number, y: number, z: number): Quaternion {\n    return Quaternion.RotationYawPitchRoll(y * DEG2RAD, x * DEG2RAD, z * DEG2RAD)\n  }\n\n  /**\n   * Creates a rotation with the specified forward and upwards directions.\n   * @param forward - the direction to look in\n   * @param up - the vector that defines in which direction up is\n   */\n  public static LookRotation(forward: Vector3, up: Vector3 = MathTmp.staticUp): Quaternion {\n    const forwardNew = Vector3.Normalize(forward)\n    const right: Vector3 = Vector3.Normalize(Vector3.Cross(up, forwardNew))\n    const upNew = Vector3.Cross(forwardNew, right)\n    let m00 = right.x\n    let m01 = right.y\n    let m02 = right.z\n    let m10 = upNew.x\n    let m11 = upNew.y\n    let m12 = upNew.z\n    let m20 = forwardNew.x\n    let m21 = forwardNew.y\n    let m22 = forwardNew.z\n\n    const num8 = m00 + m11 + m22\n    let quaternion = new Quaternion()\n\n    if (num8 > 0) {\n      let num = Math.sqrt(num8 + 1)\n      quaternion.w = num * 0.5\n      num = 0.5 / num\n      quaternion.x = (m12 - m21) * num\n      quaternion.y = (m20 - m02) * num\n      quaternion.z = (m01 - m10) * num\n      return quaternion\n    }\n\n    if (m00 >= m11 && m00 >= m22) {\n      let num7 = Math.sqrt(1 + m00 - m11 - m22)\n      let num4 = 0.5 / num7\n      quaternion.x = 0.5 * num7\n      quaternion.y = (m01 + m10) * num4\n      quaternion.z = (m02 + m20) * num4\n      quaternion.w = (m12 - m21) * num4\n      return quaternion\n    }\n\n    if (m11 > m22) {\n      let num6 = Math.sqrt(1 + m11 - m00 - m22)\n      let num3 = 0.5 / num6\n      quaternion.x = (m10 + m01) * num3\n      quaternion.y = 0.5 * num6\n      quaternion.z = (m21 + m12) * num3\n      quaternion.w = (m20 - m02) * num3\n      return quaternion\n    }\n\n    let num5 = Math.sqrt(1 + m22 - m00 - m11)\n    let num2 = 0.5 / num5\n    quaternion.x = (m20 + m02) * num2\n    quaternion.y = (m21 + m12) * num2\n    quaternion.z = 0.5 * num5\n    quaternion.w = (m01 - m10) * num2\n    return quaternion\n  }\n\n  /**\n   * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n   * @param from - defines the first quaternion\n   * @param to - defines the second quaternion\n   * @param maxDegreesDelta - the interval step\n   */\n  public static RotateTowards(from: ReadOnlyQuaternion, to: Quaternion, maxDegreesDelta: number): Quaternion {\n    const num: number = Quaternion.Angle(from, to)\n    if (num === 0) {\n      return to\n    }\n    const t: number = Math.min(1, maxDegreesDelta / num)\n\n    return Quaternion.Slerp(from, to, t)\n  }\n\n  /**\n   * Creates a rotation which rotates from fromDirection to toDirection.\n   * @param from - defines the first direction Vector\n   * @param to - defines the target direction Vector\n   */\n  public static FromToRotation(from: Vector3, to: Vector3, up: Vector3 = MathTmp.staticUp): Quaternion {\n    // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888\n\n    let v0 = from.normalize()\n    let v1 = to.normalize()\n\n    const a = Vector3.Cross(v0, v1)\n    const w = Math.sqrt(v0.lengthSquared() * v1.lengthSquared()) + Vector3.Dot(v0, v1)\n    if (a.lengthSquared() < 0.0001) {\n      // the vectors are parallel, check w to find direction\n      // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis\n      // otherwise the vectors in the same direction and no rotation should occur\n      return Math.abs(w) < 0.0001 ? new Quaternion(up.x, up.y, up.z, 0).normalized : Quaternion.Identity\n    } else {\n      return new Quaternion(a.x, a.y, a.z, w).normalized\n    }\n  }\n\n  /**\n   * Converts this quaternion to one with the same orientation but with a magnitude of 1.\n   */\n  public get normalized() {\n    return this.normalize()\n  }\n\n  /**\n   * Creates a rotation which rotates from fromDirection to toDirection.\n   * @param from - defines the first Vector\n   * @param to - defines the second Vector\n   * @param up - defines the direction\n   */\n  public setFromToRotation(from: Vector3, to: Vector3, up: Vector3 = MathTmp.staticUp) {\n    const result = Quaternion.FromToRotation(from, to, up)\n    this.x = result.x\n    this.y = result.y\n    this.z = result.z\n    this.w = result.w\n  }\n\n  public set eulerAngles(euler: Vector3) {\n    this.setEuler(euler.x, euler.y, euler.z)\n  }\n\n  /**\n   * Gets or sets the euler angle representation of the rotation.\n   * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n   */\n  public get eulerAngles() {\n    const out = new Vector3()\n\n    // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness\n    const unit = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w\n\n    // this will have a magnitude of 0.5 or greater if and only if this is a singularity case\n    const test = this.x * this.w - this.y * this.z\n\n    if (test > 0.4995 * unit) {\n      // singularity at north pole\n      out.x = Math.PI / 2\n      out.y = 2 * Math.atan2(this.y, this.x)\n      out.z = 0\n    } else if (test < -0.4995 * unit) {\n      // singularity at south pole\n      out.x = -Math.PI / 2\n      out.y = -2 * Math.atan2(this.y, this.x)\n      out.z = 0\n    } else {\n      // no singularity - this is the majority of cases\n      out.x = Math.asin(2 * (this.w * this.x - this.y * this.z))\n      out.y = Math.atan2(2 * this.w * this.y + 2 * this.z * this.x, 1 - 2 * (this.x * this.x + this.y * this.y))\n      out.z = Math.atan2(2 * this.w * this.z + 2 * this.x * this.y, 1 - 2 * (this.z * this.z + this.x * this.x))\n    }\n    out.x *= RAD2DEG\n    out.y *= RAD2DEG\n    out.z *= RAD2DEG\n\n    // ensure the degree values are between 0 and 360\n    out.x = Scalar.Repeat(out.x, 360)\n    out.y = Scalar.Repeat(out.y, 360)\n    out.z = Scalar.Repeat(out.z, 360)\n\n    return out\n  }\n\n  /**\n   * Gets a string representation for the current quaternion\n   * @returns a string with the Quaternion coordinates\n   */\n  public toString(): string {\n    return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`\n  }\n\n  /**\n   * Gets length of current quaternion\n   * @returns the quaternion length (float)\n   */\n  public get length(): number {\n    return Math.sqrt(this.lengthSquared)\n  }\n\n  /**\n   * Gets length of current quaternion\n   * @returns the quaternion length (float)\n   */\n  public get lengthSquared(): number {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w\n  }\n\n  /**\n   * Gets the class name of the quaternion\n   * @returns the string \"Quaternion\"\n   */\n  public getClassName(): string {\n    return 'Quaternion'\n  }\n\n  /**\n   * Gets a hash code for this quaternion\n   * @returns the quaternion hash code\n   */\n  public getHashCode(): number {\n    let hash = this.x || 0\n    hash = (hash * 397) ^ (this.y || 0)\n    hash = (hash * 397) ^ (this.z || 0)\n    hash = (hash * 397) ^ (this.w || 0)\n    return hash\n  }\n\n  /**\n   * Copy the quaternion to an array\n   * @returns a new array populated with 4 elements from the quaternion coordinates\n   */\n  public asArray(): number[] {\n    return [this.x, this.y, this.z, this.w]\n  }\n  /**\n   * Check if two quaternions are equals\n   * @param otherQuaternion - defines the second operand\n   * @returns true if the current quaternion and the given one coordinates are strictly equals\n   */\n  public equals(otherQuaternion: ReadOnlyQuaternion): boolean {\n    return (\n      otherQuaternion &&\n      this.x === otherQuaternion.x &&\n      this.y === otherQuaternion.y &&\n      this.z === otherQuaternion.z &&\n      this.w === otherQuaternion.w\n    )\n  }\n\n  /**\n   * Clone the current quaternion\n   * @returns a new quaternion copied from the current one\n   */\n  public clone(): Quaternion {\n    return new Quaternion(this.x, this.y, this.z, this.w)\n  }\n\n  /**\n   * Copy a quaternion to the current one\n   * @param other - defines the other quaternion\n   * @returns the updated current quaternion\n   */\n  public copyFrom(other: ReadOnlyQuaternion): Quaternion {\n    this.x = other.x\n    this.y = other.y\n    this.z = other.z\n    this.w = other.w\n    return this\n  }\n\n  /**\n   * Updates the current quaternion with the given float coordinates\n   * @param x - defines the x coordinate\n   * @param y - defines the y coordinate\n   * @param z - defines the z coordinate\n   * @param w - defines the w coordinate\n   * @returns the updated current quaternion\n   */\n  public copyFromFloats(x: number, y: number, z: number, w: number): Quaternion {\n    this.x = x\n    this.y = y\n    this.z = z\n    this.w = w\n    return this\n  }\n\n  /**\n   * Updates the current quaternion from the given float coordinates\n   * @param x - defines the x coordinate\n   * @param y - defines the y coordinate\n   * @param z - defines the z coordinate\n   * @param w - defines the w coordinate\n   * @returns the updated current quaternion\n   */\n  public set(x: number, y: number, z: number, w: number): Quaternion {\n    return this.copyFromFloats(x, y, z, w)\n  }\n\n  /**\n   * Updates the current quaternion from the given euler angles\n   * @returns the updated current quaternion\n   */\n  public setEuler(x: number, y: number, z: number): Quaternion {\n    Quaternion.RotationYawPitchRollToRef(y * DEG2RAD, x * DEG2RAD, z * DEG2RAD, this)\n    return this\n  }\n\n  /**\n   * @internal\n   * Adds two quaternions\n   * @param other - defines the second operand\n   * @returns a new quaternion as the addition result of the given one and the current quaternion\n   */\n  public add(other: Quaternion): Quaternion {\n    return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w)\n  }\n\n  /**\n   * @internal\n   * Add a quaternion to the current one\n   * @param other - defines the quaternion to add\n   * @returns the current quaternion\n   */\n  public addInPlace(other: Quaternion): Quaternion {\n    this.x += other.x\n    this.y += other.y\n    this.z += other.z\n    this.w += other.w\n    return this\n  }\n  /**\n   * Subtract two quaternions\n   * @param other - defines the second operand\n   * @returns a new quaternion as the subtraction result of the given one from the current one\n   */\n  public subtract(other: Quaternion): Quaternion {\n    return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w)\n  }\n\n  /**\n   * Multiplies the current quaternion by a scale factor\n   * @param value - defines the scale factor\n   * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\n   */\n  public scale(value: number): Quaternion {\n    return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value)\n  }\n\n  /**\n   * Scale the current quaternion values by a factor and stores the result to a given quaternion\n   * @param scale - defines the scale factor\n   * @param result - defines the Quaternion object where to store the result\n   * @returns the unmodified current quaternion\n   */\n  public scaleToRef(scale: number, result: Quaternion): Quaternion {\n    result.x = this.x * scale\n    result.y = this.y * scale\n    result.z = this.z * scale\n    result.w = this.w * scale\n    return this\n  }\n\n  /**\n   * Multiplies in place the current quaternion by a scale factor\n   * @param value - defines the scale factor\n   * @returns the current modified quaternion\n   */\n  public scaleInPlace(value: number): Quaternion {\n    this.x *= value\n    this.y *= value\n    this.z *= value\n    this.w *= value\n\n    return this\n  }\n\n  /**\n   * Scale the current quaternion values by a factor and add the result to a given quaternion\n   * @param scale - defines the scale factor\n   * @param result - defines the Quaternion object where to store the result\n   * @returns the unmodified current quaternion\n   */\n  public scaleAndAddToRef(scale: number, result: Quaternion): Quaternion {\n    result.x += this.x * scale\n    result.y += this.y * scale\n    result.z += this.z * scale\n    result.w += this.w * scale\n    return this\n  }\n\n  /**\n   * Multiplies two quaternions\n   * @param q1 - defines the second operand\n   * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\n   */\n  public multiply(q1: ReadOnlyQuaternion): Quaternion {\n    let result = new Quaternion(0, 0, 0, 1.0)\n    this.multiplyToRef(q1, result)\n    return result\n  }\n\n  /**\n   * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\n   * @param q1 - defines the second operand\n   * @param result - defines the target quaternion\n   * @returns the current quaternion\n   */\n  public multiplyToRef(q1: ReadOnlyQuaternion, result: Quaternion): Quaternion {\n    let x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x\n    let y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y\n    let z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z\n    let w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w\n    result.copyFromFloats(x, y, z, w)\n    return this\n  }\n\n  /**\n   * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\n   * @param q1 - defines the second operand\n   * @returns the currentupdated quaternion\n   */\n  public multiplyInPlace(q1: ReadOnlyQuaternion): Quaternion {\n    this.multiplyToRef(q1, this)\n    return this\n  }\n\n  /**\n   * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\n   * @param ref - defines the target quaternion\n   * @returns the current quaternion\n   */\n  public conjugateToRef(ref: Quaternion): Quaternion {\n    ref.copyFromFloats(-this.x, -this.y, -this.z, this.w)\n    return this\n  }\n\n  /**\n   * Conjugates in place (1-q) the current quaternion\n   * @returns the current updated quaternion\n   */\n  public conjugateInPlace(): Quaternion {\n    this.x *= -1\n    this.y *= -1\n    this.z *= -1\n    return this\n  }\n\n  /**\n   * Conjugates in place (1-q) the current quaternion\n   * @returns a new quaternion\n   */\n  public conjugate(): Quaternion {\n    let result = new Quaternion(-this.x, -this.y, -this.z, this.w)\n    return result\n  }\n\n  /**\n   * Normalize in place the current quaternion\n   * @returns the current updated quaternion\n   */\n  public normalize(): Quaternion {\n    let length = 1.0 / this.length\n    this.x *= length\n    this.y *= length\n    this.z *= length\n    this.w *= length\n    return this\n  }\n\n  public angleAxis(degress: number, axis: Vector3) {\n    if (axis.lengthSquared() === 0) {\n      return Quaternion.Identity\n    }\n\n    const result: Quaternion = Quaternion.Identity\n    let radians = degress * DEG2RAD\n    radians *= 0.5\n\n    let a2 = axis.normalize()\n    a2 = axis.scaleInPlace(Math.sin(radians))\n\n    result.x = a2.x\n    result.y = a2.y\n    result.z = a2.z\n    result.w = Math.cos(radians)\n\n    return result.normalize()\n  }\n\n  /**\n   * Updates the given rotation matrix with the current quaternion values\n   * @param result - defines the target matrix\n   * @returns the current unchanged quaternion\n   */\n  public toRotationMatrix(result: Matrix): Quaternion {\n    Matrix.FromQuaternionToRef(this, result)\n    return this\n  }\n\n  /**\n   * Updates the current quaternion from the given rotation matrix values\n   * @param matrix - defines the source matrix\n   * @returns the current updated quaternion\n   */\n  public fromRotationMatrix(matrix: Matrix): Quaternion {\n    Quaternion.FromRotationMatrixToRef(matrix, this)\n    return this\n  }\n}\n","import { MathTmp } from './preallocatedVariables'\nimport { FloatArray, Epsilon } from './types'\nimport { Matrix } from './Matrix'\nimport { Quaternion } from './Quaternion'\nimport { Scalar } from './Scalar'\n\n/**\n * Classed used to store (x,y,z) vector representation\n * A Vector3 is the main object used in 3D geometry\n * It can represent etiher the coordinates of a point the space, either a direction\n * Reminder: Babylon.js uses a left handed forward facing system\n * @public\n */\nexport class Vector3 implements ReadOnlyVector3 {\n  /**\n   * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n   */\n  public get isNonUniform(): boolean {\n    let absX = Math.abs(this.x)\n    let absY = Math.abs(this.y)\n    if (absX !== absY) {\n      return true\n    }\n\n    let absZ = Math.abs(this.z)\n    if (absX !== absZ) {\n      return true\n    }\n\n    if (absY !== absZ) {\n      return true\n    }\n\n    return false\n  }\n  /**\n   * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n   * @param x - defines the first coordinates (on X axis)\n   * @param y - defines the second coordinates (on Y axis)\n   * @param z - defines the third coordinates (on Z axis)\n   */\n  constructor(\n    /**\n     * Defines the first coordinates (on X axis)\n     */\n    public x: number = 0,\n    /**\n     * Defines the second coordinates (on Y axis)\n     */\n    public y: number = 0,\n    /**\n     * Defines the third coordinates (on Z axis)\n     */\n    public z: number = 0\n  ) {}\n\n  // Statics\n\n  /**\n   * Returns a new Vector3 as the result of the addition of the two given vectors.\n   * @param vector1 - the first vector\n   * @param vector2 - the second vector\n   * @returns the resulting vector\n   */\n  public static Add(vector1: ReadOnlyVector3, vector2: ReadOnlyVector3): Vector3 {\n    return new Vector3(vector1.x, vector1.y, vector1.z).addInPlace(vector2)\n  }\n\n  /**\n   * Get the clip factor between two vectors\n   * @param vector0 - defines the first operand\n   * @param vector1 - defines the second operand\n   * @param axis - defines the axis to use\n   * @param size - defines the size along the axis\n   * @returns the clip factor\n   */\n  public static GetClipFactor(vector0: ReadOnlyVector3, vector1: ReadOnlyVector3, axis: ReadOnlyVector3, size: number) {\n    let d0 = Vector3.Dot(vector0, axis) - size\n    let d1 = Vector3.Dot(vector1, axis) - size\n\n    let s = d0 / (d0 - d1)\n\n    return s\n  }\n\n  /**\n   * Get angle between two vectors\n   * @param vector0 - angle between vector0 and vector1\n   * @param vector1 - angle between vector0 and vector1\n   * @param normal - direction of the normal\n   * @returns the angle between vector0 and vector1\n   */\n  public static GetAngleBetweenVectors(vector0: Vector3, vector1: Vector3, normal: ReadOnlyVector3): number {\n    const v0: Vector3 = vector0.normalizeToRef(MathTmp.Vector3[1])\n    const v1: Vector3 = vector1.normalizeToRef(MathTmp.Vector3[2])\n    const dot: number = Vector3.Dot(v0, v1)\n    const n = MathTmp.Vector3[3]\n    Vector3.CrossToRef(v0, v1, n)\n    if (Vector3.Dot(n, normal) > 0) {\n      return Math.acos(dot)\n    }\n    return -Math.acos(dot)\n  }\n\n  /**\n   * Returns a new Vector3 set from the index \"offset\" of the given array\n   * @param array - defines the source array\n   * @param offset - defines the offset in the source array\n   * @returns the new Vector3\n   */\n  public static FromArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    return new Vector3(array[offset], array[offset + 1], array[offset + 2])\n  }\n\n  /**\n   * Returns a new Vector3 set from the index \"offset\" of the given FloatArray\n   * This function is deprecated.  Use FromArray instead\n   * @param array - defines the source array\n   * @param offset - defines the offset in the source array\n   * @returns the new Vector3\n   */\n  public static FromFloatArray(array: FloatArray, offset?: number): Vector3 {\n    return Vector3.FromArray(array, offset)\n  }\n\n  /**\n   * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n   * @param array - defines the source array\n   * @param offset - defines the offset in the source array\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector3): void {\n    result.x = array[offset]\n    result.y = array[offset + 1]\n    result.z = array[offset + 2]\n  }\n\n  /**\n   * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray\n   * This function is deprecated.  Use FromArrayToRef instead.\n   * @param array - defines the source array\n   * @param offset - defines the offset in the source array\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static FromFloatArrayToRef(array: FloatArray, offset: number, result: Vector3): void {\n    return Vector3.FromArrayToRef(array, offset, result)\n  }\n\n  /**\n   * Sets the given vector \"result\" with the given floats.\n   * @param x - defines the x coordinate of the source\n   * @param y - defines the y coordinate of the source\n   * @param z - defines the z coordinate of the source\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static FromFloatsToRef(x: number, y: number, z: number, result: Vector3): void {\n    result.copyFromFloats(x, y, z)\n  }\n\n  /**\n   * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n   * @returns a new empty Vector3\n   */\n  public static Zero(): Vector3 {\n    return new Vector3(0.0, 0.0, 0.0)\n  }\n  /**\n   * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n   * @returns a new unit Vector3\n   */\n  public static One(): Vector3 {\n    return new Vector3(1.0, 1.0, 1.0)\n  }\n  /**\n   * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n   * @returns a new up Vector3\n   */\n  public static Up(): Vector3 {\n    return new Vector3(0.0, 1.0, 0.0)\n  }\n  /**\n   * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n   * @returns a new down Vector3\n   */\n  public static Down(): Vector3 {\n    return new Vector3(0.0, -1.0, 0.0)\n  }\n  /**\n   * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n   * @returns a new forward Vector3\n   */\n  public static Forward(): Vector3 {\n    return new Vector3(0.0, 0.0, 1.0)\n  }\n  /**\n   * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n   * @returns a new forward Vector3\n   */\n  public static Backward(): Vector3 {\n    return new Vector3(0.0, 0.0, -1.0)\n  }\n  /**\n   * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n   * @returns a new right Vector3\n   */\n  public static Right(): Vector3 {\n    return new Vector3(1.0, 0.0, 0.0)\n  }\n  /**\n   * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n   * @returns a new left Vector3\n   */\n  public static Left(): Vector3 {\n    return new Vector3(-1.0, 0.0, 0.0)\n  }\n\n  /**\n   * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n   * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n   * @param vector - defines the Vector3 to transform\n   * @param transformation - defines the transformation matrix\n   * @returns the transformed Vector3\n   */\n  public static TransformCoordinates(vector: ReadOnlyVector3, transformation: Matrix): Vector3 {\n    let result = Vector3.Zero()\n    Vector3.TransformCoordinatesToRef(vector, transformation, result)\n    return result\n  }\n\n  /**\n   * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n   * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n   * @param vector - defines the Vector3 to transform\n   * @param transformation - defines the transformation matrix\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static TransformCoordinatesToRef(\n    vector: ReadOnlyVector3,\n    transformation: Readonly<Matrix>,\n    result: Vector3\n  ): void {\n    return Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result)\n  }\n\n  /**\n   * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n   * This method computes tranformed coordinates only, not transformed direction vectors\n   * @param x - define the x coordinate of the source vector\n   * @param y - define the y coordinate of the source vector\n   * @param z - define the z coordinate of the source vector\n   * @param transformation - defines the transformation matrix\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static TransformCoordinatesFromFloatsToRef(\n    x: number,\n    y: number,\n    z: number,\n    transformation: Readonly<Matrix>,\n    result: Vector3\n  ): void {\n    const m = transformation.m\n    let rx = x * m[0] + y * m[4] + z * m[8] + m[12]\n    let ry = x * m[1] + y * m[5] + z * m[9] + m[13]\n    let rz = x * m[2] + y * m[6] + z * m[10] + m[14]\n    let rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15])\n\n    result.x = rx * rw\n    result.y = ry * rw\n    result.z = rz * rw\n  }\n\n  /**\n   * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n   * @param vector - defines the Vector3 to transform\n   * @param transformation - defines the transformation matrix\n   * @returns the new Vector3\n   */\n  public static TransformNormal(vector: ReadOnlyVector3, transformation: Matrix): Vector3 {\n    let result = Vector3.Zero()\n    Vector3.TransformNormalToRef(vector, transformation, result)\n    return result\n  }\n\n  /**\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n   * @param vector - defines the Vector3 to transform\n   * @param transformation - defines the transformation matrix\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static TransformNormalToRef(vector: ReadOnlyVector3, transformation: Readonly<Matrix>, result: Vector3): void {\n    this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result)\n  }\n\n  /**\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n   * @param x - define the x coordinate of the source vector\n   * @param y - define the y coordinate of the source vector\n   * @param z - define the z coordinate of the source vector\n   * @param transformation - defines the transformation matrix\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static TransformNormalFromFloatsToRef(\n    x: number,\n    y: number,\n    z: number,\n    transformation: Readonly<Matrix>,\n    result: Vector3\n  ): void {\n    const m = transformation.m\n    result.x = x * m[0] + y * m[4] + z * m[8]\n    result.y = x * m[1] + y * m[5] + z * m[9]\n    result.z = x * m[2] + y * m[6] + z * m[10]\n  }\n\n  /**\n   * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n   * @param value1 - defines the first control point\n   * @param value2 - defines the second control point\n   * @param value3 - defines the third control point\n   * @param value4 - defines the fourth control point\n   * @param amount - defines the amount on the spline to use\n   * @returns the new Vector3\n   */\n  public static CatmullRom(\n    value1: ReadOnlyVector3,\n    value2: ReadOnlyVector3,\n    value3: ReadOnlyVector3,\n    value4: ReadOnlyVector3,\n    amount: number\n  ): Vector3 {\n    let squared = amount * amount\n    let cubed = amount * squared\n\n    let x =\n      0.5 *\n      (2.0 * value2.x +\n        (-value1.x + value3.x) * amount +\n        (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared +\n        (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed)\n\n    let y =\n      0.5 *\n      (2.0 * value2.y +\n        (-value1.y + value3.y) * amount +\n        (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared +\n        (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed)\n\n    let z =\n      0.5 *\n      (2.0 * value2.z +\n        (-value1.z + value3.z) * amount +\n        (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) * squared +\n        (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed)\n\n    return new Vector3(x, y, z)\n  }\n\n  /**\n   * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n   * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n   * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n   * @param value - defines the current value\n   * @param min - defines the lower range value\n   * @param max - defines the upper range value\n   * @returns the new Vector3\n   */\n  public static Clamp(value: ReadOnlyVector3, min: ReadOnlyVector3, max: ReadOnlyVector3): Vector3 {\n    const v = new Vector3()\n    Vector3.ClampToRef(value, min, max, v)\n    return v\n  }\n  /**\n   * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n   * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n   * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n   * @param value - defines the current value\n   * @param min - defines the lower range value\n   * @param max - defines the upper range value\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static ClampToRef(value: ReadOnlyVector3, min: ReadOnlyVector3, max: ReadOnlyVector3, result: Vector3): void {\n    let x = value.x\n    x = x > max.x ? max.x : x\n    x = x < min.x ? min.x : x\n\n    let y = value.y\n    y = y > max.y ? max.y : y\n    y = y < min.y ? min.y : y\n\n    let z = value.z\n    z = z > max.z ? max.z : z\n    z = z < min.z ? min.z : z\n\n    result.copyFromFloats(x, y, z)\n  }\n\n  /**\n   * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n   * @param value1 - defines the first control point\n   * @param tangent1 - defines the first tangent vector\n   * @param value2 - defines the second control point\n   * @param tangent2 - defines the second tangent vector\n   * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n   * @returns the new Vector3\n   */\n  public static Hermite(\n    value1: ReadOnlyVector3,\n    tangent1: ReadOnlyVector3,\n    value2: ReadOnlyVector3,\n    tangent2: ReadOnlyVector3,\n    amount: number\n  ): Vector3 {\n    let squared = amount * amount\n    let cubed = amount * squared\n    let part1 = 2.0 * cubed - 3.0 * squared + 1.0\n    let part2 = -2.0 * cubed + 3.0 * squared\n    let part3 = cubed - 2.0 * squared + amount\n    let part4 = cubed - squared\n\n    let x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4\n    let y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4\n    let z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4\n    return new Vector3(x, y, z)\n  }\n\n  /**\n   * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n   * @param start - defines the start value\n   * @param end - defines the end value\n   * @param amount - max defines amount between both (between 0 and 1)\n   * @returns the new Vector3\n   */\n  public static Lerp(start: ReadOnlyVector3, end: ReadOnlyVector3, amount: number): Vector3 {\n    let result = new Vector3(0, 0, 0)\n    Vector3.LerpToRef(start, end, amount, result)\n    return result\n  }\n\n  /**\n   * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n   * @param start - defines the start value\n   * @param end - defines the end value\n   * @param amount - max defines amount between both (between 0 and 1)\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static LerpToRef(start: ReadOnlyVector3, end: ReadOnlyVector3, amount: number, result: Vector3): void {\n    result.x = start.x + (end.x - start.x) * amount\n    result.y = start.y + (end.y - start.y) * amount\n    result.z = start.z + (end.z - start.z) * amount\n  }\n\n  /**\n   * Returns the dot product (float) between the vectors \"left\" and \"right\"\n   * @param left - defines the left operand\n   * @param right - defines the right operand\n   * @returns the dot product\n   */\n  public static Dot(left: ReadOnlyVector3, right: ReadOnlyVector3): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z\n  }\n\n  /**\n   * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n   * The cross product is then orthogonal to both \"left\" and \"right\"\n   * @param left - defines the left operand\n   * @param right - defines the right operand\n   * @returns the cross product\n   */\n  public static Cross(left: ReadOnlyVector3, right: ReadOnlyVector3): Vector3 {\n    let result = Vector3.Zero()\n    Vector3.CrossToRef(left, right, result)\n    return result\n  }\n\n  /**\n   * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n   * The cross product is then orthogonal to both \"left\" and \"right\"\n   * @param left - defines the left operand\n   * @param right - defines the right operand\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static CrossToRef(left: ReadOnlyVector3, right: ReadOnlyVector3, result: Vector3): void {\n    const x = left.y * right.z - left.z * right.y\n    const y = left.z * right.x - left.x * right.z\n    const z = left.x * right.y - left.y * right.x\n    result.copyFromFloats(x, y, z)\n  }\n\n  /**\n   * Returns a new Vector3 as the normalization of the given vector\n   * @param vector - defines the Vector3 to normalize\n   * @returns the new Vector3\n   */\n  public static Normalize(vector: Vector3): Vector3 {\n    let result = Vector3.Zero()\n    Vector3.NormalizeToRef(vector, result)\n    return result\n  }\n\n  /**\n   * Sets the given vector \"result\" with the normalization of the given first vector\n   * @param vector - defines the Vector3 to normalize\n   * @param result - defines the Vector3 where to store the result\n   */\n  public static NormalizeToRef(vector: Vector3, result: Vector3): void {\n    vector.normalizeToRef(result)\n  }\n\n  /**\n   * Gets the minimal coordinate values between two Vector3\n   * @param left - defines the first operand\n   * @param right - defines the second operand\n   * @returns the new Vector3\n   */\n  public static Minimize(left: ReadOnlyVector3, right: ReadOnlyVector3): Vector3 {\n    let min = new Vector3(left.x, left.y, left.z)\n    min.minimizeInPlace(right)\n    return min\n  }\n\n  /**\n   * Gets the maximal coordinate values between two Vector3\n   * @param left - defines the first operand\n   * @param right - defines the second operand\n   * @returns the new Vector3\n   */\n  public static Maximize(left: Vector3, right: Vector3): Vector3 {\n    let max = new Vector3(left.x, left.y, left.z)\n    max.maximizeInPlace(right)\n    return max\n  }\n\n  /**\n   * Returns the distance between the vectors \"value1\" and \"value2\"\n   * @param value1 - defines the first operand\n   * @param value2 - defines the second operand\n   * @returns the distance\n   */\n  public static Distance(value1: ReadOnlyVector3, value2: ReadOnlyVector3): number {\n    return Math.sqrt(Vector3.DistanceSquared(value1, value2))\n  }\n\n  /**\n   * Returns the squared distance between the vectors \"value1\" and \"value2\"\n   * @param value1 - defines the first operand\n   * @param value2 - defines the second operand\n   * @returns the squared distance\n   */\n  public static DistanceSquared(value1: ReadOnlyVector3, value2: ReadOnlyVector3): number {\n    let x = value1.x - value2.x\n    let y = value1.y - value2.y\n    let z = value1.z - value2.z\n\n    return x * x + y * y + z * z\n  }\n\n  /**\n   * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n   * @param value1 - defines the first operand\n   * @param value2 - defines the second operand\n   * @returns the new Vector3\n   */\n  public static Center(value1: ReadOnlyVector3, value2: ReadOnlyVector3): Vector3 {\n    let center = Vector3.Add(value1, value2)\n    center.scaleInPlace(0.5)\n    return center\n  }\n\n  /**\n   * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n   * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n   * to something in order to rotate it from its local system to the given target system\n   * Note: axis1, axis2 and axis3 are normalized during this operation\n   * @param axis1 - defines the first axis\n   * @param axis2 - defines the second axis\n   * @param axis3 - defines the third axis\n   * @returns a new Vector3\n   */\n  public static RotationFromAxis(axis1: Vector3, axis2: Vector3, axis3: Vector3): Vector3 {\n    let rotation = Vector3.Zero()\n    Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation)\n    return rotation\n  }\n\n  /**\n   * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n   * @param axis1 - defines the first axis\n   * @param axis2 - defines the second axis\n   * @param axis3 - defines the third axis\n   * @param ref - defines the Vector3 where to store the result\n   */\n  public static RotationFromAxisToRef(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Vector3): void {\n    let quat = MathTmp.Quaternion[0]\n    Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat)\n    ref.copyFrom(quat.eulerAngles)\n  }\n\n  /**\n   * Creates a string representation of the Vector3\n   * @returns a string with the Vector3 coordinates.\n   */\n  public toString(): string {\n    return `(${this.x}, ${this.y}, ${this.z})`\n  }\n\n  /**\n   * Gets the class name\n   * @returns the string \"Vector3\"\n   */\n  public getClassName(): string {\n    return 'Vector3'\n  }\n\n  /**\n   * Creates the Vector3 hash code\n   * @returns a number which tends to be unique between Vector3 instances\n   */\n  public getHashCode(): number {\n    let hash = this.x || 0\n    hash = (hash * 397) ^ (this.y || 0)\n    hash = (hash * 397) ^ (this.z || 0)\n    return hash\n  }\n\n  // Operators\n\n  /**\n   * Creates an array containing three elements : the coordinates of the Vector3\n   * @returns a new array of numbers\n   */\n  public asArray(): number[] {\n    let result: number[] = []\n    this.toArray(result, 0)\n    return result\n  }\n\n  /**\n   * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\n   * @param array - defines the destination array\n   * @param index - defines the offset in the destination array\n   * @returns the current Vector3\n   */\n  public toArray(array: FloatArray, index: number = 0): Vector3 {\n    array[index] = this.x\n    array[index + 1] = this.y\n    array[index + 2] = this.z\n    return this\n  }\n\n  /**\n   * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n   * @returns a new Quaternion object, computed from the Vector3 coordinates\n   */\n  public toQuaternion(): Quaternion {\n    return Quaternion.Identity.setEuler(this.y, this.x, this.z)\n  }\n\n  /**\n   * Adds the given vector to the current Vector3\n   * @param otherVector - defines the second operand\n   * @returns the current updated Vector3\n   */\n  public addInPlace(otherVector: ReadOnlyVector3): Vector3 {\n    return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z)\n  }\n\n  /**\n   * Adds the given coordinates to the current Vector3\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @returns the current updated Vector3\n   */\n  public addInPlaceFromFloats(x: number, y: number, z: number): Vector3 {\n    this.x += x\n    this.y += y\n    this.z += z\n    return this\n  }\n\n  /**\n   * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n   * @param otherVector - defines the second operand\n   * @returns the resulting Vector3\n   */\n  public add(otherVector: ReadOnlyVector3): Vector3 {\n    return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z)\n  }\n\n  /**\n   * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\n   * @param otherVector - defines the second operand\n   * @param result - defines the Vector3 object where to store the result\n   * @returns the current Vector3\n   */\n  public addToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3 {\n    return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z)\n  }\n\n  /**\n   * Subtract the given vector from the current Vector3\n   * @param otherVector - defines the second operand\n   * @returns the current updated Vector3\n   */\n  public subtractInPlace(otherVector: ReadOnlyVector3): Vector3 {\n    this.x -= otherVector.x\n    this.y -= otherVector.y\n    this.z -= otherVector.z\n    return this\n  }\n\n  /**\n   * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n   * @param otherVector - defines the second operand\n   * @returns the resulting Vector3\n   */\n  public subtract(otherVector: ReadOnlyVector3): Vector3 {\n    return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z)\n  }\n\n  /**\n   * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\n   * @param otherVector - defines the second operand\n   * @param result - defines the Vector3 object where to store the result\n   * @returns the current Vector3\n   */\n  public subtractToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3 {\n    return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result)\n  }\n\n  /**\n   * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @returns the resulting Vector3\n   */\n  public subtractFromFloats(x: number, y: number, z: number): Vector3 {\n    return new Vector3(this.x - x, this.y - y, this.z - z)\n  }\n\n  /**\n   * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @param result - defines the Vector3 object where to store the result\n   * @returns the current Vector3\n   */\n  public subtractFromFloatsToRef(x: number, y: number, z: number, result: Vector3): Vector3 {\n    return result.copyFromFloats(this.x - x, this.y - y, this.z - z)\n  }\n\n  /**\n   * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n   * @param matrix - The transformation matrix\n   */\n  public applyMatrix4(matrix: Matrix) {\n    this.applyMatrix4ToRef(matrix, this)\n  }\n\n  /**\n   * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\n   * @param matrix - The transformation matrix\n   * @param result - defines the Vector3 object where to store the result\n   * @returns the current Vector3\n   */\n  public applyMatrix4ToRef(matrix: Matrix, result: Vector3) {\n    const { x, y, z } = this\n    const { m } = matrix\n    const w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15])\n\n    result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w\n    result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w\n    result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w\n\n    return result\n  }\n\n  /**\n   * Rotates the current Vector3 based on the given quaternion\n   * @param q - defines the Quaternion\n   * @returns the current Vector3\n   */\n  public rotate(q: Quaternion) {\n    return this.rotateToRef(q, this)\n  }\n\n  /**\n   * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n   * @param q - defines the Quaternion\n   * @param result - defines the target Vector3\n   * @returns the current Vector3\n   */\n  public rotateToRef(q: Quaternion, result: Vector3) {\n    const { x, y, z } = this\n    const { x: qx, y: qy, z: qz, w: qw } = q\n\n    // calculate quat * vector\n\n    const ix = qw * x + qy * z - qz * y\n    const iy = qw * y + qz * x - qx * z\n    const iz = qw * z + qx * y - qy * x\n    const iw = -qx * x - qy * y - qz * z\n\n    // calculate result * inverse quat\n\n    result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy\n    result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz\n    result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx\n\n    return result\n  }\n\n  /**\n   * Gets a new Vector3 set with the current Vector3 negated coordinates\n   * @returns a new Vector3\n   */\n  public negate(): Vector3 {\n    return new Vector3(-this.x, -this.y, -this.z)\n  }\n\n  /**\n   * Multiplies the Vector3 coordinates by the float \"scale\"\n   * @param scale - defines the multiplier factor\n   * @returns the current updated Vector3\n   */\n  public scaleInPlace(scale: number): Vector3 {\n    this.x *= scale\n    this.y *= scale\n    this.z *= scale\n    return this\n  }\n\n  /**\n   * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n   * @param scale - defines the multiplier factor\n   * @returns a new Vector3\n   */\n  public scale(scale: number): Vector3 {\n    return new Vector3(this.x * scale, this.y * scale, this.z * scale)\n  }\n\n  /**\n   * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\n   * @param scale - defines the multiplier factor\n   * @param result - defines the Vector3 object where to store the result\n   * @returns the current Vector3\n   */\n  public scaleToRef(scale: number, result: Vector3): Vector3 {\n    return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale)\n  }\n\n  /**\n   * Scale the current Vector3 values by a factor and add the result to a given Vector3\n   * @param scale - defines the scale factor\n   * @param result - defines the Vector3 object where to store the result\n   * @returns the unmodified current Vector3\n   */\n  public scaleAndAddToRef(scale: number, result: Vector3): Vector3 {\n    return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale)\n  }\n\n  /**\n   * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n   * @param otherVector - defines the second operand\n   * @returns true if both vectors are equals\n   */\n  public equals(otherVector: ReadOnlyVector3): boolean {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z\n  }\n\n  /**\n   * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n   * @param otherVector - defines the second operand\n   * @param epsilon - defines the minimal distance to define values as equals\n   * @returns true if both vectors are distant less than epsilon\n   */\n  public equalsWithEpsilon(otherVector: ReadOnlyVector3, epsilon: number = Epsilon): boolean {\n    return (\n      otherVector &&\n      Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n      Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n      Scalar.WithinEpsilon(this.z, otherVector.z, epsilon)\n    )\n  }\n\n  /**\n   * Returns true if the current Vector3 coordinates equals the given floats\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @returns true if both vectors are equals\n   */\n  public equalsToFloats(x: number, y: number, z: number): boolean {\n    return this.x === x && this.y === y && this.z === z\n  }\n\n  /**\n   * Multiplies the current Vector3 coordinates by the given ones\n   * @param otherVector - defines the second operand\n   * @returns the current updated Vector3\n   */\n  public multiplyInPlace(otherVector: ReadOnlyVector3): Vector3 {\n    this.x *= otherVector.x\n    this.y *= otherVector.y\n    this.z *= otherVector.z\n    return this\n  }\n\n  /**\n   * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n   * @param otherVector - defines the second operand\n   * @returns the new Vector3\n   */\n  public multiply(otherVector: ReadOnlyVector3): Vector3 {\n    return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z)\n  }\n\n  /**\n   * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n   * @param otherVector - defines the second operand\n   * @param result - defines the Vector3 object where to store the result\n   * @returns the current Vector3\n   */\n  public multiplyToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3 {\n    return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z)\n  }\n\n  /**\n   * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @returns the new Vector3\n   */\n  public multiplyByFloats(x: number, y: number, z: number): Vector3 {\n    return new Vector3(this.x * x, this.y * y, this.z * z)\n  }\n\n  /**\n   * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n   * @param otherVector - defines the second operand\n   * @returns the new Vector3\n   */\n  public divide(otherVector: ReadOnlyVector3): Vector3 {\n    return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z)\n  }\n\n  /**\n   * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n   * @param otherVector - defines the second operand\n   * @param result - defines the Vector3 object where to store the result\n   * @returns the current Vector3\n   */\n  public divideToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3 {\n    return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z)\n  }\n\n  /**\n   * Divides the current Vector3 coordinates by the given ones.\n   * @param otherVector - defines the second operand\n   * @returns the current updated Vector3\n   */\n  public divideInPlace(otherVector: ReadOnlyVector3): Vector3 {\n    return this.divideToRef(otherVector, this)\n  }\n\n  /**\n   * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n   * @param other - defines the second operand\n   * @returns the current updated Vector3\n   */\n  public minimizeInPlace(other: ReadOnlyVector3): Vector3 {\n    return this.minimizeInPlaceFromFloats(other.x, other.y, other.z)\n  }\n\n  /**\n   * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n   * @param other - defines the second operand\n   * @returns the current updated Vector3\n   */\n  public maximizeInPlace(other: ReadOnlyVector3): Vector3 {\n    return this.maximizeInPlaceFromFloats(other.x, other.y, other.z)\n  }\n\n  /**\n   * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @returns the current updated Vector3\n   */\n  public minimizeInPlaceFromFloats(x: number, y: number, z: number): Vector3 {\n    if (x < this.x) {\n      this.x = x\n    }\n    if (y < this.y) {\n      this.y = y\n    }\n    if (z < this.z) {\n      this.z = z\n    }\n    return this\n  }\n\n  /**\n   * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @returns the current updated Vector3\n   */\n  public maximizeInPlaceFromFloats(x: number, y: number, z: number): Vector3 {\n    if (x > this.x) {\n      this.x = x\n    }\n    if (y > this.y) {\n      this.y = y\n    }\n    if (z > this.z) {\n      this.z = z\n    }\n    return this\n  }\n\n  /**\n   * Gets a new Vector3 from current Vector3 floored values\n   * @returns a new Vector3\n   */\n  public floor(): Vector3 {\n    return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z))\n  }\n\n  /**\n   * Gets a new Vector3 from current Vector3 floored values\n   * @returns a new Vector3\n   */\n  public fract(): Vector3 {\n    return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z))\n  }\n\n  // Properties\n  /**\n   * Gets the length of the Vector3\n   * @returns the length of the Vecto3\n   */\n  public length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\n  }\n\n  /**\n   * Gets the squared length of the Vector3\n   * @returns squared length of the Vector3\n   */\n  public lengthSquared(): number {\n    return this.x * this.x + this.y * this.y + this.z * this.z\n  }\n\n  /**\n   * Normalize the current Vector3.\n   * Please note that this is an in place operation.\n   * @returns the current updated Vector3\n   */\n  public normalize(): Vector3 {\n    return this.normalizeFromLength(this.length())\n  }\n\n  /**\n   * Normalize the current Vector3 with the given input length.\n   * Please note that this is an in place operation.\n   * @param len - the length of the vector\n   * @returns the current updated Vector3\n   */\n  public normalizeFromLength(len: number): Vector3 {\n    if (len === 0 || len === 1.0) {\n      return this\n    }\n\n    return this.scaleInPlace(1.0 / len)\n  }\n\n  /**\n   * Normalize the current Vector3 to a new vector\n   * @returns the new Vector3\n   */\n  public normalizeToNew(): Vector3 {\n    const normalized = new Vector3(0, 0, 0)\n    this.normalizeToRef(normalized)\n    return normalized\n  }\n\n  /**\n   * Normalize the current Vector3 to the reference\n   * @param reference - define the Vector3 to update\n   * @returns the updated Vector3\n   */\n  public normalizeToRef(reference: Vector3): Vector3 {\n    let len = this.length()\n    if (len === 0 || len === 1.0) {\n      return reference.copyFromFloats(this.x, this.y, this.z)\n    }\n\n    return this.scaleToRef(1.0 / len, reference)\n  }\n\n  /**\n   * Creates a new Vector3 copied from the current Vector3\n   * @returns the new Vector3\n   */\n  public clone(): Vector3 {\n    return new Vector3(this.x, this.y, this.z)\n  }\n\n  /**\n   * Copies the given vector coordinates to the current Vector3 ones\n   * @param source - defines the source Vector3\n   * @returns the current updated Vector3\n   */\n  public copyFrom(source: ReadOnlyVector3): Vector3 {\n    return this.copyFromFloats(source.x, source.y, source.z)\n  }\n\n  /**\n   * Copies the given floats to the current Vector3 coordinates\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @returns the current updated Vector3\n   */\n  public copyFromFloats(x: number, y: number, z: number): Vector3 {\n    this.x = x\n    this.y = y\n    this.z = z\n    return this\n  }\n\n  /**\n   * Copies the given floats to the current Vector3 coordinates\n   * @param x - defines the x coordinate of the operand\n   * @param y - defines the y coordinate of the operand\n   * @param z - defines the z coordinate of the operand\n   * @returns the current updated Vector3\n   */\n  public set(x: number, y: number, z: number): Vector3 {\n    return this.copyFromFloats(x, y, z)\n  }\n\n  /**\n   * Copies the given float to the current Vector3 coordinates\n   * @param v - defines the x, y and z coordinates of the operand\n   * @returns the current updated Vector3\n   */\n  public setAll(v: number): Vector3 {\n    this.x = this.y = this.z = v\n    return this\n  }\n}\n","import { buildArray } from '../../ecs/helpers'\nimport { Vector3 } from './Vector3'\nimport { Quaternion } from './Quaternion'\nimport { Matrix } from './Matrix'\n\n// Temporary pre-allocated objects for engine internal use\n// usage in any internal function :\n// var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3\n// There's a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix\n\n/**\n * @internal\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n */\nexport const MathTmp = {\n  Vector3: buildArray(6, Vector3.Zero),\n  Matrix: buildArray(2, Matrix.Identity),\n  Quaternion: buildArray(3, Quaternion.Zero),\n  staticUp: Vector3.Up() as Readonly<Vector3>,\n  tmpMatrix: Matrix.Zero()\n}\n","import { Vector2 } from './Vector2'\n\n/**\n * Defines angle representation\n * @public\n */\nexport class Angle {\n  private _radians: number\n\n  /**\n   * Creates an Angle object of \"radians\" radians (float).\n   */\n  constructor(radians: number) {\n    this._radians = radians\n    if (this._radians < 0.0) {\n      this._radians += 2.0 * Math.PI\n    }\n  }\n\n  /**\n   * Gets a new Angle object valued with the angle value in radians between the two given vectors\n   * @param a - defines first vector\n   * @param b - defines second vector\n   * @returns a new Angle\n   */\n  public static BetweenTwoPoints(a: Vector2, b: Vector2): Angle {\n    let delta = b.subtract(a)\n    let theta = Math.atan2(delta.y, delta.x)\n    return new Angle(theta)\n  }\n\n  /**\n   * Gets a new Angle object from the given float in radians\n   * @param radians - defines the angle value in radians\n   * @returns a new Angle\n   */\n  public static FromRadians(radians: number): Angle {\n    return new Angle(radians)\n  }\n  /**\n   * Gets a new Angle object from the given float in degrees\n   * @param degrees - defines the angle value in degrees\n   * @returns a new Angle\n   */\n  public static FromDegrees(degrees: number): Angle {\n    return new Angle((degrees * Math.PI) / 180.0)\n  }\n\n  /**\n   * Get value in degrees\n   * @returns the Angle value in degrees (float)\n   */\n  public degrees() {\n    return (this._radians * 180.0) / Math.PI\n  }\n\n  /**\n   * Get value in radians\n   * @returns the Angle value in radians (float)\n   */\n  public radians() {\n    return this._radians\n  }\n}\n","import { Matrix } from './Matrix'\nimport { FloatArray, Epsilon } from './types'\nimport { Scalar } from './Scalar'\n\n/**\n * Class representing a vector containing 2 coordinates\n * @public\n */\nexport class Vector2 implements ReadOnlyVector2 {\n  /**\n   * Creates a new Vector2 from the given x and y coordinates\n   * @param x - defines the first coordinate\n   * @param y - defines the second coordinate\n   */\n  constructor(\n    /** defines the first coordinate */\n    public x: number = 0,\n    /** defines the second coordinate */\n    public y: number = 0\n  ) {}\n\n  /**\n   * Gets a new Vector2(0, 0)\n   * @returns a new Vector2\n   */\n  public static Zero(): Vector2 {\n    return new Vector2(0, 0)\n  }\n\n  /**\n   * Gets a new Vector2(1, 1)\n   * @returns a new Vector2\n   */\n  public static One(): Vector2 {\n    return new Vector2(1, 1)\n  }\n\n  /**\n   * Returns a new Vector2 as the result of the addition of the two given vectors.\n   * @param vector1 - the first vector\n   * @param vector2 - the second vector\n   * @returns the resulting vector\n   */\n  public static Add(vector1: ReadOnlyVector2, vector2: ReadOnlyVector2): Vector2 {\n    return new Vector2(vector1.x, vector1.y).addInPlace(vector2)\n  }\n\n  /**\n   * Gets a new Vector2 set from the given index element of the given array\n   * @param array - defines the data source\n   * @param offset - defines the offset in the data source\n   * @returns a new Vector2\n   */\n  public static FromArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    return new Vector2(array[offset], array[offset + 1])\n  }\n\n  /**\n   * Sets \"result\" from the given index element of the given array\n   * @param array - defines the data source\n   * @param offset - defines the offset in the data source\n   * @param result - defines the target vector\n   */\n  public static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector2): void {\n    result.x = array[offset]\n    result.y = array[offset + 1]\n  }\n\n  /**\n   * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\n   * @param value1 - defines 1st point of control\n   * @param value2 - defines 2nd point of control\n   * @param value3 - defines 3rd point of control\n   * @param value4 - defines 4th point of control\n   * @param amount - defines the interpolation factor\n   * @returns a new Vector2\n   */\n  public static CatmullRom(\n    value1: ReadOnlyVector2,\n    value2: ReadOnlyVector2,\n    value3: ReadOnlyVector2,\n    value4: ReadOnlyVector2,\n    amount: number\n  ): Vector2 {\n    let squared = amount * amount\n    let cubed = amount * squared\n\n    let x =\n      0.5 *\n      (2.0 * value2.x +\n        (-value1.x + value3.x) * amount +\n        (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared +\n        (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed)\n\n    let y =\n      0.5 *\n      (2.0 * value2.y +\n        (-value1.y + value3.y) * amount +\n        (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared +\n        (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed)\n\n    return new Vector2(x, y)\n  }\n\n  /**\n   * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\n   * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\n   * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\n   * @param value - defines the value to clamp\n   * @param min - defines the lower limit\n   * @param max - defines the upper limit\n   * @returns a new Vector2\n   */\n  public static Clamp(value: ReadOnlyVector2, min: ReadOnlyVector2, max: ReadOnlyVector2): Vector2 {\n    let x = value.x\n    x = x > max.x ? max.x : x\n    x = x < min.x ? min.x : x\n\n    let y = value.y\n    y = y > max.y ? max.y : y\n    y = y < min.y ? min.y : y\n\n    return new Vector2(x, y)\n  }\n\n  /**\n   * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\n   * @param value1 - defines the 1st control point\n   * @param tangent1 - defines the outgoing tangent\n   * @param value2 - defines the 2nd control point\n   * @param tangent2 - defines the incoming tangent\n   * @param amount - defines the interpolation factor\n   * @returns a new Vector2\n   */\n  public static Hermite(\n    value1: ReadOnlyVector2,\n    tangent1: ReadOnlyVector2,\n    value2: ReadOnlyVector2,\n    tangent2: ReadOnlyVector2,\n    amount: number\n  ): Vector2 {\n    let squared = amount * amount\n    let cubed = amount * squared\n    let part1 = 2.0 * cubed - 3.0 * squared + 1.0\n    let part2 = -2.0 * cubed + 3.0 * squared\n    let part3 = cubed - 2.0 * squared + amount\n    let part4 = cubed - squared\n\n    let x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4\n    let y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4\n\n    return new Vector2(x, y)\n  }\n\n  /**\n   * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\n   * @param start - defines the start vector\n   * @param end - defines the end vector\n   * @param amount - defines the interpolation factor\n   * @returns a new Vector2\n   */\n  public static Lerp(start: ReadOnlyVector2, end: ReadOnlyVector2, amount: number): Vector2 {\n    let x = start.x + (end.x - start.x) * amount\n    let y = start.y + (end.y - start.y) * amount\n    return new Vector2(x, y)\n  }\n\n  /**\n   * Gets the dot product of the vector \"left\" and the vector \"right\"\n   * @param left - defines first vector\n   * @param right - defines second vector\n   * @returns the dot product (float)\n   */\n  public static Dot(left: ReadOnlyVector2, right: ReadOnlyVector2): number {\n    return left.x * right.x + left.y * right.y\n  }\n\n  /**\n   * Returns a new Vector2 equal to the normalized given vector\n   * @param vector - defines the vector to normalize\n   * @returns a new Vector2\n   */\n  public static Normalize(vector: ReadOnlyVector2): Vector2 {\n    let newVector = new Vector2(vector.x, vector.y)\n    newVector.normalize()\n    return newVector\n  }\n\n  /**\n   * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\n   * @param left - defines 1st vector\n   * @param right - defines 2nd vector\n   * @returns a new Vector2\n   */\n  public static Minimize(left: ReadOnlyVector2, right: ReadOnlyVector2): Vector2 {\n    let x = left.x < right.x ? left.x : right.x\n    let y = left.y < right.y ? left.y : right.y\n    return new Vector2(x, y)\n  }\n\n  /**\n   * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\n   * @param left - defines 1st vector\n   * @param right - defines 2nd vector\n   * @returns a new Vector2\n   */\n  public static Maximize(left: ReadOnlyVector2, right: ReadOnlyVector2): Vector2 {\n    let x = left.x > right.x ? left.x : right.x\n    let y = left.y > right.y ? left.y : right.y\n    return new Vector2(x, y)\n  }\n\n  /**\n   * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n   * @param vector - defines the vector to transform\n   * @param transformation - defines the matrix to apply\n   * @returns a new Vector2\n   */\n  public static Transform(vector: Vector2, transformation: Matrix): Vector2 {\n    let r = Vector2.Zero()\n    Vector2.TransformToRef(vector, transformation, r)\n    return r\n  }\n\n  /**\n   * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\n   * @param vector - defines the vector to transform\n   * @param transformation - defines the matrix to apply\n   * @param result - defines the target vector\n   */\n  public static TransformToRef(vector: ReadOnlyVector2, transformation: Matrix, result: Vector2) {\n    const m = transformation.m\n    let x = vector.x * m[0] + vector.y * m[4] + m[12]\n    let y = vector.x * m[1] + vector.y * m[5] + m[13]\n    result.x = x\n    result.y = y\n  }\n\n  /**\n   * Determines if a given vector is included in a triangle\n   * @param p - defines the vector to test\n   * @param p0 - defines 1st triangle point\n   * @param p1 - defines 2nd triangle point\n   * @param p2 - defines 3rd triangle point\n   * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\n   */\n  public static PointInTriangle(p: ReadOnlyVector2, p0: ReadOnlyVector2, p1: ReadOnlyVector2, p2: ReadOnlyVector2) {\n    let a = (1 / 2) * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y)\n    let sign = a < 0 ? -1 : 1\n    let s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign\n    let t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign\n\n    return s > 0 && t > 0 && s + t < 2 * a * sign\n  }\n\n  /**\n   * Gets the distance between the vectors \"value1\" and \"value2\"\n   * @param value1 - defines first vector\n   * @param value2 - defines second vector\n   * @returns the distance between vectors\n   */\n  public static Distance(value1: Vector2, value2: Vector2): number {\n    return Math.sqrt(Vector2.DistanceSquared(value1, value2))\n  }\n\n  /**\n   * Returns the squared distance between the vectors \"value1\" and \"value2\"\n   * @param value1 - defines first vector\n   * @param value2 - defines second vector\n   * @returns the squared distance between vectors\n   */\n  public static DistanceSquared(value1: ReadOnlyVector2, value2: ReadOnlyVector2): number {\n    let x = value1.x - value2.x\n    let y = value1.y - value2.y\n    return x * x + y * y\n  }\n\n  /**\n   * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\n   * @param value1 - defines first vector\n   * @param value2 - defines second vector\n   * @returns a new Vector2\n   */\n  public static Center(value1: ReadOnlyVector2, value2: ReadOnlyVector2): Vector2 {\n    let center = Vector2.Add(value1, value2)\n    center.scaleInPlace(0.5)\n    return center\n  }\n\n  /**\n   * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\n   * @param p - defines the middle point\n   * @param segA - defines one point of the segment\n   * @param segB - defines the other point of the segment\n   * @returns the shortest distance\n   */\n  public static DistanceOfPointFromSegment(p: Vector2, segA: Vector2, segB: Vector2): number {\n    let l2 = Vector2.DistanceSquared(segA, segB)\n    if (l2 === 0.0) {\n      return Vector2.Distance(p, segA)\n    }\n    let v = segB.subtract(segA)\n    let t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2))\n    let proj = segA.add(v.multiplyByFloats(t, t))\n    return Vector2.Distance(p, proj)\n  }\n\n  /**\n   * Gets a string with the Vector2 coordinates\n   * @returns a string with the Vector2 coordinates\n   */\n  public toString(): string {\n    return '{X: ' + this.x + ' Y:' + this.y + '}'\n  }\n\n  /**\n   * Gets class name\n   * @returns the string \"Vector2\"\n   */\n  public getClassName(): string {\n    return 'Vector2'\n  }\n\n  /**\n   * Gets current vector hash code\n   * @returns the Vector2 hash code as a number\n   */\n  public getHashCode(): number {\n    let hash = this.x || 0\n    hash = (hash * 397) ^ (this.y || 0)\n    return hash\n  }\n\n  // Operators\n\n  /**\n   * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\n   * @param array - defines the source array\n   * @param index - defines the offset in source array\n   * @returns the current Vector2\n   */\n  public toArray(array: FloatArray, index: number = 0): Vector2 {\n    array[index] = this.x\n    array[index + 1] = this.y\n    return this\n  }\n\n  /**\n   * Copy the current vector to an array\n   * @returns a new array with 2 elements: the Vector2 coordinates.\n   */\n  public asArray(): number[] {\n    let result = new Array<number>()\n    this.toArray(result, 0)\n    return result\n  }\n\n  /**\n   * Sets the Vector2 coordinates with the given Vector2 coordinates\n   * @param source - defines the source Vector2\n   * @returns the current updated Vector2\n   */\n  public copyFrom(source: ReadOnlyVector2): Vector2 {\n    this.x = source.x\n    this.y = source.y\n    return this\n  }\n\n  /**\n   * Sets the Vector2 coordinates with the given floats\n   * @param x - defines the first coordinate\n   * @param y - defines the second coordinate\n   * @returns the current updated Vector2\n   */\n  public copyFromFloats(x: number, y: number): Vector2 {\n    this.x = x\n    this.y = y\n    return this\n  }\n\n  /**\n   * Sets the Vector2 coordinates with the given floats\n   * @param x - defines the first coordinate\n   * @param y - defines the second coordinate\n   * @returns the current updated Vector2\n   */\n  public set(x: number, y: number): Vector2 {\n    return this.copyFromFloats(x, y)\n  }\n  /**\n   * Add another vector with the current one\n   * @param otherVector - defines the other vector\n   * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n   */\n  public add(otherVector: ReadOnlyVector2): Vector2 {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y)\n  }\n\n  /**\n   * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\n   * @param otherVector - defines the other vector\n   * @param result - defines the target vector\n   * @returns the unmodified current Vector2\n   */\n  public addToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2 {\n    result.x = this.x + otherVector.x\n    result.y = this.y + otherVector.y\n    return this\n  }\n\n  /**\n   * Set the Vector2 coordinates by adding the given Vector2 coordinates\n   * @param otherVector - defines the other vector\n   * @returns the current updated Vector2\n   */\n  public addInPlace(otherVector: ReadOnlyVector2): Vector2 {\n    this.x += otherVector.x\n    this.y += otherVector.y\n    return this\n  }\n\n  /**\n   * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n   * @param otherVector - defines the other vector\n   * @returns a new Vector2\n   */\n  public addVector3(otherVector: ReadOnlyVector2): Vector2 {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y)\n  }\n\n  /**\n   * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n   * @param otherVector - defines the other vector\n   * @returns a new Vector2\n   */\n  public subtract(otherVector: ReadOnlyVector2): Vector2 {\n    return new Vector2(this.x - otherVector.x, this.y - otherVector.y)\n  }\n\n  /**\n   * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n   * @param otherVector - defines the other vector\n   * @param result - defines the target vector\n   * @returns the unmodified current Vector2\n   */\n  public subtractToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2 {\n    result.x = this.x - otherVector.x\n    result.y = this.y - otherVector.y\n    return this\n  }\n  /**\n   * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n   * @param otherVector - defines the other vector\n   * @returns the current updated Vector2\n   */\n  public subtractInPlace(otherVector: ReadOnlyVector2): Vector2 {\n    this.x -= otherVector.x\n    this.y -= otherVector.y\n    return this\n  }\n\n  /**\n   * Multiplies in place the current Vector2 coordinates by the given ones\n   * @param otherVector - defines the other vector\n   * @returns the current updated Vector2\n   */\n  public multiplyInPlace(otherVector: ReadOnlyVector2): Vector2 {\n    this.x *= otherVector.x\n    this.y *= otherVector.y\n    return this\n  }\n\n  /**\n   * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n   * @param otherVector - defines the other vector\n   * @returns a new Vector2\n   */\n  public multiply(otherVector: ReadOnlyVector2): Vector2 {\n    return new Vector2(this.x * otherVector.x, this.y * otherVector.y)\n  }\n\n  /**\n   * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\n   * @param otherVector - defines the other vector\n   * @param result - defines the target vector\n   * @returns the unmodified current Vector2\n   */\n  public multiplyToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2 {\n    result.x = this.x * otherVector.x\n    result.y = this.y * otherVector.y\n    return this\n  }\n\n  /**\n   * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n   * @param x - defines the first coordinate\n   * @param y - defines the second coordinate\n   * @returns a new Vector2\n   */\n  public multiplyByFloats(x: number, y: number): Vector2 {\n    return new Vector2(this.x * x, this.y * y)\n  }\n\n  /**\n   * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n   * @param otherVector - defines the other vector\n   * @returns a new Vector2\n   */\n  public divide(otherVector: ReadOnlyVector2): Vector2 {\n    return new Vector2(this.x / otherVector.x, this.y / otherVector.y)\n  }\n\n  /**\n   * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\n   * @param otherVector - defines the other vector\n   * @param result - defines the target vector\n   * @returns the unmodified current Vector2\n   */\n  public divideToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2 {\n    result.x = this.x / otherVector.x\n    result.y = this.y / otherVector.y\n    return this\n  }\n\n  /**\n   * Divides the current Vector2 coordinates by the given ones\n   * @param otherVector - defines the other vector\n   * @returns the current updated Vector2\n   */\n  public divideInPlace(otherVector: ReadOnlyVector2): Vector2 {\n    return this.divideToRef(otherVector, this)\n  }\n\n  /**\n   * Gets a new Vector2 with current Vector2 negated coordinates\n   * @returns a new Vector2\n   */\n  public negate(): Vector2 {\n    return new Vector2(-this.x, -this.y)\n  }\n\n  /**\n   * Multiply the Vector2 coordinates by scale\n   * @param scale - defines the scaling factor\n   * @returns the current updated Vector2\n   */\n  public scaleInPlace(scale: number): Vector2 {\n    this.x *= scale\n    this.y *= scale\n    return this\n  }\n\n  /**\n   * Returns a new Vector2 scaled by \"scale\" from the current Vector2\n   * @param scale - defines the scaling factor\n   * @returns a new Vector2\n   */\n  public scale(scale: number): Vector2 {\n    let result = new Vector2(0, 0)\n    this.scaleToRef(scale, result)\n    return result\n  }\n\n  /**\n   * Scale the current Vector2 values by a factor to a given Vector2\n   * @param scale - defines the scale factor\n   * @param result - defines the Vector2 object where to store the result\n   * @returns the unmodified current Vector2\n   */\n  public scaleToRef(scale: number, result: Vector2): Vector2 {\n    result.x = this.x * scale\n    result.y = this.y * scale\n    return this\n  }\n\n  /**\n   * Scale the current Vector2 values by a factor and add the result to a given Vector2\n   * @param scale - defines the scale factor\n   * @param result - defines the Vector2 object where to store the result\n   * @returns the unmodified current Vector2\n   */\n  public scaleAndAddToRef(scale: number, result: Vector2): Vector2 {\n    result.x += this.x * scale\n    result.y += this.y * scale\n    return this\n  }\n\n  /**\n   * Gets a boolean if two vectors are equals\n   * @param otherVector - defines the other vector\n   * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n   */\n  public equals(otherVector: ReadOnlyVector2): boolean {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y\n  }\n\n  /**\n   * Gets a boolean if two vectors are equals (using an epsilon value)\n   * @param otherVector - defines the other vector\n   * @param epsilon - defines the minimal distance to consider equality\n   * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n   */\n  public equalsWithEpsilon(otherVector: ReadOnlyVector2, epsilon: number = Epsilon): boolean {\n    return (\n      otherVector &&\n      Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n      Scalar.WithinEpsilon(this.y, otherVector.y, epsilon)\n    )\n  }\n\n  /**\n   * Gets a new Vector2 from current Vector2 floored values\n   * @returns a new Vector2\n   */\n  public floor(): Vector2 {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y))\n  }\n\n  /**\n   * Gets a new Vector2 from current Vector2 floored values\n   * @returns a new Vector2\n   */\n  public fract(): Vector2 {\n    return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y))\n  }\n\n  // Properties\n\n  /**\n   * Gets the length of the vector\n   * @returns the vector length (float)\n   */\n  public length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /**\n   * Gets the vector squared length\n   * @returns the vector squared length (float)\n   */\n  public lengthSquared(): number {\n    return this.x * this.x + this.y * this.y\n  }\n\n  // Methods\n\n  /**\n   * Normalize the vector\n   * @returns the current updated Vector2\n   */\n  public normalize(): Vector2 {\n    let len = this.length()\n\n    if (len === 0) {\n      return this\n    }\n\n    let num = 1.0 / len\n\n    this.x *= num\n    this.y *= num\n\n    return this\n  }\n\n  /**\n   * Gets a new Vector2 copied from the Vector2\n   * @returns a new Vector2\n   */\n  public clone(): Vector2 {\n    return new Vector2(this.x, this.y)\n  }\n}\n","import { Angle } from './Angle'\nimport { Vector2 } from './Vector2'\nimport { Orientation } from './types'\n\n/**\n * This represents an arc in a 2d space.\n * @public\n */\nexport class Arc2 {\n  /**\n   * Defines the center point of the arc.\n   */\n  public centerPoint: Vector2\n  /**\n   * Defines the radius of the arc.\n   */\n  public radius: number\n  /**\n   * Defines the angle of the arc (from mid point to end point).\n   */\n  public angle: Angle\n  /**\n   * Defines the start angle of the arc (from start point to middle point).\n   */\n  public startAngle: Angle\n  /**\n   * Defines the orientation of the arc (clock wise/counter clock wise).\n   */\n  public orientation: Orientation\n\n  /**\n   * Creates an Arc object from the three given points : start, middle and end.\n   * @param startPoint - Defines the start point of the arc\n   * @param midPoint - Defines the midlle point of the arc\n   * @param endPoint - Defines the end point of the arc\n   */\n  constructor(\n    /** Defines the start point of the arc */\n    public startPoint: Vector2,\n    /** Defines the mid point of the arc */\n    public midPoint: Vector2,\n    /** Defines the end point of the arc */\n    public endPoint: Vector2\n  ) {\n    let temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2)\n    let startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2\n    let midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2\n    let det =\n      (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y)\n\n    this.centerPoint = new Vector2(\n      (startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det,\n      ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det\n    )\n\n    this.radius = this.centerPoint.subtract(this.startPoint).length()\n\n    this.startAngle = Angle.BetweenTwoPoints(this.centerPoint, this.startPoint)\n\n    let a1 = this.startAngle.degrees()\n    let a2 = Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees()\n    let a3 = Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees()\n\n    // angles correction\n    if (a2 - a1 > +180.0) {\n      a2 -= 360.0\n    }\n    if (a2 - a1 < -180.0) {\n      a2 += 360.0\n    }\n    if (a3 - a2 > +180.0) {\n      a3 -= 360.0\n    }\n    if (a3 - a2 < -180.0) {\n      a3 += 360.0\n    }\n\n    this.orientation = a2 - a1 < 0 ? Orientation.CW : Orientation.CCW\n    this.angle = Angle.FromDegrees(this.orientation === Orientation.CW ? a1 - a3 : a3 - a1)\n  }\n}\n","import { Vector3 } from './Vector3'\n\n/**\n * Defines the 3 main axes\n * @public\n */\nexport class Axis {\n  /** X axis */\n  public static X: Vector3 = new Vector3(1.0, 0.0, 0.0)\n  /** Y axis */\n  public static Y: Vector3 = new Vector3(0.0, 1.0, 0.0)\n  /** Z axis */\n  public static Z: Vector3 = new Vector3(0.0, 0.0, 1.0)\n}\n","/**\n * Class used to represent a Bezier curve\n * @public\n */\nexport class BezierCurve {\n  /**\n   * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\n   * @param t - defines the time\n   * @param x1 - defines the left coordinate on X axis\n   * @param y1 - defines the left coordinate on Y axis\n   * @param x2 - defines the right coordinate on X axis\n   * @param y2 - defines the right coordinate on Y axis\n   * @returns the interpolated value\n   */\n  public static Interpolate(t: number, x1: number, y1: number, x2: number, y2: number): number {\n    // Extract X (which is equal to time here)\n    let f0 = 1 - 3 * x2 + 3 * x1\n    let f1 = 3 * x2 - 6 * x1\n    let f2 = 3 * x1\n\n    let refinedT = t\n    for (let i = 0; i < 5; i++) {\n      let refinedT2 = refinedT * refinedT\n      let refinedT3 = refinedT2 * refinedT\n\n      let x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT\n      let slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2)\n      refinedT -= (x - t) * slope\n      refinedT = Math.min(1, Math.max(0, refinedT))\n    }\n\n    // Resolve cubic bezier for the given x\n    return (\n      3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +\n      3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +\n      Math.pow(refinedT, 3)\n    )\n  }\n}\n","import { Color3 } from './Color3'\n\nimport { Scalar } from './Scalar'\n\nimport { ToLinearSpace, ToGammaSpace } from './types'\n\n/**\n * @public\n */\nexport type ReadOnlyColor4 = {\n  readonly r: number\n  readonly g: number\n  readonly b: number\n  readonly a: number\n}\n\n/**\n * Class used to hold a RBGA color\n * @public\n */\nexport class Color4 {\n  /**\n   * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n   * @param r - defines the red component (between 0 and 1, default is 0)\n   * @param g - defines the green component (between 0 and 1, default is 0)\n   * @param b - defines the blue component (between 0 and 1, default is 0)\n   * @param a - defines the alpha component (between 0 and 1, default is 1)\n   */\n  constructor(\n    /**\n     * Defines the red component (between 0 and 1, default is 0)\n     */\n    public r: number = 0,\n    /**\n     * Defines the green component (between 0 and 1, default is 0)\n     */\n    public g: number = 0,\n    /**\n     * Defines the blue component (between 0 and 1, default is 0)\n     */\n    public b: number = 0,\n    /**\n     * Defines the alpha component (between 0 and 1, default is 1)\n     */\n    public a: number = 1\n  ) {}\n\n  // Statics\n\n  /**\n   * Creates a new Color4 from the string containing valid hexadecimal values\n   * @param hex - defines a string containing valid hexadecimal values\n   * @returns a new Color4 object\n   */\n  public static FromHexString(hex: string): Color4 {\n    if (hex.substring(0, 1) !== '#' || hex.length !== 9) {\n      return new Color4(0.0, 0.0, 0.0, 0.0)\n    }\n\n    let r = parseInt(hex.substring(1, 3), 16)\n    let g = parseInt(hex.substring(3, 5), 16)\n    let b = parseInt(hex.substring(5, 7), 16)\n    let a = parseInt(hex.substring(7, 9), 16)\n\n    return Color4.FromInts(r, g, b, a)\n  }\n\n  /**\n   * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n   * @param left - defines the start value\n   * @param right - defines the end value\n   * @param amount - defines the gradient factor\n   * @returns a new Color4 object\n   */\n  public static Lerp(left: Color4, right: Color4, amount: number): Color4 {\n    let result = new Color4(0.0, 0.0, 0.0, 0.0)\n    Color4.LerpToRef(left, right, amount, result)\n    return result\n  }\n\n  /**\n   * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n   * @param left - defines the start value\n   * @param right - defines the end value\n   * @param amount - defines the gradient factor\n   * @param result - defines the Color4 object where to store data\n   */\n  public static LerpToRef(left: Color4, right: Color4, amount: number, result: Color4): void {\n    result.r = left.r + (right.r - left.r) * amount\n    result.g = left.g + (right.g - left.g) * amount\n    result.b = left.b + (right.b - left.b) * amount\n    result.a = left.a + (right.a - left.a) * amount\n  }\n\n  /**\n   * Returns a Color4 value containing a red color\n   * @returns a new Color3 object\n   */\n  public static Red(): Color4 {\n    return new Color4(1.0, 0, 0, 1.0)\n  }\n  /**\n   * Returns a Color4 value containing a green color\n   * @returns a new Color4 object\n   */\n  public static Green(): Color4 {\n    return new Color4(0, 1.0, 0, 1.0)\n  }\n  /**\n   * Returns a Color4 value containing a blue color\n   * @returns a new Color4 object\n   */\n  public static Blue(): Color4 {\n    return new Color4(0, 0, 1.0, 1.0)\n  }\n  /**\n   * Returns a Color4 value containing a black color\n   * @returns a new Color4 object\n   */\n  public static Black(): Color4 {\n    return new Color4(0, 0, 0, 1)\n  }\n  /**\n   * Returns a Color4 value containing a white color\n   * @returns a new Color4 object\n   */\n  public static White(): Color4 {\n    return new Color4(1, 1, 1, 1)\n  }\n  /**\n   * Returns a Color4 value containing a purple color\n   * @returns a new Color4 object\n   */\n  public static Purple(): Color4 {\n    return new Color4(0.5, 0, 0.5, 1)\n  }\n  /**\n   * Returns a Color4 value containing a magenta color\n   * @returns a new Color4 object\n   */\n  public static Magenta(): Color4 {\n    return new Color4(1, 0, 1, 1)\n  }\n  /**\n   * Returns a Color4 value containing a yellow color\n   * @returns a new Color4 object\n   */\n  public static Yellow(): Color4 {\n    return new Color4(1, 1, 0, 1)\n  }\n  /**\n   * Returns a Color4 value containing a gray color\n   * @returns a new Color4 object\n   */\n  public static Gray(): Color4 {\n    return new Color4(0.5, 0.5, 0.5, 1.0)\n  }\n  /**\n   * Returns a Color4 value containing a teal color\n   * @returns a new Color4 object\n   */\n  public static Teal(): Color4 {\n    return new Color4(0, 1.0, 1.0, 1.0)\n  }\n  /**\n   * Returns a Color4 value containing a transparent color\n   * @returns a new Color4 object\n   */\n  public static Clear(): Color4 {\n    return new Color4(0, 0, 0, 0)\n  }\n\n  /**\n   * Creates a new Color4 from a Color3 and an alpha value\n   * @param color3 - defines the source Color3 to read from\n   * @param alpha - defines the alpha component (1.0 by default)\n   * @returns a new Color4 object\n   */\n  public static FromColor3(color3: Color3, alpha: number = 1.0): Color4 {\n    return new Color4(color3.r, color3.g, color3.b, alpha)\n  }\n\n  /**\n   * Creates a new Color4 from the starting index element of the given array\n   * @param array - defines the source array to read from\n   * @param offset - defines the offset in the source array\n   * @returns a new Color4 object\n   */\n  public static FromArray(array: ArrayLike<number>, offset: number = 0): Color4 {\n    return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3])\n  }\n\n  /**\n   * Creates a new Color3 from integer values (less than 256)\n   * @param r - defines the red component to read from (value between 0 and 255)\n   * @param g - defines the green component to read from (value between 0 and 255)\n   * @param b - defines the blue component to read from (value between 0 and 255)\n   * @param a - defines the alpha component to read from (value between 0 and 255)\n   * @returns a new Color3 object\n   */\n  public static FromInts(r: number, g: number, b: number, a: number): Color4 {\n    return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0)\n  }\n\n  /**\n   * Check the content of a given array and convert it to an array containing RGBA data\n   * If the original array was already containing count * 4 values then it is returned directly\n   * @param colors - defines the array to check\n   * @param count - defines the number of RGBA data to expect\n   * @returns an array containing count * 4 values (RGBA)\n   */\n  public static CheckColors4(colors: number[], count: number): number[] {\n    // Check if color3 was used\n    if (colors.length === count * 3) {\n      let colors4 = []\n      for (let index = 0; index < colors.length; index += 3) {\n        let newIndex = (index / 3) * 4\n        colors4[newIndex] = colors[index]\n        colors4[newIndex + 1] = colors[index + 1]\n        colors4[newIndex + 2] = colors[index + 2]\n        colors4[newIndex + 3] = 1.0\n      }\n\n      return colors4\n    }\n\n    return colors\n  }\n\n  // Operators\n\n  /**\n   * Adds in place the given Color4 values to the current Color4 object\n   * @param right - defines the second operand\n   * @returns the current updated Color4 object\n   */\n  public addInPlace(right: Color4): Color4 {\n    this.r += right.r\n    this.g += right.g\n    this.b += right.b\n    this.a += right.a\n    return this\n  }\n\n  /**\n   * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n   * @returns the new array\n   */\n  public asArray(): number[] {\n    let result = new Array<number>()\n    this.toArray(result, 0)\n    return result\n  }\n\n  /**\n   * Stores from the starting index in the given array the Color4 successive values\n   * @param array - defines the array where to store the r,g,b components\n   * @param index - defines an optional index in the target array to define where to start storing values\n   * @returns the current Color4 object\n   */\n  public toArray(array: number[], index: number = 0): Color4 {\n    array[index] = this.r\n    array[index + 1] = this.g\n    array[index + 2] = this.b\n    array[index + 3] = this.a\n    return this\n  }\n\n  /**\n   * Creates a new Color4 set with the added values of the current Color4 and of the given one\n   * @param right - defines the second operand\n   * @returns a new Color4 object\n   */\n  public add(right: Color4): Color4 {\n    return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a)\n  }\n\n  /**\n   * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n   * @param right - defines the second operand\n   * @returns a new Color4 object\n   */\n  public subtract(right: Color4): Color4 {\n    return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a)\n  }\n\n  /**\n   * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n   * @param right - defines the second operand\n   * @param result - defines the Color4 object where to store the result\n   * @returns the current Color4 object\n   */\n  public subtractToRef(right: Color4, result: Color4): Color4 {\n    result.r = this.r - right.r\n    result.g = this.g - right.g\n    result.b = this.b - right.b\n    result.a = this.a - right.a\n    return this\n  }\n\n  /**\n   * Creates a new Color4 with the current Color4 values multiplied by scale\n   * @param scale - defines the scaling factor to apply\n   * @returns a new Color4 object\n   */\n  public scale(scale: number): Color4 {\n    return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale)\n  }\n\n  /**\n   * Multiplies the current Color4 values by scale and stores the result in \"result\"\n   * @param scale - defines the scaling factor to apply\n   * @param result - defines the Color4 object where to store the result\n   * @returns the current unmodified Color4\n   */\n  public scaleToRef(scale: number, result: Color4): Color4 {\n    result.r = this.r * scale\n    result.g = this.g * scale\n    result.b = this.b * scale\n    result.a = this.a * scale\n    return this\n  }\n\n  /**\n   * Scale the current Color4 values by a factor and add the result to a given Color4\n   * @param scale - defines the scale factor\n   * @param result - defines the Color4 object where to store the result\n   * @returns the unmodified current Color4\n   */\n  public scaleAndAddToRef(scale: number, result: Color4): Color4 {\n    result.r += this.r * scale\n    result.g += this.g * scale\n    result.b += this.b * scale\n    result.a += this.a * scale\n    return this\n  }\n\n  /**\n   * Clamps the rgb values by the min and max values and stores the result into \"result\"\n   * @param min - defines minimum clamping value (default is 0)\n   * @param max - defines maximum clamping value (default is 1)\n   * @param result - defines color to store the result into.\n   * @returns the cuurent Color4\n   */\n  public clampToRef(min: number = 0, max: number = 1, result: Color4): Color4 {\n    result.r = Scalar.Clamp(this.r, min, max)\n    result.g = Scalar.Clamp(this.g, min, max)\n    result.b = Scalar.Clamp(this.b, min, max)\n    result.a = Scalar.Clamp(this.a, min, max)\n    return this\n  }\n\n  /**\n   * Multipy an Color4 value by another and return a new Color4 object\n   * @param color - defines the Color4 value to multiply by\n   * @returns a new Color4 object\n   */\n  public multiply(color: Color4): Color4 {\n    return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a)\n  }\n\n  /**\n   * Multipy a Color4 value by another and push the result in a reference value\n   * @param color - defines the Color4 value to multiply by\n   * @param result - defines the Color4 to fill the result in\n   * @returns the result Color4\n   */\n  public multiplyToRef(color: Color4, result: Color4): Color4 {\n    result.r = this.r * color.r\n    result.g = this.g * color.g\n    result.b = this.b * color.b\n    result.a = this.a * color.a\n    return result\n  }\n\n  /**\n   * Creates a string with the Color4 current values\n   * @returns the string representation of the Color4 object\n   */\n  public toString(): string {\n    return '{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + ' A:' + this.a + '}'\n  }\n\n  /**\n   * Returns the string \"Color4\"\n   * @returns \"Color4\"\n   */\n  public getClassName(): string {\n    return 'Color4'\n  }\n\n  /**\n   * Compute the Color4 hash code\n   * @returns an unique number that can be used to hash Color4 objects\n   */\n  public getHashCode(): number {\n    let hash = this.r || 0\n    hash = (hash * 397) ^ (this.g || 0)\n    hash = (hash * 397) ^ (this.b || 0)\n    hash = (hash * 397) ^ (this.a || 0)\n    return hash\n  }\n\n  /**\n   * Creates a new Color4 copied from the current one\n   * @returns a new Color4 object\n   */\n  public clone(): Color4 {\n    return new Color4(this.r, this.g, this.b, this.a)\n  }\n\n  /**\n   * Copies the given Color4 values into the current one\n   * @param source - defines the source Color4 object\n   * @returns the current updated Color4 object\n   */\n  public copyFrom(source: Color4): Color4 {\n    this.r = source.r\n    this.g = source.g\n    this.b = source.b\n    this.a = source.a\n    return this\n  }\n\n  /**\n   * Copies the given float values into the current one\n   * @param r - defines the red component to read from\n   * @param g - defines the green component to read from\n   * @param b - defines the blue component to read from\n   * @param a - defines the alpha component to read from\n   * @returns the current updated Color4 object\n   */\n  public copyFromFloats(r: number, g: number, b: number, a: number): Color4 {\n    this.r = r\n    this.g = g\n    this.b = b\n    this.a = a\n    return this\n  }\n\n  /**\n   * Copies the given float values into the current one\n   * @param r - defines the red component to read from\n   * @param g - defines the green component to read from\n   * @param b - defines the blue component to read from\n   * @param a - defines the alpha component to read from\n   * @returns the current updated Color4 object\n   */\n  public set(r: number, g: number, b: number, a: number): Color4 {\n    return this.copyFromFloats(r, g, b, a)\n  }\n\n  /**\n   * Compute the Color4 hexadecimal code as a string\n   * @returns a string containing the hexadecimal representation of the Color4 object\n   */\n  public toHexString(): string {\n    let intR = (this.r * 255) | 0\n    let intG = (this.g * 255) | 0\n    let intB = (this.b * 255) | 0\n    let intA = (this.a * 255) | 0\n    return '#' + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB) + Scalar.ToHex(intA)\n  }\n\n  /**\n   * Computes a new Color4 converted from the current one to linear space\n   * @returns a new Color4 object\n   */\n  public toLinearSpace(): Color4 {\n    let convertedColor = new Color4()\n    this.toLinearSpaceToRef(convertedColor)\n    return convertedColor\n  }\n\n  /**\n   * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n   * @param convertedColor - defines the Color4 object where to store the linear space version\n   * @returns the unmodified Color4\n   */\n  public toLinearSpaceToRef(convertedColor: Color4): Color4 {\n    convertedColor.r = Math.pow(this.r, ToLinearSpace)\n    convertedColor.g = Math.pow(this.g, ToLinearSpace)\n    convertedColor.b = Math.pow(this.b, ToLinearSpace)\n    convertedColor.a = this.a\n    return this\n  }\n\n  /**\n   * Computes a new Color4 converted from the current one to gamma space\n   * @returns a new Color4 object\n   */\n  public toGammaSpace(): Color4 {\n    let convertedColor = new Color4()\n    this.toGammaSpaceToRef(convertedColor)\n    return convertedColor\n  }\n\n  /**\n   * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n   * @param convertedColor - defines the Color4 object where to store the gamma space version\n   * @returns the unmodified Color4\n   */\n  public toGammaSpaceToRef(convertedColor: Color4): Color4 {\n    convertedColor.r = Math.pow(this.r, ToGammaSpace)\n    convertedColor.g = Math.pow(this.g, ToGammaSpace)\n    convertedColor.b = Math.pow(this.b, ToGammaSpace)\n    convertedColor.a = this.a\n    return this\n  }\n}\n","import { FloatArray, ToLinearSpace, ToGammaSpace } from './types'\n\nimport { Color4 } from './Color4'\n\nimport { Scalar } from './Scalar'\n\n/**\n * Class used to hold a RBG color\n * @public\n */\nexport class Color3 {\n  /**\n   * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n   * @param r - defines the red component (between 0 and 1, default is 0)\n   * @param g - defines the green component (between 0 and 1, default is 0)\n   * @param b - defines the blue component (between 0 and 1, default is 0)\n   */\n  constructor(\n    /**\n     * Defines the red component (between 0 and 1, default is 0)\n     */\n    public r: number = 0,\n    /**\n     * Defines the green component (between 0 and 1, default is 0)\n     */\n    public g: number = 0,\n    /**\n     * Defines the blue component (between 0 and 1, default is 0)\n     */\n    public b: number = 0\n  ) {}\n\n  // Statics\n\n  /**\n   * Creates a new Color3 from the string containing valid hexadecimal values\n   * @param hex - defines a string containing valid hexadecimal values\n   * @returns a new Color3 object\n   */\n  public static FromHexString(hex: string): Color3 {\n    if (hex.substring(0, 1) !== '#' || hex.length !== 7) {\n      return new Color3(0, 0, 0)\n    }\n\n    let r = parseInt(hex.substring(1, 3), 16)\n    let g = parseInt(hex.substring(3, 5), 16)\n    let b = parseInt(hex.substring(5, 7), 16)\n\n    return Color3.FromInts(r, g, b)\n  }\n\n  /**\n   * Creates a new Vector3 from the starting index of the given array\n   * @param array - defines the source array\n   * @param offset - defines an offset in the source array\n   * @returns a new Color3 object\n   */\n  public static FromArray(array: ArrayLike<number>, offset: number = 0): Color3 {\n    return new Color3(array[offset], array[offset + 1], array[offset + 2])\n  }\n\n  /**\n   * Creates a new Color3 from integer values (less than 256)\n   * @param r - defines the red component to read from (value between 0 and 255)\n   * @param g - defines the green component to read from (value between 0 and 255)\n   * @param b - defines the blue component to read from (value between 0 and 255)\n   * @returns a new Color3 object\n   */\n  public static FromInts(r: number, g: number, b: number): Color3 {\n    return new Color3(r / 255.0, g / 255.0, b / 255.0)\n  }\n\n  /**\n   * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n   * @param start - defines the start Color3 value\n   * @param end - defines the end Color3 value\n   * @param amount - defines the gradient value between start and end\n   * @returns a new Color3 object\n   */\n  public static Lerp(start: Color3, end: Color3, amount: number): Color3 {\n    let result = new Color3(0.0, 0.0, 0.0)\n    Color3.LerpToRef(start, end, amount, result)\n    return result\n  }\n\n  /**\n   * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n   * @param left - defines the start value\n   * @param right - defines the end value\n   * @param amount - defines the gradient factor\n   * @param result - defines the Color3 object where to store the result\n   */\n  public static LerpToRef(left: Color3, right: Color3, amount: number, result: Color3): void {\n    result.r = left.r + (right.r - left.r) * amount\n    result.g = left.g + (right.g - left.g) * amount\n    result.b = left.b + (right.b - left.b) * amount\n  }\n\n  /**\n   * Returns a Color3 value containing a red color\n   * @returns a new Color3 object\n   */\n  public static Red(): Color3 {\n    return new Color3(1, 0, 0)\n  }\n  /**\n   * Returns a Color3 value containing a green color\n   * @returns a new Color3 object\n   */\n  public static Green(): Color3 {\n    return new Color3(0, 1, 0)\n  }\n  /**\n   * Returns a Color3 value containing a blue color\n   * @returns a new Color3 object\n   */\n  public static Blue(): Color3 {\n    return new Color3(0, 0, 1)\n  }\n  /**\n   * Returns a Color3 value containing a black color\n   * @returns a new Color3 object\n   */\n  public static Black(): Color3 {\n    return new Color3(0, 0, 0)\n  }\n  /**\n   * Returns a Color3 value containing a white color\n   * @returns a new Color3 object\n   */\n  public static White(): Color3 {\n    return new Color3(1, 1, 1)\n  }\n  /**\n   * Returns a Color3 value containing a purple color\n   * @returns a new Color3 object\n   */\n  public static Purple(): Color3 {\n    return new Color3(0.5, 0, 0.5)\n  }\n  /**\n   * Returns a Color3 value containing a magenta color\n   * @returns a new Color3 object\n   */\n  public static Magenta(): Color3 {\n    return new Color3(1, 0, 1)\n  }\n  /**\n   * Returns a Color3 value containing a yellow color\n   * @returns a new Color3 object\n   */\n  public static Yellow(): Color3 {\n    return new Color3(1, 1, 0)\n  }\n  /**\n   * Returns a Color3 value containing a gray color\n   * @returns a new Color3 object\n   */\n  public static Gray(): Color3 {\n    return new Color3(0.5, 0.5, 0.5)\n  }\n  /**\n   * Returns a Color3 value containing a teal color\n   * @returns a new Color3 object\n   */\n  public static Teal(): Color3 {\n    return new Color3(0, 1.0, 1.0)\n  }\n  /**\n   * Returns a Color3 value containing a random color\n   * @returns a new Color3 object\n   */\n  public static Random(): Color3 {\n    return new Color3(Math.random(), Math.random(), Math.random())\n  }\n\n  /**\n   * Creates a string with the Color3 current values\n   * @returns the string representation of the Color3 object\n   */\n  public toString(): string {\n    return '{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + '}'\n  }\n\n  /**\n   * Returns the string \"Color3\"\n   * @returns \"Color3\"\n   */\n  public getClassName(): string {\n    return 'Color3'\n  }\n\n  /**\n   * Compute the Color3 hash code\n   * @returns an unique number that can be used to hash Color3 objects\n   */\n  public getHashCode(): number {\n    let hash = this.r || 0\n    hash = (hash * 397) ^ (this.g || 0)\n    hash = (hash * 397) ^ (this.b || 0)\n    return hash\n  }\n\n  // Operators\n\n  /**\n   * Stores in the given array from the given starting index the red, green, blue values as successive elements\n   * @param array - defines the array where to store the r,g,b components\n   * @param index - defines an optional index in the target array to define where to start storing values\n   * @returns the current Color3 object\n   */\n  public toArray(array: FloatArray, index: number = 0): Color3 {\n    array[index] = this.r\n    array[index + 1] = this.g\n    array[index + 2] = this.b\n\n    return this\n  }\n\n  /**\n   * Returns a new Color4 object from the current Color3 and the given alpha\n   * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n   * @returns a new Color4 object\n   */\n  public toColor4(alpha: number = 1): Color4 {\n    return new Color4(this.r, this.g, this.b, alpha)\n  }\n\n  /**\n   * Returns a new array populated with 3 numeric elements : red, green and blue values\n   * @returns the new array\n   */\n  public asArray(): number[] {\n    let result = new Array<number>()\n    this.toArray(result, 0)\n    return result\n  }\n\n  /**\n   * Returns the luminance value\n   * @returns a float value\n   */\n  public toLuminance(): number {\n    return this.r * 0.3 + this.g * 0.59 + this.b * 0.11\n  }\n\n  /**\n   * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n   * @param otherColor - defines the second operand\n   * @returns the new Color3 object\n   */\n  public multiply(otherColor: Color3): Color3 {\n    return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b)\n  }\n\n  /**\n   * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n   * @param otherColor - defines the second operand\n   * @param result - defines the Color3 object where to store the result\n   * @returns the current Color3\n   */\n  public multiplyToRef(otherColor: Color3, result: Color3): Color3 {\n    result.r = this.r * otherColor.r\n    result.g = this.g * otherColor.g\n    result.b = this.b * otherColor.b\n    return this\n  }\n\n  /**\n   * Determines equality between Color3 objects\n   * @param otherColor - defines the second operand\n   * @returns true if the rgb values are equal to the given ones\n   */\n  public equals(otherColor: Color3): boolean {\n    return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b\n  }\n\n  /**\n   * Determines equality between the current Color3 object and a set of r,b,g values\n   * @param r - defines the red component to check\n   * @param g - defines the green component to check\n   * @param b - defines the blue component to check\n   * @returns true if the rgb values are equal to the given ones\n   */\n  public equalsFloats(r: number, g: number, b: number): boolean {\n    return this.r === r && this.g === g && this.b === b\n  }\n\n  /**\n   * Multiplies in place each rgb value by scale\n   * @param scale - defines the scaling factor\n   * @returns the updated Color3\n   */\n  public scale(scale: number): Color3 {\n    return new Color3(this.r * scale, this.g * scale, this.b * scale)\n  }\n\n  /**\n   * Multiplies the rgb values by scale and stores the result into \"result\"\n   * @param scale - defines the scaling factor\n   * @param result - defines the Color3 object where to store the result\n   * @returns the unmodified current Color3\n   */\n  public scaleToRef(scale: number, result: Color3): Color3 {\n    result.r = this.r * scale\n    result.g = this.g * scale\n    result.b = this.b * scale\n    return this\n  }\n\n  /**\n   * Scale the current Color3 values by a factor and add the result to a given Color3\n   * @param scale - defines the scale factor\n   * @param result - defines color to store the result into\n   * @returns the unmodified current Color3\n   */\n  public scaleAndAddToRef(scale: number, result: Color3): Color3 {\n    result.r += this.r * scale\n    result.g += this.g * scale\n    result.b += this.b * scale\n    return this\n  }\n\n  /**\n   * Clamps the rgb values by the min and max values and stores the result into \"result\"\n   * @param min - defines minimum clamping value (default is 0)\n   * @param max - defines maximum clamping value (default is 1)\n   * @param result - defines color to store the result into\n   * @returns the original Color3\n   */\n  public clampToRef(min: number = 0, max: number = 1, result: Color3): Color3 {\n    result.r = Scalar.Clamp(this.r, min, max)\n    result.g = Scalar.Clamp(this.g, min, max)\n    result.b = Scalar.Clamp(this.b, min, max)\n    return this\n  }\n\n  /**\n   * Creates a new Color3 set with the added values of the current Color3 and of the given one\n   * @param otherColor - defines the second operand\n   * @returns the new Color3\n   */\n  public add(otherColor: Color3): Color3 {\n    return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b)\n  }\n\n  /**\n   * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n   * @param otherColor - defines the second operand\n   * @param result - defines Color3 object to store the result into\n   * @returns the unmodified current Color3\n   */\n  public addToRef(otherColor: Color3, result: Color3): Color3 {\n    result.r = this.r + otherColor.r\n    result.g = this.g + otherColor.g\n    result.b = this.b + otherColor.b\n    return this\n  }\n\n  /**\n   * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n   * @param otherColor - defines the second operand\n   * @returns the new Color3\n   */\n  public subtract(otherColor: Color3): Color3 {\n    return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b)\n  }\n\n  /**\n   * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n   * @param otherColor - defines the second operand\n   * @param result - defines Color3 object to store the result into\n   * @returns the unmodified current Color3\n   */\n  public subtractToRef(otherColor: Color3, result: Color3): Color3 {\n    result.r = this.r - otherColor.r\n    result.g = this.g - otherColor.g\n    result.b = this.b - otherColor.b\n    return this\n  }\n\n  /**\n   * Copy the current object\n   * @returns a new Color3 copied the current one\n   */\n  public clone(): Color3 {\n    return new Color3(this.r, this.g, this.b)\n  }\n\n  /**\n   * Copies the rgb values from the source in the current Color3\n   * @param source - defines the source Color3 object\n   * @returns the updated Color3 object\n   */\n  public copyFrom(source: Color3): Color3 {\n    this.r = source.r\n    this.g = source.g\n    this.b = source.b\n    return this\n  }\n\n  /**\n   * Updates the Color3 rgb values from the given floats\n   * @param r - defines the red component to read from\n   * @param g - defines the green component to read from\n   * @param b - defines the blue component to read from\n   * @returns the current Color3 object\n   */\n  public copyFromFloats(r: number, g: number, b: number): Color3 {\n    this.r = r\n    this.g = g\n    this.b = b\n    return this\n  }\n\n  /**\n   * Updates the Color3 rgb values from the given floats\n   * @param r - defines the red component to read from\n   * @param g - defines the green component to read from\n   * @param b - defines the blue component to read from\n   * @returns the current Color3 object\n   */\n  public set(r: number, g: number, b: number): Color3 {\n    return this.copyFromFloats(r, g, b)\n  }\n\n  /**\n   * Compute the Color3 hexadecimal code as a string\n   * @returns a string containing the hexadecimal representation of the Color3 object\n   */\n  public toHexString(): string {\n    let intR = (this.r * 255) | 0\n    let intG = (this.g * 255) | 0\n    let intB = (this.b * 255) | 0\n    return '#' + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB)\n  }\n\n  /**\n   * Computes a new Color3 converted from the current one to linear space\n   * @returns a new Color3 object\n   */\n  public toLinearSpace(): Color3 {\n    let convertedColor = new Color3()\n    this.toLinearSpaceToRef(convertedColor)\n    return convertedColor\n  }\n\n  /**\n   * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n   * @param convertedColor - defines the Color3 object where to store the linear space version\n   * @returns the unmodified Color3\n   */\n  public toLinearSpaceToRef(convertedColor: Color3): Color3 {\n    convertedColor.r = Math.pow(this.r, ToLinearSpace)\n    convertedColor.g = Math.pow(this.g, ToLinearSpace)\n    convertedColor.b = Math.pow(this.b, ToLinearSpace)\n    return this\n  }\n\n  /**\n   * Computes a new Color3 converted from the current one to gamma space\n   * @returns a new Color3 object\n   */\n  public toGammaSpace(): Color3 {\n    let convertedColor = new Color3()\n    this.toGammaSpaceToRef(convertedColor)\n    return convertedColor\n  }\n\n  /**\n   * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n   * @param convertedColor - defines the Color3 object where to store the gamma space version\n   * @returns the unmodified Color3\n   */\n  public toGammaSpaceToRef(convertedColor: Color3): Color3 {\n    convertedColor.r = Math.pow(this.r, ToGammaSpace)\n    convertedColor.g = Math.pow(this.g, ToGammaSpace)\n    convertedColor.b = Math.pow(this.b, ToGammaSpace)\n    return this\n  }\n\n  /**\n   * Serializes Color3\n   */\n  public toJSON() {\n    return {\n      r: this.r,\n      g: this.g,\n      b: this.b\n    }\n  }\n}\n","import { Vector3 } from './Vector3'\n\n/**\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n * A Curve3 is designed from a series of successive Vector3.\n * {@link https://doc.babylonjs.com/how_to/how_to_use_curve3 }\n * @public\n */\nexport class Curve3 {\n  private _points: Vector3[]\n  private _length: number = 0.0\n\n  /**\n   * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n   * A Curve3 is designed from a series of successive Vector3.\n   * {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial }\n   * @param points - points which make up the curve\n   */\n  constructor(points: Vector3[]) {\n    this._points = points\n    this._length = this._computeLength(points)\n  }\n\n  /**\n   * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\n   * @param v0 - (Vector3) the origin point of the Quadratic Bezier\n   * @param v1 - (Vector3) the control point\n   * @param v2 - (Vector3) the end point of the Quadratic Bezier\n   * @param nbPoints - (integer) the wanted number of points in the curve\n   * @returns the created Curve3\n   */\n  public static CreateQuadraticBezier(v0: Vector3, v1: Vector3, v2: Vector3, nbPoints: number): Curve3 {\n    // tslint:disable-next-line:no-parameter-reassignment\n    nbPoints = nbPoints > 2 ? nbPoints : 3\n    let bez = new Array<Vector3>()\n    let equation = (t: number, val0: number, val1: number, val2: number) => {\n      let res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2\n      return res\n    }\n    for (let i = 0; i <= nbPoints; i++) {\n      bez.push(\n        new Vector3(\n          equation(i / nbPoints, v0.x, v1.x, v2.x),\n          equation(i / nbPoints, v0.y, v1.y, v2.y),\n          equation(i / nbPoints, v0.z, v1.z, v2.z)\n        )\n      )\n    }\n    return new Curve3(bez)\n  }\n\n  /**\n   * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\n   * @param v0 - (Vector3) the origin point of the Cubic Bezier\n   * @param v1 - (Vector3) the first control point\n   * @param v2 - (Vector3) the second control point\n   * @param v3 - (Vector3) the end point of the Cubic Bezier\n   * @param nbPoints - (integer) the wanted number of points in the curve\n   * @returns the created Curve3\n   */\n  public static CreateCubicBezier(v0: Vector3, v1: Vector3, v2: Vector3, v3: Vector3, nbPoints: number): Curve3 {\n    // tslint:disable-next-line:no-parameter-reassignment\n    nbPoints = nbPoints > 3 ? nbPoints : 4\n    let bez = new Array<Vector3>()\n    let equation = (t: number, val0: number, val1: number, val2: number, val3: number) => {\n      let res =\n        (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 +\n        3.0 * t * (1.0 - t) * (1.0 - t) * val1 +\n        3.0 * t * t * (1.0 - t) * val2 +\n        t * t * t * val3\n      return res\n    }\n    for (let i = 0; i <= nbPoints; i++) {\n      bez.push(\n        new Vector3(\n          equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x),\n          equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y),\n          equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)\n        )\n      )\n    }\n    return new Curve3(bez)\n  }\n\n  /**\n   * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\n   * @param p1 - (Vector3) the origin point of the Hermite Spline\n   * @param t1 - (Vector3) the tangent vector at the origin point\n   * @param p2 - (Vector3) the end point of the Hermite Spline\n   * @param t2 - (Vector3) the tangent vector at the end point\n   * @param nbPoints - (integer) the wanted number of points in the curve\n   * @returns the created Curve3\n   */\n  public static CreateHermiteSpline(p1: Vector3, t1: Vector3, p2: Vector3, t2: Vector3, nbPoints: number): Curve3 {\n    let hermite = new Array<Vector3>()\n    let step = 1.0 / nbPoints\n    for (let i = 0; i <= nbPoints; i++) {\n      hermite.push(Vector3.Hermite(p1, t1, p2, t2, i * step))\n    }\n    return new Curve3(hermite)\n  }\n\n  /**\n   * Returns a Curve3 object along a CatmullRom Spline curve :\n   * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\n   * @param nbPoints - (integer) the wanted number of points between each curve control points\n   * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\n   * @returns the created Curve3\n   */\n  public static CreateCatmullRomSpline(points: Vector3[], nbPoints: number, closed?: boolean): Curve3 {\n    let catmullRom = new Array<Vector3>()\n    let step = 1.0 / nbPoints\n    let amount = 0.0\n    if (closed) {\n      let pointsCount = points.length\n      for (let i = 0; i < pointsCount; i++) {\n        amount = 0\n        for (let c = 0; c < nbPoints; c++) {\n          catmullRom.push(\n            Vector3.CatmullRom(\n              points[i % pointsCount],\n              points[(i + 1) % pointsCount],\n              points[(i + 2) % pointsCount],\n              points[(i + 3) % pointsCount],\n              amount\n            )\n          )\n          amount += step\n        }\n      }\n      catmullRom.push(catmullRom[0])\n    } else {\n      let totalPoints = new Array<Vector3>()\n      totalPoints.push(points[0].clone())\n      Array.prototype.push.apply(totalPoints, points)\n      totalPoints.push(points[points.length - 1].clone())\n      let i = 0\n      for (i = 0; i < totalPoints.length - 3; i++) {\n        amount = 0\n        for (let c = 0; c < nbPoints; c++) {\n          catmullRom.push(\n            Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount)\n          )\n          amount += step\n        }\n      }\n      i--\n      catmullRom.push(\n        Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount)\n      )\n    }\n    return new Curve3(catmullRom)\n  }\n\n  /**\n   * @returns the Curve3 stored array of successive Vector3\n   */\n  public getPoints() {\n    return this._points\n  }\n\n  /**\n   * @returns the computed length (float) of the curve.\n   */\n  public length() {\n    return this._length\n  }\n\n  /**\n   * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\n   * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\n   * curveA and curveB keep unchanged.\n   * @param curve - the curve to continue from this curve\n   * @returns the newly constructed curve\n   */\n  public continue(curve: Curve3): Curve3 {\n    let lastPoint = this._points[this._points.length - 1]\n    let continuedPoints = this._points.slice()\n    let curvePoints = curve.getPoints()\n    for (let i = 1; i < curvePoints.length; i++) {\n      continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint))\n    }\n    let continuedCurve = new Curve3(continuedPoints)\n    return continuedCurve\n  }\n\n  private _computeLength(path: Vector3[]): number {\n    let l = 0\n    for (let i = 1; i < path.length; i++) {\n      l += path[i].subtract(path[i - 1]).length()\n    }\n    return l\n  }\n}\n","import { Vector3 } from './Vector3'\nimport { Matrix } from './Matrix'\nimport { MathTmp } from './preallocatedVariables'\n\n/**\n * Represens a plane by the equation ax + by + cz + d = 0\n * @public\n */\nexport class Plane {\n  /**\n   * Normal of the plane (a,b,c)\n   */\n  public normal: Vector3\n  /**\n   * d component of the plane\n   */\n  public d: number\n  /**\n   * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n   * @param a - a component of the plane\n   * @param b - b component of the plane\n   * @param c - c component of the plane\n   * @param d - d component of the plane\n   */\n  constructor(a: number, b: number, c: number, d: number) {\n    this.normal = new Vector3(a, b, c)\n    this.d = d\n  }\n\n  // Statics\n  /**\n   * Creates a plane from an  array\n   * @param array - the array to create a plane from\n   * @returns a new Plane from the given array.\n   */\n  static FromArray(array: ArrayLike<number>): Plane {\n    return new Plane(array[0], array[1], array[2], array[3])\n  }\n  /**\n   * Creates a plane from three points\n   * @param point1 - point used to create the plane\n   * @param point2 - point used to create the plane\n   * @param point3 - point used to create the plane\n   * @returns a new Plane defined by the three given points.\n   */\n  static FromPoints(point1: Vector3, point2: Vector3, point3: Vector3): Plane {\n    let result = new Plane(0.0, 0.0, 0.0, 0.0)\n    result.copyFromPoints(point1, point2, point3)\n    return result\n  }\n  /**\n   * Creates a plane from an origin point and a normal\n   * @param origin - origin of the plane to be constructed\n   * @param normal - normal of the plane to be constructed\n   * @returns a new Plane the normal vector to this plane at the given origin point.\n   * Note : the vector \"normal\" is updated because normalized.\n   */\n  static FromPositionAndNormal(origin: Vector3, normal: Vector3): Plane {\n    let result = new Plane(0.0, 0.0, 0.0, 0.0)\n    normal.normalize()\n    result.normal = normal\n    result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z)\n    return result\n  }\n\n  /**\n   * Calculates the distance from a plane and a point\n   * @param origin - origin of the plane to be constructed\n   * @param normal - normal of the plane to be constructed\n   * @param point - point to calculate distance to\n   * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\n   */\n  static SignedDistanceToPlaneFromPositionAndNormal(origin: Vector3, normal: Vector3, point: Vector3): number {\n    let d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z)\n    return Vector3.Dot(point, normal) + d\n  }\n\n  /**\n   * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n   */\n  public asArray(): number[] {\n    return [this.normal.x, this.normal.y, this.normal.z, this.d]\n  }\n\n  // Methods\n  /**\n   * @returns a new plane copied from the current Plane.\n   */\n  public clone(): Plane {\n    return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d)\n  }\n  /**\n   * @returns the string \"Plane\".\n   */\n  public getClassName(): string {\n    return 'Plane'\n  }\n  /**\n   * @returns the Plane hash code.\n   */\n  public getHashCode(): number {\n    let hash = this.normal.getHashCode()\n    hash = (hash * 397) ^ (this.d || 0)\n    return hash\n  }\n  /**\n   * Normalize the current Plane in place.\n   * @returns the updated Plane.\n   */\n  public normalize(): Plane {\n    let norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z)\n    let magnitude = 0.0\n\n    if (norm !== 0) {\n      magnitude = 1.0 / norm\n    }\n    this.normal.x *= magnitude\n    this.normal.y *= magnitude\n    this.normal.z *= magnitude\n    this.d *= magnitude\n    return this\n  }\n  /**\n   * Applies a transformation the plane and returns the result\n   * @param transformation - the transformation matrix to be applied to the plane\n   * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n   */\n  public transform(transformation: Matrix): Plane {\n    const transposedMatrix = MathTmp.Matrix[0]\n    Matrix.TransposeToRef(transformation, transposedMatrix)\n    const m = transposedMatrix.m\n    let x = this.normal.x\n    let y = this.normal.y\n    let z = this.normal.z\n    let d = this.d\n\n    let normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3]\n    let normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7]\n    let normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11]\n    let finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15]\n\n    return new Plane(normalX, normalY, normalZ, finalD)\n  }\n\n  /**\n   * Calcualtte the dot product between the point and the plane normal\n   * @param point - point to calculate the dot product with\n   * @returns the dot product (float) of the point coordinates and the plane normal.\n   */\n  public dotCoordinate(point: Vector3): number {\n    return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d\n  }\n\n  /**\n   * Updates the current Plane from the plane defined by the three given points.\n   * @param point1 - one of the points used to contruct the plane\n   * @param point2 - one of the points used to contruct the plane\n   * @param point3 - one of the points used to contruct the plane\n   * @returns the updated Plane.\n   */\n  public copyFromPoints(point1: Vector3, point2: Vector3, point3: Vector3): Plane {\n    let x1 = point2.x - point1.x\n    let y1 = point2.y - point1.y\n    let z1 = point2.z - point1.z\n    let x2 = point3.x - point1.x\n    let y2 = point3.y - point1.y\n    let z2 = point3.z - point1.z\n    let yz = y1 * z2 - z1 * y2\n    let xz = z1 * x2 - x1 * z2\n    let xy = x1 * y2 - y1 * x2\n    let pyth = Math.sqrt(yz * yz + xz * xz + xy * xy)\n    let invPyth\n\n    if (pyth !== 0) {\n      invPyth = 1.0 / pyth\n    } else {\n      invPyth = 0.0\n    }\n\n    this.normal.x = yz * invPyth\n    this.normal.y = xz * invPyth\n    this.normal.z = xy * invPyth\n    this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z)\n\n    return this\n  }\n\n  /**\n   * Checks if the plane is facing a given direction\n   * @param direction - the direction to check if the plane is facing\n   * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n   * @returns True is the vector \"direction\"  is the same side than the plane normal.\n   */\n  public isFrontFacingTo(direction: Vector3, epsilon: number): boolean {\n    let dot = Vector3.Dot(this.normal, direction)\n    return dot <= epsilon\n  }\n\n  /**\n   * Calculates the distance to a point\n   * @param point - point to calculate distance to\n   * @returns the signed distance (float) from the given point to the Plane.\n   */\n  public signedDistanceTo(point: Vector3): number {\n    return Vector3.Dot(point, this.normal) + this.d\n  }\n}\n","import { Matrix } from './Matrix'\n\nimport { Plane } from './Plane'\n\n/**\n * Reprasents a camera frustum\n * @public\n */\nexport class Frustum {\n  /**\n   * Gets the planes representing the frustum\n   * @param transform - matrix to be applied to the returned planes\n   * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n   */\n  public static GetPlanes(transform: Matrix): Plane[] {\n    let frustumPlanes = []\n    for (let index = 0; index < 6; index++) {\n      frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0))\n    }\n    Frustum.GetPlanesToRef(transform, frustumPlanes)\n    return frustumPlanes\n  }\n\n  /**\n   * Gets the near frustum plane transformed by the transform matrix\n   * @param transform - transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane - the resuling frustum plane\n   */\n  public static GetNearPlaneToRef(transform: Matrix, frustumPlane: Plane): void {\n    const m = transform.m\n    frustumPlane.normal.x = m[3] + m[2]\n    frustumPlane.normal.y = m[7] + m[6]\n    frustumPlane.normal.z = m[11] + m[10]\n    frustumPlane.d = m[15] + m[14]\n    frustumPlane.normalize()\n  }\n\n  /**\n   * Gets the far frustum plane transformed by the transform matrix\n   * @param transform - transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane - the resuling frustum plane\n   */\n  public static GetFarPlaneToRef(transform: Matrix, frustumPlane: Plane): void {\n    const m = transform.m\n    frustumPlane.normal.x = m[3] - m[2]\n    frustumPlane.normal.y = m[7] - m[6]\n    frustumPlane.normal.z = m[11] - m[10]\n    frustumPlane.d = m[15] - m[14]\n    frustumPlane.normalize()\n  }\n\n  /**\n   * Gets the left frustum plane transformed by the transform matrix\n   * @param transform - transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane - the resuling frustum plane\n   */\n  public static GetLeftPlaneToRef(transform: Matrix, frustumPlane: Plane): void {\n    const m = transform.m\n    frustumPlane.normal.x = m[3] + m[0]\n    frustumPlane.normal.y = m[7] + m[4]\n    frustumPlane.normal.z = m[11] + m[8]\n    frustumPlane.d = m[15] + m[12]\n    frustumPlane.normalize()\n  }\n\n  /**\n   * Gets the right frustum plane transformed by the transform matrix\n   * @param transform - transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane - the resuling frustum plane\n   */\n  public static GetRightPlaneToRef(transform: Matrix, frustumPlane: Plane): void {\n    const m = transform.m\n    frustumPlane.normal.x = m[3] - m[0]\n    frustumPlane.normal.y = m[7] - m[4]\n    frustumPlane.normal.z = m[11] - m[8]\n    frustumPlane.d = m[15] - m[12]\n    frustumPlane.normalize()\n  }\n\n  /**\n   * Gets the top frustum plane transformed by the transform matrix\n   * @param transform - transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane - the resuling frustum plane\n   */\n  public static GetTopPlaneToRef(transform: Matrix, frustumPlane: Plane): void {\n    const m = transform.m\n    frustumPlane.normal.x = m[3] - m[1]\n    frustumPlane.normal.y = m[7] - m[5]\n    frustumPlane.normal.z = m[11] - m[9]\n    frustumPlane.d = m[15] - m[13]\n    frustumPlane.normalize()\n  }\n\n  /**\n   * Gets the bottom frustum plane transformed by the transform matrix\n   * @param transform - transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane - the resuling frustum plane\n   */\n  public static GetBottomPlaneToRef(transform: Matrix, frustumPlane: Plane): void {\n    const m = transform.m\n    frustumPlane.normal.x = m[3] + m[1]\n    frustumPlane.normal.y = m[7] + m[5]\n    frustumPlane.normal.z = m[11] + m[9]\n    frustumPlane.d = m[15] + m[13]\n    frustumPlane.normalize()\n  }\n\n  /**\n   * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\n   * @param transform - transformation matrix to be applied to the resulting frustum planes\n   * @param frustumPlanes - the resuling frustum planes\n   */\n  public static GetPlanesToRef(transform: Matrix, frustumPlanes: Plane[]): void {\n    // Near\n    Frustum.GetNearPlaneToRef(transform, frustumPlanes[0])\n\n    // Far\n    Frustum.GetFarPlaneToRef(transform, frustumPlanes[1])\n\n    // Left\n    Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2])\n\n    // Right\n    Frustum.GetRightPlaneToRef(transform, frustumPlanes[3])\n\n    // Top\n    Frustum.GetTopPlaneToRef(transform, frustumPlanes[4])\n\n    // Bottom\n    Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5])\n  }\n}\n","import { Vector2 } from './Vector2'\nimport { Arc2 } from './Arc2'\nimport { Orientation } from './types'\n\n/**\n * Represents a 2D path made up of multiple 2D points\n * @public\n */\nexport class Path2 {\n  /**\n   * If the path start and end point are the same\n   */\n  public closed = false\n  private _points = new Array<Vector2>()\n  private _length = 0.0\n\n  /**\n   * Creates a Path2 object from the starting 2D coordinates x and y.\n   * @param x - the starting points x value\n   * @param y - the starting points y value\n   */\n  constructor(x: number, y: number) {\n    this._points.push(new Vector2(x, y))\n  }\n\n  /**\n   * Creates a new path starting from an x and y position\n   * @param x - starting x value\n   * @param y - starting y value\n   * @returns a new Path2 starting at the coordinates (x, y).\n   */\n  public static StartingAt(x: number, y: number): Path2 {\n    return new Path2(x, y)\n  }\n\n  /**\n   * Adds a new segment until the given coordinates (x, y) to the current Path2.\n   * @param x - the added points x value\n   * @param y - the added points y value\n   * @returns the updated Path2.\n   */\n  public addLineTo(x: number, y: number): Path2 {\n    if (this.closed) {\n      return this\n    }\n    let newPoint = new Vector2(x, y)\n    let previousPoint = this._points[this._points.length - 1]\n    this._points.push(newPoint)\n    this._length += newPoint.subtract(previousPoint).length()\n    return this\n  }\n\n  /**\n   * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\n   * @param midX - middle point x value\n   * @param midY - middle point y value\n   * @param endX - end point x value\n   * @param endY - end point y value\n   * @param numberOfSegments - (default: 36)\n   * @returns the updated Path2.\n   */\n  public addArcTo(midX: number, midY: number, endX: number, endY: number, numberOfSegments = 36): Path2 {\n    if (this.closed) {\n      return this\n    }\n    let startPoint = this._points[this._points.length - 1]\n    let midPoint = new Vector2(midX, midY)\n    let endPoint = new Vector2(endX, endY)\n\n    let arc = new Arc2(startPoint, midPoint, endPoint)\n\n    let increment = arc.angle.radians() / numberOfSegments\n    if (arc.orientation === Orientation.CW) {\n      increment *= -1\n    }\n    let currentAngle = arc.startAngle.radians() + increment\n\n    for (let i = 0; i < numberOfSegments; i++) {\n      let x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x\n      let y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y\n      this.addLineTo(x, y)\n      currentAngle += increment\n    }\n    return this\n  }\n  /**\n   * Closes the Path2.\n   * @returns the Path2.\n   */\n  public close(): Path2 {\n    this.closed = true\n    return this\n  }\n  /**\n   * Gets the sum of the distance between each sequential point in the path\n   * @returns the Path2 total length (float).\n   */\n  public length(): number {\n    let result = this._length\n\n    if (!this.closed) {\n      let lastPoint = this._points[this._points.length - 1]\n      let firstPoint = this._points[0]\n      result += firstPoint.subtract(lastPoint).length()\n    }\n    return result\n  }\n\n  /**\n   * Gets the points which construct the path\n   * @returns the Path2 internal array of points.\n   */\n  public getPoints(): Vector2[] {\n    return this._points\n  }\n\n  /**\n   * Retreives the point at the distance aways from the starting point\n   * @param normalizedLengthPosition - the length along the path to retreive the point from\n   * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\n   */\n  public getPointAtLengthPosition(normalizedLengthPosition: number): Vector2 {\n    if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\n      return Vector2.Zero()\n    }\n\n    let lengthPosition = normalizedLengthPosition * this.length()\n\n    let previousOffset = 0\n    for (let i = 0; i < this._points.length; i++) {\n      let j = (i + 1) % this._points.length\n\n      let a = this._points[i]\n      let b = this._points[j]\n      let bToA = b.subtract(a)\n\n      let nextOffset = bToA.length() + previousOffset\n      if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\n        let dir = bToA.normalize()\n        let localOffset = lengthPosition - previousOffset\n\n        return new Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset)\n      }\n      previousOffset = nextOffset\n    }\n\n    return Vector2.Zero()\n  }\n}\n","import { Vector3 } from './Vector3'\nimport { Epsilon, Nullable } from './types'\nimport { Scalar } from './Scalar'\n\n/**\n * Represents a 3D path made up of multiple 3D points\n * @public\n */\nexport class Path3D {\n  private _curve = new Array<Vector3>()\n  private _distances = new Array<number>()\n  private _tangents = new Array<Vector3>()\n  private _normals = new Array<Vector3>()\n  private _binormals = new Array<Vector3>()\n  private _raw: boolean\n\n  /**\n   * new Path3D(path, normal, raw)\n   * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\n   * please read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D\n   * @param path - an array of Vector3, the curve axis of the Path3D\n   * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\n   * @param raw - (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\n   */\n  constructor(\n    /**\n     * an array of Vector3, the curve axis of the Path3D\n     */\n    public path: Vector3[],\n    firstNormal: Nullable<Vector3> = null,\n    raw?: boolean\n  ) {\n    for (let p = 0; p < path.length; p++) {\n      this._curve[p] = path[p].clone() // hard copy\n    }\n    this._raw = raw || false\n    this._compute(firstNormal)\n  }\n\n  /**\n   * Returns the Path3D array of successive Vector3 designing its curve.\n   * @returns the Path3D array of successive Vector3 designing its curve.\n   */\n  public getCurve(): Vector3[] {\n    return this._curve\n  }\n\n  /**\n   * Returns an array populated with tangent vectors on each Path3D curve point.\n   * @returns an array populated with tangent vectors on each Path3D curve point.\n   */\n  public getTangents(): Vector3[] {\n    return this._tangents\n  }\n\n  /**\n   * Returns an array populated with normal vectors on each Path3D curve point.\n   * @returns an array populated with normal vectors on each Path3D curve point.\n   */\n  public getNormals(): Vector3[] {\n    return this._normals\n  }\n\n  /**\n   * Returns an array populated with binormal vectors on each Path3D curve point.\n   * @returns an array populated with binormal vectors on each Path3D curve point.\n   */\n  public getBinormals(): Vector3[] {\n    return this._binormals\n  }\n\n  /**\n   * Returns an array populated with distances (float) of the i-th point from the first curve point.\n   * @returns an array populated with distances (float) of the i-th point from the first curve point.\n   */\n  public getDistances(): number[] {\n    return this._distances\n  }\n\n  /**\n   * Forces the Path3D tangent, normal, binormal and distance recomputation.\n   * @param path - path which all values are copied into the curves points\n   * @param firstNormal - which should be projected onto the curve\n   * @returns the same object updated.\n   */\n  public update(path: Vector3[], firstNormal: Nullable<Vector3> = null): Path3D {\n    for (let p = 0; p < path.length; p++) {\n      this._curve[p].x = path[p].x\n      this._curve[p].y = path[p].y\n      this._curve[p].z = path[p].z\n    }\n    this._compute(firstNormal)\n    return this\n  }\n\n  // private function compute() : computes tangents, normals and binormals\n  private _compute(firstNormal: Nullable<Vector3>): void {\n    let l = this._curve.length\n\n    // first and last tangents\n    this._tangents[0] = this._getFirstNonNullVector(0)\n    if (!this._raw) {\n      this._tangents[0].normalize()\n    }\n    this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2])\n    if (!this._raw) {\n      this._tangents[l - 1].normalize()\n    }\n\n    // normals and binormals at first point : arbitrary vector with _normalVector()\n    let tg0 = this._tangents[0]\n    let pp0 = this._normalVector(this._curve[0], tg0, firstNormal)\n    this._normals[0] = pp0\n    if (!this._raw) {\n      this._normals[0].normalize()\n    }\n    this._binormals[0] = Vector3.Cross(tg0, this._normals[0])\n    if (!this._raw) {\n      this._binormals[0].normalize()\n    }\n    this._distances[0] = 0.0\n\n    // normals and binormals : next points\n    let prev: Vector3 // previous vector (segment)\n    let cur: Vector3 // current vector (segment)\n    let curTang: Vector3 // current tangent\n    // previous normal\n    let prevBinor: Vector3 // previous binormal\n\n    for (let i = 1; i < l; i++) {\n      // tangents\n      prev = this._getLastNonNullVector(i)\n      if (i < l - 1) {\n        cur = this._getFirstNonNullVector(i)\n        this._tangents[i] = prev.add(cur)\n        this._tangents[i].normalize()\n      }\n      this._distances[i] = this._distances[i - 1] + prev.length()\n\n      // normals and binormals\n      // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\n      curTang = this._tangents[i]\n      prevBinor = this._binormals[i - 1]\n      this._normals[i] = Vector3.Cross(prevBinor, curTang)\n      if (!this._raw) {\n        this._normals[i].normalize()\n      }\n      this._binormals[i] = Vector3.Cross(curTang, this._normals[i])\n      if (!this._raw) {\n        this._binormals[i].normalize()\n      }\n    }\n  }\n\n  // returns the first non null vector from index : curve[index + N].subtract(curve[index])\n  private _getFirstNonNullVector(index: number): Vector3 {\n    let i = 1\n    let nNVector: Vector3 = this._curve[index + i].subtract(this._curve[index])\n    while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\n      i++\n      nNVector = this._curve[index + i].subtract(this._curve[index])\n    }\n    return nNVector\n  }\n\n  // returns the last non null vector from index : curve[index].subtract(curve[index - N])\n  private _getLastNonNullVector(index: number): Vector3 {\n    let i = 1\n    let nLVector: Vector3 = this._curve[index].subtract(this._curve[index - i])\n    while (nLVector.length() === 0 && index > i + 1) {\n      i++\n      nLVector = this._curve[index].subtract(this._curve[index - i])\n    }\n    return nLVector\n  }\n\n  // private function normalVector(v0, vt, va) :\n  // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\n  // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\n  private _normalVector(v0: Vector3, vt: Vector3, va: Vector3 | null): Vector3 {\n    let normal0: Vector3\n    let tgl = vt.length()\n    if (tgl === 0.0) {\n      tgl = 1.0\n    }\n\n    if ((va as any) === undefined || va === null) {\n      let point: Vector3\n      if (!Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, Epsilon)) {\n        // search for a point in the plane\n        point = new Vector3(0.0, -1.0, 0.0)\n      } else if (!Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, Epsilon)) {\n        point = new Vector3(1.0, 0.0, 0.0)\n      } else if (!Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, Epsilon)) {\n        point = new Vector3(0.0, 0.0, 1.0)\n      } else {\n        point = Vector3.Zero()\n      }\n      normal0 = Vector3.Cross(vt, point)\n    } else {\n      normal0 = Vector3.Cross(vt, va)\n      Vector3.CrossToRef(normal0, vt, normal0)\n    }\n    normal0.normalize()\n    return normal0\n  }\n}\n","import { ISize } from './types'\n\n/**\n * Size containing widht and height\n * @public\n */\nexport class Size implements ISize {\n  /**\n   * The surface of the Size : width * height (float).\n   */\n  public get surface(): number {\n    return this.width * this.height\n  }\n  /**\n   * Width\n   */\n  public width: number\n  /**\n   * Height\n   */\n  public height: number\n\n  /**\n   * Creates a Size object from the given width and height (floats).\n   * @param width - width of the new size\n   * @param height - height of the new size\n   */\n  public constructor(width: number, height: number) {\n    this.width = width\n    this.height = height\n  }\n  /**\n   * Create a new size of zero\n   * @returns a new Size set to (0.0, 0.0)\n   */\n  public static Zero(): Size {\n    return new Size(0.0, 0.0)\n  }\n  /**\n   * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n   * @param start - starting size to lerp between\n   * @param end - end size to lerp between\n   * @param amount - amount to lerp between the start and end values\n   * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n   */\n  public static Lerp(start: Size, end: Size, amount: number): Size {\n    let w = start.width + (end.width - start.width) * amount\n    let h = start.height + (end.height - start.height) * amount\n\n    return new Size(w, h)\n  }\n\n  /**\n   * Returns a string with the Size width and height\n   * @returns a string with the Size width and height\n   */\n  public toString(): string {\n    return `{W: ${this.width}, H: ${this.height}}`\n  }\n  /**\n   * \"Size\"\n   * @returns the string \"Size\"\n   */\n  public getClassName(): string {\n    return 'Size'\n  }\n  /**\n   * Returns the Size hash code.\n   * @returns a hash code for a unique width and height\n   */\n  public getHashCode(): number {\n    let hash = this.width || 0\n    hash = (hash * 397) ^ (this.height || 0)\n    return hash\n  }\n  /**\n   * Updates the current size from the given one.\n   * @param src - the given size\n   */\n  public copyFrom(src: Size) {\n    this.width = src.width\n    this.height = src.height\n  }\n  /**\n   * Updates in place the current Size from the given floats.\n   * @param width - width of the new size\n   * @param height - height of the new size\n   * @returns the updated Size.\n   */\n  public copyFromFloats(width: number, height: number): Size {\n    this.width = width\n    this.height = height\n    return this\n  }\n  /**\n   * Updates in place the current Size from the given floats.\n   * @param width - width to set\n   * @param height - height to set\n   * @returns the updated Size.\n   */\n  public set(width: number, height: number): Size {\n    return this.copyFromFloats(width, height)\n  }\n  /**\n   * Multiplies the width and height by numbers\n   * @param w - factor to multiple the width by\n   * @param h - factor to multiple the height by\n   * @returns a new Size set with the multiplication result of the current Size and the given floats.\n   */\n  public multiplyByFloats(w: number, h: number): Size {\n    return new Size(this.width * w, this.height * h)\n  }\n  /**\n   * Clones the size\n   * @returns a new Size copied from the given one.\n   */\n  public clone(): Size {\n    return new Size(this.width, this.height)\n  }\n  /**\n   * True if the current Size and the given one width and height are strictly equal.\n   * @param other - the other size to compare against\n   * @returns True if the current Size and the given one width and height are strictly equal.\n   */\n  public equals(other: Size): boolean {\n    if (!other) {\n      return false\n    }\n    return this.width === other.width && this.height === other.height\n  }\n  /**\n   * Sums the width and height of two sizes\n   * @param otherSize - size to add to this size\n   * @returns a new Size set as the addition result of the current Size and the given one.\n   */\n  public add(otherSize: Size): Size {\n    let r = new Size(this.width + otherSize.width, this.height + otherSize.height)\n    return r\n  }\n  /**\n   * Subtracts the width and height of two\n   * @param otherSize - size to subtract to this size\n   * @returns a new Size set as the subtraction result of  the given one from the current Size.\n   */\n  public subtract(otherSize: Size): Size {\n    let r = new Size(this.width - otherSize.width, this.height - otherSize.height)\n    return r\n  }\n}\n","import { ObservableComponent } from '../ecs/Component'\nimport { newId } from '../ecs/helpers'\nimport { Animator } from './Components'\n\n/** @public */\nexport type AnimationParams = {\n  looping?: boolean\n  speed?: number\n  weight?: number\n  layer?: number\n}\n\nconst defaultParams: Required<Pick<AnimationParams, 'looping' | 'speed' | 'weight' | 'layer'>> = {\n  looping: true,\n  speed: 1.0,\n  weight: 1.0,\n  layer: 0\n}\n\n/**\n * @public\n */\nexport class AnimationState extends ObservableComponent {\n\n  // @internal\n  public isAnimationClip: boolean = true\n\n  /**\n   * Name of the animation in the model\n   */\n  @ObservableComponent.readonly\n  public readonly clip: string\n\n  /**\n   * Does the animation loop?, default: true\n   */\n  @ObservableComponent.field\n  public looping: boolean = defaultParams.looping\n\n  /**\n   * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1\n   */\n  @ObservableComponent.field\n  public weight: number = defaultParams.weight\n\n  /**\n   * Is the animation playing? default: true\n   */\n  @ObservableComponent.field\n  public playing: boolean = false\n\n  /**\n   * Does any anyone asked to reset the animation? default: false\n   */\n  @ObservableComponent.field\n  public shouldReset: boolean = false\n\n  /**\n   * The animation speed\n   */\n  @ObservableComponent.field\n  public speed: number = defaultParams.speed\n\n  // @internal\n  @ObservableComponent.readonly\n  readonly name: string = newId('AnimClip')\n\n  /**\n   * Layering allows you to have two or more levels of animation on an object's parameters at the same time\n   */\n  public layer: number = defaultParams.layer\n\n  // @internal\n  public owner?: Animator\n\n  constructor(clip: string, params: AnimationParams = defaultParams) {\n    super()\n    this.clip = clip\n    this.setParams({ ...params })\n  }\n\n  /**\n   * Sets the clip parameters\n   */\n  setParams(params: AnimationParams) {\n    this.looping = params.looping !== undefined ? params.looping : this.looping\n    this.speed = params.speed || this.speed\n    this.weight = params.weight || this.weight\n    this.layer = params.layer || this.layer\n    return this\n  }\n\n  toJSON() {\n    const ret = JSON.parse(JSON.stringify(super.toJSON()))\n    if (this.shouldReset) {\n      this.shouldReset = false\n    }\n    return ret\n  }\n\n  /**\n   * Starts the animation\n   */\n  play(reset: boolean = false) {\n    this.owner?.play(this, reset)\n  }\n\n  /**\n   * Pauses the animation\n   */\n  pause() {\n    this.owner?.pause(this)\n  }\n\n  /**\n   * Resets the animation state to the frame 0\n   */\n  reset() {\n    this.shouldReset = true\n  }\n\n  /**\n   * Resets and pauses the animation\n   */\n  stop() {\n    this.owner?.stop(this)\n  }\n}\n","// tslint:disable:ter-indent\n\nimport { InputEventType } from './Types'\nimport { Vector3 } from './math'\nimport { Component, DisposableComponent } from '../ecs/Component'\n\n/** @public */\nexport type InputEventKind = 'BUTTON_DOWN' | 'BUTTON_UP'\n\n/**\n * @public\n */\nexport enum ActionButton {\n  POINTER = 'POINTER',\n  PRIMARY = 'PRIMARY',\n  SECONDARY = 'SECONDARY',\n  ANY = 'ANY'\n}\n\n/** @public */\nexport type InputState = Record<\n  ActionButton,\n  {\n    BUTTON_DOWN: boolean\n  }\n>\n\n/** @public */\nexport type LocalActionButtonEvent = GlobalInputEventResult & {\n  origin: Vector3\n  direction: Vector3\n  button: ActionButton\n  hit?: GlobalInputEventResult['hit'] & {\n    hitPoint: Vector3\n    normal: Vector3\n    worldNormal: Vector3\n  }\n}\n\n/**\n * @public\n */\nexport class PointerEventComponent {\n  constructor(public readonly callback: (event: LocalActionButtonEvent) => void) {\n    if (!callback || !('apply' in callback) || !('call' in callback)) {\n      throw new Error('Callback is not a function')\n    }\n    // tslint:disable-next-line:no-use-before-declare\n    Input.ensureInstance()\n  }\n}\n\n/**\n * @public\n */\n@Component('pointerDown')\nexport class GlobalPointerDown extends PointerEventComponent {}\n\n/**\n * @public\n */\n@Component('pointerUp')\nexport class GlobalPointerUp extends PointerEventComponent {}\n\n/**\n * @public\n */\nexport class Subscription {\n  public fn: (e: LocalActionButtonEvent) => void\n  public useRaycast: boolean\n\n  constructor(fn: (e: LocalActionButtonEvent) => void, useRaycast: boolean) {\n    this.fn = fn\n    this.useRaycast = useRaycast\n  }\n}\n\n/**\n * @public\n */\nexport class Input {\n  private static _instance: Input\n\n  static get instance(): Input {\n    Input.ensureInstance()\n    return Input._instance\n  }\n\n  // @internal\n  private subscriptions: Record<ActionButton, Record<InputEventKind, Array<Subscription>>> = {\n    [ActionButton.POINTER]: {\n      BUTTON_DOWN: [],\n      BUTTON_UP: []\n    },\n    [ActionButton.PRIMARY]: {\n      BUTTON_DOWN: [],\n      BUTTON_UP: []\n    },\n    [ActionButton.SECONDARY]: {\n      BUTTON_DOWN: [],\n      BUTTON_UP: []\n    },\n    [ActionButton.ANY]: {\n      BUTTON_DOWN: [],\n      BUTTON_UP: []\n    }\n  }\n\n  private internalState: InputState = {\n    [ActionButton.POINTER]: {\n      BUTTON_DOWN: false\n    },\n    [ActionButton.PRIMARY]: {\n      BUTTON_DOWN: false\n    },\n    [ActionButton.SECONDARY]: {\n      BUTTON_DOWN: false\n    },\n    [ActionButton.ANY]: {\n      BUTTON_DOWN: false\n    }\n  }\n\n  private constructor() {}\n\n  static ensureInstance(): any {\n    if (!Input._instance) {\n      Input._instance = new Input()\n    }\n  }\n\n  /**\n   * Allows to know if a button is pressed\n   *\n   * Returns true if the button is pressed\n   * @param buttonId - The id of the button.\n   */\n  public isButtonPressed(buttonId: ActionButton) {\n    return this.internalState[buttonId]\n  }\n\n  /**\n   * Subscribes to an input event and triggers the provided callback.\n   *\n   * Returns a function that can be called to remove the subscription.\n   * @param eventName - The name of the event (see InputEventKind).\n   * @param buttonId - The id of the button.\n   * @param useRaycast - Enables getting raycast information.\n   * @param fn - A callback function to be called when the event is triggered.\n   */\n  public subscribe(\n    eventName: InputEventKind,\n    buttonId: ActionButton,\n    useRaycast: boolean,\n    fn: (e: LocalActionButtonEvent) => void\n  ): () => void {\n    this.subscriptions[buttonId][eventName].push(new Subscription(fn, useRaycast))\n    return () => {\n      this.unsubscribe(eventName, buttonId, fn)\n    }\n  }\n\n  /**\n   * Removes an existing input event subscription.\n   * @param eventName - The name of the event (see InputEventKind).\n   * @param buttonId - The id of the button.\n   * @param fn - The callback function used when subscribing to the event.\n   */\n  public unsubscribe(eventName: InputEventKind, buttonId: ActionButton, fn: (e: LocalActionButtonEvent) => void) {\n    const index = this.getSubscriptionId(eventName, buttonId, fn)\n    if (index > -1) {\n      return this.subscriptions[buttonId][eventName].splice(index, 1)\n    }\n    return false\n  }\n\n  public handlePointerEvent(data: GlobalInputEventResult) {\n    const button = this.getPointerById(data.buttonId)\n\n    let eventResult: LocalActionButtonEvent = {\n      ...data,\n      button,\n      direction: new Vector3().copyFrom(data.direction),\n      origin: new Vector3().copyFrom(data.origin),\n      hit: undefined\n    }\n\n    const hit = data.hit\n      ? {\n          ...data.hit,\n          hitPoint: new Vector3().copyFrom(data.hit.hitPoint),\n          normal: new Vector3().copyFrom(data.hit.normal),\n          worldNormal: new Vector3().copyFrom(data.hit.worldNormal)\n        }\n      : undefined\n\n    if (data.type === InputEventType.DOWN) {\n      this.internalState[button].BUTTON_DOWN = true\n\n      for (let i = 0; i < this.subscriptions[button]['BUTTON_DOWN'].length; i++) {\n        let subscription = this.subscriptions[button]['BUTTON_DOWN'][i]\n\n        // remove hit information when raycast is disabled\n        if (subscription.useRaycast) {\n          eventResult.hit = hit\n        } else {\n          eventResult.hit = undefined\n        }\n\n        subscription.fn(eventResult)\n      }\n\n      if (hit && hit.entityId && DisposableComponent.engine) {\n        const entity = DisposableComponent.engine.entities[hit.entityId]\n        const handler = entity && entity.getComponentOrNull(GlobalPointerDown)\n        if (handler) {\n          eventResult.hit = hit\n          handler.callback(eventResult)\n        }\n      }\n    } else {\n      this.internalState[button].BUTTON_DOWN = false\n\n      for (let i = 0; i < this.subscriptions[button]['BUTTON_UP'].length; i++) {\n        let subscription = this.subscriptions[button]['BUTTON_UP'][i]\n\n        // remove hit information when raycast is disabled\n        if (subscription.useRaycast) {\n          eventResult.hit = hit\n        } else {\n          eventResult.hit = undefined\n        }\n\n        subscription.fn(eventResult)\n      }\n\n      if (hit && hit.entityId && DisposableComponent.engine) {\n        const entity = DisposableComponent.engine.entities[hit.entityId]\n        const handler = entity && entity.getComponentOrNull(GlobalPointerUp)\n        if (handler) {\n          eventResult.hit = hit\n          handler.callback(eventResult)\n        }\n      }\n    }\n  }\n\n  private getSubscriptionId(\n    eventName: InputEventKind,\n    buttonId: ActionButton,\n    fn: (e: LocalActionButtonEvent) => void\n  ): number {\n    for (let i = 0; i < this.subscriptions[buttonId][eventName].length; i++) {\n      if (this.subscriptions[buttonId][eventName][i].fn === fn) {\n        return i\n      }\n    }\n\n    return -1\n  }\n\n  private getPointerById(id: number): ActionButton {\n    if (id === 0) return ActionButton.POINTER\n    else if (id === 1) return ActionButton.PRIMARY\n    return ActionButton.SECONDARY\n  }\n}\n","import { Component, ObservableComponent, DisposableComponent, getComponentId } from '../ecs/Component'\nimport { Vector3, Quaternion, Matrix, MathTmp, Color3, Color4 } from './math'\nimport { AnimationState } from './AnimationState'\nimport { newId } from '../ecs/helpers'\nimport { ActionButton } from './Input'\n\n/** @public */\nexport type TranformConstructorArgs = TransformConstructorArgs\n\n/** @public */\nexport type TransformConstructorArgs = {\n  position?: Vector3\n  rotation?: Quaternion\n  scale?: Vector3\n}\n\n/**\n * @internal\n */\nexport enum CLASS_ID {\n  TRANSFORM = 1,\n  UUID_CALLBACK = 8,\n  BOX_SHAPE = 16,\n  SPHERE_SHAPE = 17,\n  PLANE_SHAPE = 18,\n  CONE_SHAPE = 19,\n  CYLINDER_SHAPE = 20,\n  TEXT_SHAPE = 21,\n\n  NFT_SHAPE = 22,\n  UI_WORLD_SPACE_SHAPE = 23,\n  UI_SCREEN_SPACE_SHAPE = 24,\n  UI_CONTAINER_RECT = 25,\n  UI_CONTAINER_STACK = 26,\n  UI_TEXT_SHAPE = 27,\n  UI_INPUT_TEXT_SHAPE = 28,\n  UI_IMAGE_SHAPE = 29,\n  UI_SLIDER_SHAPE = 30,\n  CIRCLE_SHAPE = 31,\n  BILLBOARD = 32,\n\n  ANIMATION = 33,\n  FONT = 34,\n\n  UI_FULLSCREEN_SHAPE = 40, // internal fullscreen scenes\n  UI_BUTTON_SHAPE = 41,\n\n  GLTF_SHAPE = 54,\n  OBJ_SHAPE = 55,\n  AVATAR_SHAPE = 56,\n\n  BASIC_MATERIAL = 64,\n  PBR_MATERIAL = 65,\n\n  HIGHLIGHT_ENTITY = 66,\n\n  /** @deprecated */\n  SOUND = 67,\n  TEXTURE = 68,\n\n  VIDEO_CLIP = 70,\n  VIDEO_TEXTURE = 71,\n\n  AUDIO_CLIP = 200,\n  AUDIO_SOURCE = 201,\n  AUDIO_STREAM = 202,\n  GIZMOS = 203,\n  SMART_ITEM = 204,\n  AVATAR_MODIFIER_AREA = 205,\n\n  // For state sync only\n  NAME = 300,\n  LOCKED_ON_EDIT = 301,\n  VISIBLE_ON_EDIT = 302\n}\n\n/** @public */\nexport enum AvatarModifiers {\n  HIDE_AVATARS = 'HIDE_AVATARS',\n  DISABLE_PASSPORTS = 'DISABLE_PASSPORTS'\n}\n\n/** @public */\nexport type Area = { box: Vector3 }\n\n/**\n * Define an area where avatars can be modified in some way\n * @public\n */\n@Component('engine.avatarModifierArea', CLASS_ID.AVATAR_MODIFIER_AREA)\nexport class AvatarModifierArea extends ObservableComponent {\n  @ObservableComponent.field\n  area!: Area\n\n  @ObservableComponent.field\n  modifiers!: AvatarModifiers[]\n\n  constructor(args: { area: Area; modifiers: AvatarModifiers[] }) {\n    super()\n    this.area = args.area\n    this.modifiers = args.modifiers\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.transform', CLASS_ID.TRANSFORM)\nexport class Transform extends ObservableComponent {\n  @ObservableComponent.field\n  position!: Vector3\n\n  @ObservableComponent.field\n  rotation!: Quaternion\n\n  @ObservableComponent.field\n  scale!: Vector3\n\n  constructor(args: TransformConstructorArgs = {}) {\n    super()\n    this.position = args.position || Vector3.Zero()\n    this.rotation = args.rotation || Quaternion.Identity\n    this.scale = args.scale || new Vector3(1, 1, 1)\n  }\n\n  /**\n   * @public\n   * The rotation as Euler angles in degrees.\n   */\n  get eulerAngles() {\n    return this.rotation.eulerAngles\n  }\n\n  /**\n   * @public\n   * Rotates the transform so the forward vector points at target's current position.\n   */\n  lookAt(target: Vector3, worldUp: Vector3 = MathTmp.staticUp) {\n    const result = new Matrix()\n    Matrix.LookAtLHToRef(this.position, target, worldUp, result)\n    result.invert()\n    Quaternion.FromRotationMatrixToRef(result, this.rotation)\n    return this\n  }\n\n  /**\n   * @public\n   * Applies a rotation of euler angles around the x, y and z axis.\n   */\n  rotate(axis: Vector3, angle: number) {\n    this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis))\n    return this\n  }\n\n  /**\n   * @public\n   * Moves the transform in the direction and distance of translation.\n   */\n  translate(vec: Vector3) {\n    this.position.addInPlace(vec)\n    return this\n  }\n}\n\n/**\n * Billboard defines a behavior that makes the entity face the camera in any moment.\n * @public\n */\n@Component('engine.billboard', CLASS_ID.BILLBOARD)\nexport class Billboard extends ObservableComponent {\n  @ObservableComponent.field\n  x: boolean = true\n\n  @ObservableComponent.field\n  y: boolean = true\n\n  @ObservableComponent.field\n  z: boolean = true\n\n  constructor(x: boolean = true, y: boolean = true, z: boolean = true) {\n    super()\n    this.x = x\n    this.y = y\n    this.z = z\n  }\n}\n\n/**\n * @public\n */\nexport class Shape extends ObservableComponent {\n  /**\n   * Set to true to turn on the collider for the entity.\n   */\n  @ObservableComponent.field\n  withCollisions: boolean = true\n\n  /**\n   * Set to true to turn on the PointerEvents blocking for the entity.\n   */\n  @ObservableComponent.field\n  isPointerBlocker: boolean = true\n\n  /**\n   * Defines if the entity and its children should be rendered\n   */\n  @ObservableComponent.field\n  visible: boolean = true\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.BOX_SHAPE)\nexport class BoxShape extends Shape {\n  /**\n   * Sets the UV coordinates for the box.\n   * Used to map specific pieces of a Material's texture into the box's geometry.\n   */\n  @ObservableComponent.field\n  uvs?: number[]\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.SPHERE_SHAPE)\nexport class SphereShape extends Shape {}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.CIRCLE_SHAPE)\nexport class CircleShape extends Shape {\n  @ObservableComponent.field\n  segments?: number\n\n  @ObservableComponent.field\n  arc?: number\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.PLANE_SHAPE)\nexport class PlaneShape extends Shape {\n  /**\n   * Sets the horizontal length of the plane. Defaults to 1.\n   */\n  @ObservableComponent.field\n  width: number = 1\n\n  /**\n   * Sets the vertical length of the plane. Defaults to 1.\n   */\n  @ObservableComponent.field\n  height: number = 1\n\n  /**\n   * Sets the UV coordinates for the plane.\n   * Used to map specific pieces of a Material's texture into the plane's geometry.\n   */\n  @ObservableComponent.field\n  uvs?: number[]\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.CONE_SHAPE)\nexport class ConeShape extends Shape {\n  /**\n   * The radius of the top of a truncated cone. Defaults to 0.\n   */\n  @ObservableComponent.field\n  radiusTop: number = 0\n\n  /**\n   * The radius of the base of the cone. Defaults to 1.\n   */\n  @ObservableComponent.field\n  radiusBottom: number = 1\n\n  /**\n   * Sets the number of rings along the cone height (positive integer). Defaults to 1.\n   */\n  @ObservableComponent.field\n  segmentsHeight: number = 1\n\n  /**\n   * Sets the number of cone sides (positive integer). Defaults to 36.\n   */\n  @ObservableComponent.field\n  segmentsRadial: number = 36\n\n  /**\n   * Adds two extra faces per subdivision to enclose the cone around its height axis.\n   * Defaults to false.\n   */\n  @ObservableComponent.field\n  openEnded: boolean = false\n\n  /**\n   * Sets the radius of the top and bottom caps at once.\n   *\n   * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\n   */\n  @ObservableComponent.field\n  radius: number | null = null\n\n  /**\n   * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.\n   */\n  @ObservableComponent.field\n  arc: number = 360\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.CYLINDER_SHAPE)\nexport class CylinderShape extends Shape {\n  /**\n   * The radius of the top of the cylinder. Defaults to 0.\n   */\n  @ObservableComponent.field\n  radiusTop: number = 1\n\n  /**\n   * The radius of the base of the cylinder. Defaults to 1.\n   */\n  @ObservableComponent.field\n  radiusBottom: number = 1\n\n  /**\n   * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.\n   */\n  @ObservableComponent.field\n  segmentsHeight: number = 1\n\n  /**\n   * Sets the number of cylinder sides (positive integer). Defaults to 36.\n   */\n  @ObservableComponent.field\n  segmentsRadial: number = 36\n\n  /**\n   * Adds two extra faces per subdivision to enclose the cylinder around its height axis.\n   * Defaults to false.\n   */\n  @ObservableComponent.field\n  openEnded: boolean = false\n\n  /**\n   * Sets the radius of the top and bottom caps at once.\n   *\n   * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\n   */\n  @ObservableComponent.field\n  radius: number | null = null\n\n  /**\n   * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.\n   */\n  @ObservableComponent.field\n  arc: number = 360\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.GLTF_SHAPE)\nexport class GLTFShape extends Shape {\n  @Shape.readonly\n  readonly src!: string\n\n  constructor(src: string) {\n    super()\n    this.src = src\n  }\n}\n\n/** @public */\nexport enum PictureFrameStyle {\n  Classic = 0,\n  Baroque_Ornament = 1,\n  Diamond_Ornament = 2,\n  Minimal_Wide = 3,\n  Minimal_Grey = 4,\n  Blocky = 5,\n  Gold_Edges = 6,\n  Gold_Carved = 7,\n  Gold_Wide = 8,\n  Gold_Rounded = 9,\n  Metal_Medium = 10,\n  Metal_Wide = 11,\n  Metal_Slim = 12,\n  Metal_Rounded = 13,\n  Pins = 14,\n  Minimal_Black = 15,\n  Minimal_White = 16,\n  Tape = 17,\n  Wood_Slim = 18,\n  Wood_Wide = 19,\n  Wood_Twigs = 20,\n  Canvas = 21,\n  None = 22\n}\n\n/** @public */\nexport type NFTShapeConstructorArgs = {\n  color?: Color3\n  style?: PictureFrameStyle\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.NFT_SHAPE)\nexport class NFTShape extends Shape {\n  @Shape.readonly\n  readonly src!: string\n\n  @Shape.readonly\n  readonly style!: PictureFrameStyle\n\n  @ObservableComponent.field\n  color: Color3\n\n  constructor(src: string)\n  constructor(src: string, color: Color3) // for backwards compatibility\n  constructor(src: string, args: NFTShapeConstructorArgs)\n  constructor(src: string, args: any = {}) {\n    super()\n    this.src = src\n\n    let color = new Color3(0.6404918, 0.611472, 0.8584906)\n    let style = PictureFrameStyle.Classic\n\n    // check if args is color (backwards compatibility)\n    if ('r' in args) {\n      color = args\n    } else if (args != null) {\n      if (args.color) color = args.color\n      if (args.style) style = args.style\n    }\n\n    this.color = color\n    this.style = style\n  }\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.texture', CLASS_ID.TEXTURE)\nexport class Texture extends ObservableComponent {\n  @ObservableComponent.readonly\n  readonly src!: string\n\n  /**\n   * Enables crisper images based on the provided sampling mode.\n   * | Value | Type      |\n   * |-------|-----------|\n   * |     0 | NEAREST   |\n   * |     1 | BILINEAR  |\n   * |     2 | TRILINEAR |\n   */\n  @ObservableComponent.readonly\n  readonly samplingMode!: number\n\n  /**\n   * Enables texture wrapping for this material.\n   * | Value | Type      |\n   * |-------|-----------|\n   * |     0 | CLAMP     |\n   * |     1 | WRAP      |\n   * |     2 | MIRROR    |\n   */\n  @ObservableComponent.readonly\n  readonly wrap!: number\n\n  /**\n   * Defines if this texture has an alpha channel\n   */\n  @ObservableComponent.readonly\n  readonly hasAlpha!: boolean\n\n  constructor(src: string, opts?: Partial<Pick<Texture, 'samplingMode' | 'wrap' | 'hasAlpha'>>) {\n    super()\n    this.src = src\n\n    if (opts) {\n      for (let i in opts) {\n        const that = this as any\n        that[i as 'samplingMode' | 'wrap' | 'hasAlpha'] = (opts as any)[i]\n      }\n    }\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.animator', CLASS_ID.ANIMATION)\nexport class Animator extends Shape {\n  @ObservableComponent.readonly\n  private states: AnimationState[] = []\n\n  /**\n   * Adds an AnimationState to the animation lists.\n   */\n  addClip(clip: AnimationState) {\n    this.states.push(clip)\n    clip.onChange(() => {\n      this.dirty = true\n    })\n\n    clip.owner = this\n    return this\n  }\n\n  /**\n   * Gets the animation clip instance for the specified clip name.\n   * If the clip doesn't exist a new one will be created.\n   */\n  getClip(clipName: string): AnimationState {\n    for (let i = 0; i < this.states.length; i++) {\n      const clip = this.states[i]\n      if (clip.clip === clipName) {\n        return clip\n      }\n    }\n\n    const newClip = new AnimationState(clipName)\n    this.addClip(newClip)\n    return newClip\n  }\n\n  /**\n   * Resets and pauses the animation state, if the clip is null it will stop all animations on this animator\n   */\n  stop(clip?: AnimationState) {\n    if (clip) {\n      clip.playing = false\n      clip.shouldReset = true\n    } else {\n      for (let i = 0; i < this.states.length; i++) {\n        const animationState = this.states[i]\n        this.stop(animationState)\n      }\n    }\n  }\n\n  /**\n   * Starts the animation\n   */\n  play(clip: AnimationState, reset: boolean = false) {\n    for (let i = 0; i < this.states.length; i++) {\n      const animationState = this.states[i]\n      if (animationState.layer === clip.layer && clip !== animationState) {\n        this.pause(animationState)\n      }\n    }\n\n    if (reset) clip.shouldReset = true\n    clip.playing = true\n    clip.dirty = true\n    clip.data.nonce = Math.random()\n  }\n\n  /**\n   * Pauses the animation state, if the clip is null it will pause all animations on this animator\n   */\n  pause(clip?: AnimationState) {\n    if (clip) {\n      clip.playing = false\n    } else {\n      for (let i = 0; i < this.states.length; i++) {\n        const animationState = this.states[i]\n        this.pause(animationState)\n      }\n    }\n  }\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.OBJ_SHAPE)\nexport class OBJShape extends Shape {\n  @ObservableComponent.readonly\n  readonly src!: string\n\n  constructor(src: string) {\n    super()\n    this.src = src\n  }\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.font', CLASS_ID.FONT)\nexport class Font extends ObservableComponent {\n  @ObservableComponent.readonly\n  readonly src!: string\n\n  public constructor(src: string = '') {\n    super()\n    this.src = src\n  }\n}\n\n/**\n * @public\n */\nexport enum Fonts {\n  /** @deprecated SanFrancisco has been deprecated. Use SansSerif instead.*/\n  SanFrancisco = 'builtin:SF-UI-Text-Regular SDF',\n  /** @deprecated SanFrancisco_Heavy has been deprecated. Use SansSerif_Heavy instead.*/\n  SanFrancisco_Heavy = 'builtin:SF-UI-Text-Heavy SDF',\n  /** @deprecated SanFrancisco_Semibold has been deprecated. Use SansSerif_SemiBold instead.*/\n  SanFrancisco_Semibold = 'builtin:SF-UI-Text-Semibold SDF',\n  LiberationSans = 'builtin:LiberationSans SDF',\n  SansSerif = 'SansSerif',\n  SansSerif_Heavy = 'SansSerif_Heavy',\n  SansSerif_Bold = 'SansSerif_Bold',\n  SansSerif_SemiBold = 'SansSerif_SemiBold'\n}\n\n/**\n * @public\n */\n@Component('engine.text', CLASS_ID.TEXT_SHAPE)\nexport class TextShape extends ObservableComponent {\n  @ObservableComponent.field\n  outlineWidth: number = 0\n\n  @ObservableComponent.field\n  outlineColor: Color3 = new Color3(1, 1, 1)\n\n  @ObservableComponent.field\n  color: Color3 = new Color3(1, 1, 1)\n\n  @ObservableComponent.field\n  fontSize: number = 10\n\n  @ObservableComponent.field\n  fontWeight: string = 'normal'\n\n  @ObservableComponent.component\n  font?: Font\n\n  @ObservableComponent.field\n  opacity: number = 1.0\n\n  @ObservableComponent.field\n  value: string = ''\n\n  @ObservableComponent.field\n  lineSpacing: string = '0px'\n\n  @ObservableComponent.field\n  lineCount: number = 0\n\n  @ObservableComponent.field\n  resizeToFit: boolean = false\n\n  @ObservableComponent.field\n  textWrapping: boolean = false\n\n  @ObservableComponent.field\n  shadowBlur: number = 0\n\n  @ObservableComponent.field\n  shadowOffsetX: number = 0\n\n  @ObservableComponent.field\n  shadowOffsetY: number = 0\n\n  @ObservableComponent.field\n  shadowColor: Color3 = new Color3(1, 1, 1)\n\n  @ObservableComponent.field\n  zIndex: number = 0\n\n  @ObservableComponent.field\n  hTextAlign: string = 'center'\n\n  @ObservableComponent.field\n  vTextAlign: string = 'center'\n\n  @ObservableComponent.field\n  width: number = 1\n\n  @ObservableComponent.field\n  height: number = 1\n\n  @ObservableComponent.field\n  paddingTop: number = 0\n\n  @ObservableComponent.field\n  paddingRight: number = 0\n\n  @ObservableComponent.field\n  paddingBottom: number = 0\n\n  @ObservableComponent.field\n  paddingLeft: number = 0\n\n  @ObservableComponent.field\n  isPickable: boolean = false\n\n  @ObservableComponent.field\n  billboard: boolean = false\n\n  @ObservableComponent.field\n  visible: boolean = true\n\n  constructor(value?: string) {\n    super()\n\n    if (value) {\n      this.value = value\n    }\n  }\n}\n\n/**\n * @public\n */\nexport enum TransparencyMode {\n  OPAQUE = 0,\n  ALPHA_TEST = 1,\n  ALPHA_BLEND = 2,\n  ALPHA_TEST_AND_BLEND = 3,\n  AUTO = 4\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.material', CLASS_ID.PBR_MATERIAL)\nexport class Material extends ObservableComponent {\n  /**\n   * Cutoff level for ALPHATEST mode. Range is between 0 and 1.\n   * Defaults to 0.5\n   */\n  @ObservableComponent.field\n  alphaTest?: number = 0.5\n\n  /**\n   * AKA Diffuse Color in other nomenclature.\n   * Defaults to #CCCCCC.\n   */\n  @ObservableComponent.field\n  albedoColor?: Color4 | Color3\n\n  /**\n   * The color emitted from the material.\n   * Defaults to black.\n   */\n  @ObservableComponent.field\n  emissiveColor?: Color3\n\n  /**\n   * Specifies the metallic scalar of the metallic/roughness workflow.\n   * Can also be used to scale the metalness values of the metallic texture.\n   * Defaults to  0.5.\n   */\n  @ObservableComponent.field\n  metallic?: number\n\n  /**\n   * Specifies the roughness scalar of the metallic/roughness workflow.\n   * Can also be used to scale the roughness values of the metallic texture.\n   * Defaults to  0.5.\n   */\n  @ObservableComponent.field\n  roughness?: number\n\n  /**\n   * AKA Diffuse Color in other nomenclature.\n   * Defaults to black.\n   */\n  @ObservableComponent.field\n  ambientColor?: Color3\n\n  /**\n   * The color reflected from the material.\n   * Defaults to white.\n   */\n  @ObservableComponent.field\n  reflectionColor?: Color3\n\n  /**\n   * AKA Specular Color in other nomenclature.\n   * Defaults to white.\n   */\n  @ObservableComponent.field\n  reflectivityColor?: Color3\n\n  /**\n   * Intensity of the direct lights e.g. the four lights available in scene.\n   * This impacts both the direct diffuse and specular highlights.\n   * Defaults to 1.\n   */\n  @ObservableComponent.field\n  directIntensity?: number\n\n  /**\n   * AKA Glossiness in other nomenclature.\n   * Defaults to 1.\n   */\n  @ObservableComponent.field\n  microSurface?: number\n\n  /**\n   * Intensity of the emissive part of the material.\n   * This helps controlling the emissive effect without modifying the emissive color.\n   * Defaults to 1.\n   */\n  @ObservableComponent.field\n  emissiveIntensity?: number\n\n  /**\n   * Intensity of the environment e.g. how much the environment will light the object\n   * either through harmonics for rough material or through the refelction for shiny ones.\n   * Defaults to 1.\n   */\n  @ObservableComponent.field\n  environmentIntensity?: number\n\n  /**\n   * This is a special control allowing the reduction of the specular highlights coming from the\n   * four lights of the scene. Those highlights may not be needed in full environment lighting.\n   * Defaults to 1.\n   */\n  @ObservableComponent.field\n  specularIntensity?: number\n\n  /**\n   * Texture applied as material.\n   */\n  @ObservableComponent.component\n  albedoTexture?: Texture | VideoTexture\n\n  /**\n   * Texture applied as opacity. Default: the same texture used in albedoTexture.\n   */\n  @ObservableComponent.component\n  alphaTexture?: Texture | VideoTexture\n\n  /**\n   * Emissive texture.\n   */\n  @ObservableComponent.component\n  emissiveTexture?: Texture | VideoTexture\n\n  /**\n   * Stores surface normal data used to displace a mesh in a texture.\n   */\n  @ObservableComponent.component\n  bumpTexture?: Texture\n\n  /**\n   * Stores the refracted light information in a texture.\n   */\n  @ObservableComponent.component\n  refractionTexture?: Texture\n\n  /**\n   * Allow the material to cast shadows over other objects\n   */\n  @ObservableComponent.field\n  castShadows?: boolean = true\n\n  /**\n   * Sets the transparency mode of the material.\n   * Defaults to -1.\n   *\n   * | Value | Type                                           |\n   * | ----- | ---------------------------------------------- |\n   * | 0     | OPAQUE  (default)                              |\n   * | 1     | ALPHATEST                                      |\n   * | 2     | ALPHABLEND                                     |\n   * | 3     | ALPHATESTANDBLEND                              |\n   * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |\n   */\n  @ObservableComponent.field\n  transparencyMode: TransparencyMode = TransparencyMode.AUTO\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.material', CLASS_ID.BASIC_MATERIAL)\nexport class BasicMaterial extends ObservableComponent {\n  /**\n   * The source of the texture image.\n   */\n  @ObservableComponent.component\n  texture?: Texture | VideoTexture\n\n  /**\n   * A number between 0 and 1.\n   * Any pixel with an alpha lower than this value will be shown as transparent.\n   */\n  @ObservableComponent.field\n  alphaTest: number = 0.5\n\n  /**\n   * Allow the material to cast shadows over other objects\n   */\n  @ObservableComponent.field\n  castShadows?: boolean = true\n}\n\n/**\n * @public\n */\nexport class OnUUIDEvent<T extends keyof IEvents> extends ObservableComponent {\n  readonly type: string | undefined\n\n  readonly uuid: string = newId('UUID')\n\n  @ObservableComponent.field\n  callback!: (event: any) => void\n\n  constructor(callback: (event: IEvents[T]) => void) {\n    super()\n\n    if (!callback || !('apply' in callback) || !('call' in callback)) {\n      throw new Error('Callback is not a function')\n    }\n\n    this.callback = callback\n  }\n\n  static uuidEvent(target: ObservableComponent, propertyKey: string) {\n    if (delete (target as any)[propertyKey]) {\n      const componentSymbol = propertyKey + '_' + Math.random()\n      ;(target as any)[componentSymbol] = undefined\n\n      Object.defineProperty(target, componentSymbol, {\n        ...Object.getOwnPropertyDescriptor(target, componentSymbol),\n        enumerable: false\n      })\n\n      Object.defineProperty(target, propertyKey.toString(), {\n        get: function () {\n          return this[componentSymbol]\n        },\n        set: function (value) {\n          const oldValue = this[componentSymbol]\n\n          if (value) {\n            if (value instanceof OnUUIDEvent) {\n              this.data[propertyKey] = value.uuid\n            } else {\n              throw new Error('value is not an OnUUIDEvent')\n            }\n          } else {\n            this.data[propertyKey] = null\n          }\n\n          this[componentSymbol] = value\n\n          if (value !== oldValue) {\n            this.dirty = true\n\n            for (let i = 0; i < this.subscriptions.length; i++) {\n              this.subscriptions[i](propertyKey, value, oldValue)\n            }\n          }\n        },\n        enumerable: true\n      })\n    }\n  }\n\n  toJSON() {\n    return { uuid: this.uuid, type: this.type }\n  }\n}\n\n/**\n * @public\n */\nexport class OnPointerUUIDEvent<T extends keyof IEvents> extends OnUUIDEvent<T> {\n  @ObservableComponent.field\n  button: ActionButton = ActionButton.ANY\n\n  @ObservableComponent.field\n  hoverText: string = 'Interact'\n\n  @ObservableComponent.field\n  distance: number = 10\n\n  @ObservableComponent.field\n  showFeedback: boolean = true\n\n  toJSON() {\n    return {\n      uuid: this.uuid,\n      type: this.type,\n      button: this.button,\n      hoverText: this.hoverText,\n      distance: this.distance,\n      showFeedback: this.showFeedback\n    }\n  }\n}\n\n/**\n * @internal\n */\n@Component('engine.onPointerLock', CLASS_ID.UUID_CALLBACK)\nexport class OnPointerLock extends OnUUIDEvent<'onPointerLock'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'onPointerLock'\n}\n\n/**\n * @public\n */\n@Component('engine.onAnimationEnd', CLASS_ID.UUID_CALLBACK)\nexport class OnAnimationEnd extends OnUUIDEvent<'onAnimationEnd'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'onAnimationEnd'\n}\n\n/**\n * @internal\n */\n@Component('engine.smartItem', CLASS_ID.SMART_ITEM)\nexport class SmartItem extends ObservableComponent {}\n\n/**\n * @public\n */\n@DisposableComponent('engine.VideoClip', CLASS_ID.VIDEO_CLIP)\nexport class VideoClip extends ObservableComponent {\n  @ObservableComponent.readonly\n  readonly url: string\n\n  constructor(url: string) {\n    super()\n    this.url = url\n  }\n}\n\n/** @public */\nexport enum VideoStatus {\n  NONE = 0,\n  ERROR = 1,\n  LOADING = 2,\n  READY = 3,\n  PLAYING = 4,\n  BUFFERING = 5\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.VideoTexture', CLASS_ID.VIDEO_TEXTURE)\nexport class VideoTexture extends ObservableComponent {\n  @ObservableComponent.readonly\n  readonly videoClipId: string\n\n  /**\n   * Enables crisper images based on the provided sampling mode.\n   * | Value | Type      |\n   * |-------|-----------|\n   * |     1 | NEAREST   |\n   * |     2 | BILINEAR  |\n   * |     3 | TRILINEAR |\n   */\n  @ObservableComponent.readonly\n  readonly samplingMode!: number\n\n  /**\n   * Enables texture wrapping for this material.\n   * | Value | Type      |\n   * |-------|-----------|\n   * |     1 | CLAMP     |\n   * |     2 | WRAP      |\n   * |     3 | MIRROR    |\n   */\n  @ObservableComponent.readonly\n  readonly wrap!: number\n\n  @ObservableComponent.field\n  volume: number = 1\n\n  @ObservableComponent.field\n  playbackRate: number = 1\n\n  @ObservableComponent.field\n  loop: boolean = false\n\n  @ObservableComponent.field\n  seek: number = -1\n\n  private _position: number = -1\n  private _videoLength: number = -1\n  private _status: VideoStatus = VideoStatus.NONE\n\n  /**\n   * Is this VideoTexture playing?\n   */\n  @ObservableComponent.field\n  playing: boolean = false\n\n  constructor(videoClip: VideoClip, opts?: Partial<Pick<VideoTexture, 'samplingMode' | 'wrap'>>) {\n    super()\n\n    if (!(videoClip instanceof VideoClip)) {\n      throw new Error(`Trying to create VideoTexture(VideoClip) with an invalid VideoClip`)\n    }\n    this.videoClipId = getComponentId(videoClip as any)\n\n    if (opts) {\n      for (let i in opts) {\n        const that = this as any\n        that[i as 'samplingMode' | 'wrap'] = (opts as any)[i]\n      }\n    }\n  }\n\n  play() {\n    this.playing = true\n  }\n\n  pause() {\n    this.playing = false\n  }\n\n  reset() {\n    this.seekTime(0)\n    this.pause()\n  }\n\n  seekTime(seconds: number) {\n    this.seek = seconds\n    this.dirty = true\n    this.data.nonce = Math.random()\n  }\n\n  toJSON() {\n    if (this.seek >= 0) {\n      // the seek value was changed/used\n      const ret = JSON.parse(JSON.stringify(super.toJSON()))\n      this.seek = -1\n      return ret\n    }\n\n    return super.toJSON()\n  }\n\n  update(videoEvent: IEvents['videoEvent']) {\n    if (videoEvent.videoClipId == this.videoClipId) {\n      this._status = (videoEvent.videoStatus as VideoStatus) || VideoStatus.NONE\n      this._videoLength = videoEvent.totalVideoLength\n      this._position = videoEvent.currentOffset\n    }\n  }\n\n  get position() {\n    return this._position \n  }\n\n  get videoLength() {\n    return this._videoLength \n  }\n\n  get status() {\n    return this._status \n  }\n}\n","import { Vector3, Matrix } from './math'\nimport { RaycastResponse } from './Events'\nimport { uuid, log } from '../ecs/helpers'\n\nimport { Camera } from './Camera'\n\n/**\n * @public\n */\nexport type QueryType = 'HitFirst' | 'HitAll' | 'HitFirstAvatar' | 'HitAllAvatars'\n\n/**\n * @internal\n */\nenum QueryPrefix {\n  HitFirst = 'rqhf',\n  HitAll = 'rqha'\n}\n\n/**\n * @internal\n */\nexport interface RaycastQuery {\n  queryId: string\n  queryType: QueryType\n  ray: Ray\n}\n\n/**\n * @public\n */\nexport interface RaycastHit {\n  didHit: boolean\n  ray: Ray\n  hitPoint: ReadOnlyVector3\n  hitNormal: ReadOnlyVector3\n}\n\n/**\n * @public\n */\nexport interface Ray {\n  origin: ReadOnlyVector3\n  direction: ReadOnlyVector3\n  distance: number\n}\n\n/**\n * @public\n */\nexport interface HitEntityInfo {\n  isValid: boolean\n  entityId: string\n  meshName: string\n}\n\n/**\n * @public\n */\nexport interface RaycastHitEntity extends RaycastHit {\n  entity: HitEntityInfo\n}\n\n/**\n * @public\n */\nexport interface RaycastHitEntities extends RaycastHit {\n  entities: RaycastHitEntity[]\n}\n\n/**\n * @public\n */\nexport interface BasicAvatarInfo {\n  userId: string\n  name: string\n}\n\n/**\n * @public\n */\nexport interface RaycastHitAvatar extends RaycastHit {\n  avatar: BasicAvatarInfo\n}\n\n/**\n * @public\n */\nexport interface RaycastHitAvatars extends RaycastHit {\n  avatars: BasicAvatarInfo[]\n}\n\n/**\n * @public\n */\nexport interface IPhysicsCast {\n  hitFirst(ray: Ray, hitCallback: (event: RaycastHitEntity) => void, id?: number): void\n  hitAll(ray: Ray, hitCallback: (event: RaycastHitEntities) => void, id?: number): void\n  /** @internal */\n  hitFirstAvatar(ray: Ray, hitCallback: (event: RaycastHitAvatar) => void): void\n  /** @internal */\n  hitAllAvatars(ray: Ray, hitCallback: (event: RaycastHitAvatars) => void): void\n}\n\n/**\n * @public\n */\nexport class PhysicsCast implements IPhysicsCast {\n  private static _instance: PhysicsCast\n  private queries: Record<string, (event: RaycastHit) => void> = {}\n\n  private constructor() {}\n\n  public static get instance(): PhysicsCast {\n    PhysicsCast.ensureInstance()\n    return PhysicsCast._instance\n  }\n\n  static ensureInstance(): any {\n    if (!PhysicsCast._instance) {\n      PhysicsCast._instance = new PhysicsCast()\n    }\n  }\n\n  public getRayFromCamera(distance: number) {\n    let rotation = Camera.instance.rotation\n    let rotationMat: Matrix = Matrix.Identity()\n    rotation.toRotationMatrix(rotationMat)\n    let direction = Vector3.TransformCoordinates(Vector3.Forward(), rotationMat)\n\n    const ray: Ray = {\n      origin: Camera.instance.position,\n      direction: direction,\n      distance: distance\n    }\n\n    return ray\n  }\n\n  public getRayFromPositions(from: Vector3, to: Vector3) {\n    const direction = to.subtract(from)\n    const length = direction.length()\n\n    const ray: Ray = {\n      origin: from,\n      direction: direction.normalize(),\n      distance: length\n    }\n\n    return ray\n  }\n\n  public hitFirst(ray: Ray, hitCallback: (event: RaycastHitEntity) => void, id?: number) {\n    const queryId = typeof id === 'number' ? QueryPrefix.HitFirst + id : uuid()\n\n    this.queries[queryId] = hitCallback as (event: RaycastHit) => void\n\n    if (typeof dcl != 'undefined') {\n      dcl.query('raycast', { queryId, queryType: 'HitFirst', ray })\n    }\n  }\n\n  public hitAll(ray: Ray, hitCallback: (event: RaycastHitEntities) => void, id?: number) {\n    const queryId = typeof id === 'number' ? QueryPrefix.HitAll + id : uuid()\n\n    this.queries[queryId] = hitCallback as (event: RaycastHit) => void\n\n    if (typeof dcl != 'undefined') {\n      dcl.query('raycast', { queryId, queryType: 'HitAll', ray })\n    }\n  }\n\n  public hitFirstAvatar(ray: Ray, hitCallback: (event: RaycastHitAvatar) => void) {\n    log('not implemented yet')\n  }\n\n  public hitAllAvatars(ray: Ray, hitCallback: (event: RaycastHitAvatars) => void) {\n    log('not implemented yet')\n  }\n\n  public handleRaycastHitFirstResponse(response: RaycastResponse<RaycastHitEntity>) {\n    this.queries[response.payload.queryId](response.payload.payload)\n    delete this.queries[response.payload.queryId]\n  }\n\n  public handleRaycastHitAllResponse(response: RaycastResponse<RaycastHitEntities>) {\n    this.queries[response.payload.queryId](response.payload.payload)\n    delete this.queries[response.payload.queryId]\n  }\n}\n","import { Vector3, Quaternion } from './math'\nimport { CameraMode } from './Types'\n\n/**\n * @public\n */\nexport class Camera {\n  // @internal\n  private static _instance: Camera\n\n  static get instance(): Camera {\n    if (!Camera._instance) {\n      Camera._instance = new Camera()\n    }\n    return Camera._instance\n  }\n\n  /** Camera position, relative to the parcel. */\n  public readonly position: Vector3 = new Vector3()\n  /** Camera rotation */\n  public readonly rotation: Quaternion = new Quaternion()\n\n  /** Feet position, relative to the parcel.  */\n  public readonly feetPosition: Vector3 = new Vector3()\n  /** Camera position, absolute. */\n  public readonly worldPosition: Vector3 = new Vector3()\n\n  /** Player height. */\n  get playerHeight(): number {\n    return this._playerHeight\n  }\n\n  /** Get Camera Mode. */\n  get cameraMode(): CameraMode {\n    return this._cameraMode\n  }\n\n  // @internal\n  private lastEventPosition: ReadOnlyVector3 = { x: 0, y: 0, z: 0 }\n  // @internal\n  private lastEventWorldPosition: ReadOnlyVector3 = { x: 0, y: 0, z: 0 }\n\n  // @internal\n  private lastEventRotation: ReadOnlyQuaternion = { x: 0, y: 0, z: 0, w: 1.0 }\n\n  // @internal\n  private _playerHeight: number = 1.6\n  // @internal\n  private _cameraMode: CameraMode = CameraMode.FirstPerson\n\n  constructor() {\n    if (typeof dcl !== 'undefined') {\n      dcl.subscribe('positionChanged')\n      dcl.subscribe('rotationChanged')\n      dcl.subscribe('cameraModeChanged')\n\n      dcl.onEvent(event => {\n        switch (event.type) {\n          case 'positionChanged':\n            this.positionChanged(event.data as any)\n            break\n          case 'rotationChanged':\n            this.rotationChanged(event.data as any)\n            break\n          case 'cameraModeChanged':\n            this.cameraModeChanged(event.data as any)\n            break\n        }\n      })\n    }\n\n    Object.defineProperty(this.position, 'x', {\n      get: () => this.lastEventPosition.x\n    })\n\n    Object.defineProperty(this.position, 'y', {\n      get: () => this.lastEventPosition.y\n    })\n\n    Object.defineProperty(this.position, 'z', {\n      get: () => this.lastEventPosition.z\n    })\n\n    Object.defineProperty(this.worldPosition, 'x', {\n      get: () => this.lastEventWorldPosition.x\n    })\n\n    Object.defineProperty(this.worldPosition, 'y', {\n      get: () => this.lastEventWorldPosition.y\n    })\n\n    Object.defineProperty(this.worldPosition, 'z', {\n      get: () => this.lastEventWorldPosition.z\n    })\n\n    Object.defineProperty(this.feetPosition, 'x', {\n      get: () => this.lastEventPosition.x\n    })\n\n    Object.defineProperty(this.feetPosition, 'y', {\n      get: () => this.lastEventPosition.y - this.playerHeight\n    })\n\n    Object.defineProperty(this.feetPosition, 'z', {\n      get: () => this.lastEventPosition.z\n    })\n\n    Object.defineProperty(this.rotation, 'x', {\n      get: () => this.lastEventRotation.x\n    })\n\n    Object.defineProperty(this.rotation, 'y', {\n      get: () => this.lastEventRotation.y\n    })\n\n    Object.defineProperty(this.rotation, 'z', {\n      get: () => this.lastEventRotation.z\n    })\n\n    Object.defineProperty(this.rotation, 'w', {\n      get: () => this.lastEventRotation.w\n    })\n  }\n\n  // @internal\n  private positionChanged(e: IEvents['positionChanged']) {\n    this.lastEventPosition = e.position\n    this.lastEventWorldPosition = e.cameraPosition\n    this._playerHeight = e.playerHeight\n  }\n\n  // @internal\n  private rotationChanged(e: IEvents['rotationChanged']) {\n    this.lastEventRotation = e.quaternion\n  }\n\n  // @internal\n  private cameraModeChanged(e: IEvents['cameraModeChanged']) {\n    this._cameraMode = e.cameraMode\n  }\n}\n","import { Component, ObservableComponent } from '../ecs/Component'\nimport { CLASS_ID, OnUUIDEvent } from './Components'\n\n/**\n * Gizmo identifiers\n * @public\n */\nexport enum Gizmo {\n  MOVE = 'MOVE',\n  ROTATE = 'ROTATE',\n  SCALE = 'SCALE',\n  NONE = 'NONE'\n}\n\n/**\n * This event is triggered after the user finalizes dragging a gizmo.\n * @public\n */\n@Component('engine.gizmoEvent', CLASS_ID.UUID_CALLBACK)\nexport class OnGizmoEvent extends OnUUIDEvent<'gizmoEvent'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'gizmoEvent'\n}\n\n/**\n * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.\n * @public\n */\n@Component('engine.gizmos', CLASS_ID.GIZMOS)\nexport class Gizmos extends ObservableComponent {\n  /**\n   * Enable position gizmo\n   */\n  @ObservableComponent.field\n  position: boolean = true\n\n  /**\n   * Enable rotation gizmo\n   */\n  @ObservableComponent.field\n  rotation: boolean = true\n\n  /**\n   * Enable scale gizmo\n   */\n  @ObservableComponent.field\n  scale: boolean = true\n\n  /**\n   * Cycle through gizmos using click.\n   */\n  @ObservableComponent.field\n  cycle: boolean = true\n\n  /**\n   * If cycle is false, this will be the selected gizmo\n   */\n  @ObservableComponent.field\n  selectedGizmo?: Gizmo\n\n  /**\n   * Align the gizmos to match the local reference system\n   */\n  @ObservableComponent.field\n  localReference: boolean = false\n}\n","import { Engine } from '../ecs/Engine'\nimport { UUIDEvent, PointerEvent, RaycastResponse } from './Events'\nimport { OnUUIDEvent } from './Components'\nimport { ISystem, ComponentAdded, ComponentRemoved, IEntity } from '../ecs/IEntity'\nimport { Input } from './Input'\nimport { PhysicsCast, RaycastHitEntity, RaycastHitEntities } from './PhysicsCast'\n\n/**\n * @public\n */\nexport class RaycastEventSystem implements ISystem {\n  activate(engine: Engine) {\n    engine.eventManager.addListener(RaycastResponse, this, (event) => {\n      if (event.payload.queryType === 'HitFirst') {\n        PhysicsCast.instance.handleRaycastHitFirstResponse(event as RaycastResponse<RaycastHitEntity>)\n      } else if (event.payload.queryType === 'HitAll') {\n        PhysicsCast.instance.handleRaycastHitAllResponse(event as RaycastResponse<RaycastHitEntities>)\n      }\n    })\n\n    if (typeof dcl !== 'undefined') {\n      dcl.subscribe('raycastResponse')\n    }\n  }\n\n  deactivate() {\n    if (typeof dcl !== 'undefined') {\n      dcl.unsubscribe('raycastResponse')\n    }\n  }\n}\n\n/**\n * @public\n */\nexport class PointerEventSystem implements ISystem {\n  activate(engine: Engine) {\n    engine.eventManager.addListener(PointerEvent, this, (event) => {\n      Input.instance.handlePointerEvent(event.payload as GlobalInputEventResult)\n    })\n\n    if (typeof dcl !== 'undefined') {\n      dcl.subscribe('pointerUp')\n      dcl.subscribe('pointerDown')\n      dcl.subscribe('pointerEvent')\n    }\n  }\n\n  deactivate() {\n    if (typeof dcl !== 'undefined') {\n      dcl.unsubscribe('pointerUp')\n      dcl.unsubscribe('pointerDown')\n      dcl.unsubscribe('pointerEvent')\n    }\n  }\n}\n\n/**\n * @public\n */\nexport class UUIDEventSystem implements ISystem {\n  handlerMap: { [uuid: string]: OnUUIDEvent<any> } = {}\n\n  activate(engine: Engine) {\n    engine.eventManager.addListener(UUIDEvent, this, this.handleEvent)\n    engine.eventManager.addListener(ComponentAdded, this, this.componentAdded)\n    engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved)\n\n    if (typeof dcl !== 'undefined') {\n      dcl.subscribe('uuidEvent')\n    }\n  }\n\n  deactivate() {\n    if (typeof dcl !== 'undefined') {\n      dcl.unsubscribe('uuidEvent')\n    }\n  }\n\n  onAddEntity(entity: IEntity) {\n    for (let componentName in entity.components) {\n      const component = entity.components[componentName]\n\n      if (component instanceof OnUUIDEvent) {\n        this.handlerMap[component.uuid] = component\n      }\n    }\n  }\n\n  onRemoveEntity(entity: IEntity) {\n    for (let componentName in entity.components) {\n      const component = entity.components[componentName]\n\n      if (component instanceof OnUUIDEvent) {\n        delete this.handlerMap[component.uuid]\n      }\n    }\n  }\n\n  private componentAdded(event: ComponentAdded) {\n    if (event.entity.isAddedToEngine()) {\n      const component = event.entity.components[event.componentName]\n\n      if (component instanceof OnUUIDEvent) {\n        this.handlerMap[component.uuid] = component\n      }\n    }\n  }\n\n  private componentRemoved(event: ComponentRemoved) {\n    if (event.entity.isAddedToEngine()) {\n      if (event.component instanceof OnUUIDEvent) {\n        delete this.handlerMap[event.component.uuid]\n      }\n    }\n  }\n\n  private handleEvent(event: UUIDEvent): void {\n    if (event.uuid in this.handlerMap) {\n      const handler = this.handlerMap[event.uuid]\n      if (handler) {\n        if (handler.callback && 'call' in handler.callback) {\n          handler.callback(event.payload)\n        }\n      }\n    }\n  }\n}\n\n/** @internal */\nexport const raycastEventSystem = new RaycastEventSystem()\n\n/** @internal */\nexport const pointerEventSystem = new PointerEventSystem()\n\n/** @internal */\nexport const uuidEventSystem = new UUIDEventSystem()\n","import { DisposableComponent, ObservableComponent, Component, getComponentId } from '../ecs/Component'\nimport { CLASS_ID } from './Components'\n\n/**\n * @public\n */\n@DisposableComponent('engine.AudioClip', CLASS_ID.AUDIO_CLIP)\nexport class AudioClip extends ObservableComponent {\n  @ObservableComponent.readonly\n  readonly url: string\n\n  /**\n   * Is this clip looping by default?\n   */\n  @ObservableComponent.field\n  loop: boolean = false\n\n  // @internal\n  @ObservableComponent.field\n  loadingCompleteEventId?: string\n\n  /**\n   * Clip's master volume. This volume affects all the AudioSources.\n   * Valid ranges from 0 to 1\n   */\n  @ObservableComponent.field\n  volume: number = 1\n\n  constructor(url: string) {\n    super()\n    this.url = url\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.AudioSource', CLASS_ID.AUDIO_SOURCE)\nexport class AudioSource extends ObservableComponent {\n  @ObservableComponent.readonly\n  readonly audioClipId: string\n\n  /**\n   * Is this clip looping by default?\n   */\n  @ObservableComponent.field\n  loop: boolean = false\n\n  /**\n   * Clip's master volume. This volume affects all the AudioSources.\n   * Valid ranges from 0 to 1\n   */\n  @ObservableComponent.field\n  volume: number = 1\n\n  /**\n   * Is this AudioSource playing?\n   */\n  @ObservableComponent.field\n  playing: boolean = false\n\n  /**\n   * Pitch, default: 1.0, range from 0.0 to MaxFloat\n   */\n  @ObservableComponent.field\n  pitch: number = 1.0\n\n  /**\n   * Timestamp of when the playOnce was executed to see if we need to start over the audio\n   */\n  @ObservableComponent.field\n  playedAtTimestamp: number = Date.now()\n\n  constructor(public readonly audioClip: AudioClip) {\n    super()\n    if (!(audioClip instanceof AudioClip)) {\n      throw new Error(`Trying to create AudioSource(AudioClip) with an invalid AudioClip`)\n    }\n    this.audioClipId = getComponentId(audioClip as any)\n  }\n\n  /**\n   * Disables the looping and plays the current source once.\n   * If the sound was playing, it stops and starts over.\n   */\n  playOnce() {\n    this.playing = true\n    this.dirty = true\n    this.playedAtTimestamp = Date.now()\n    this.data.nonce = Math.random()\n    return this\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.AudioStream', CLASS_ID.AUDIO_STREAM)\nexport class AudioStream extends ObservableComponent {\n  @ObservableComponent.readonly\n  readonly url: string\n\n  @ObservableComponent.field\n  playing: boolean = false\n\n  @ObservableComponent.field\n  volume: number = 1\n\n  constructor(url: string) {\n    super()\n    this.url = url\n    this.playing = true\n  }\n}\n","import { ObservableComponent, DisposableComponent, getComponentId } from '../ecs/Component'\nimport { CLASS_ID, OnUUIDEvent, Texture, Font } from './Components'\nimport { Color4 } from './math'\nimport { OnTextSubmit, OnBlur, OnChanged, OnClick, OnFocus } from './UIEvents'\n/**\n * @public\n */\nexport abstract class UIShape extends ObservableComponent {\n  /**\n   * Defines if the entity and its children should be rendered\n   */\n  @ObservableComponent.field\n  name: string | null = null\n\n  @ObservableComponent.field\n  visible: boolean = true\n\n  @ObservableComponent.field\n  opacity: number = 1\n\n  @ObservableComponent.field\n  hAlign: string = 'center'\n\n  @ObservableComponent.field\n  vAlign: string = 'center'\n\n  @ObservableComponent.uiValue\n  width: string | number = '100px'\n\n  @ObservableComponent.uiValue\n  height: string | number = '50px'\n\n  @ObservableComponent.uiValue\n  positionX: string | number = '0px'\n\n  @ObservableComponent.uiValue\n  positionY: string | number = '0px'\n\n  @ObservableComponent.field\n  isPointerBlocker: boolean = true\n\n  private _parent?: UIShape\n\n  constructor(parent: UIShape | null) {\n    super()\n    if (parent) {\n      this._parent = parent\n      this.data.parentComponent = getComponentId(parent as any)\n    }\n  }\n\n  get parent() {\n    return this._parent\n  }\n\n  // @internal\n  get parentComponent(): string | undefined {\n    return this.data.parentComponent\n  }\n}\n\n/**\n * @internal\n * NOTE(Brian): this should be deprecated\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_FULLSCREEN_SHAPE)\nexport class UIFullScreen extends UIShape {\n  constructor() {\n    super(null)\n  }\n}\n\n/**\n * @internal\n * NOTE(Brian): this should be deprecated\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_WORLD_SPACE_SHAPE)\nexport class UIWorldSpace extends UIShape {\n  constructor() {\n    super(null)\n  }\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_SCREEN_SPACE_SHAPE)\nexport class UICanvas extends UIShape {\n  constructor() {\n    super(null)\n  }\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_CONTAINER_RECT)\nexport class UIContainerRect extends UIShape {\n  @ObservableComponent.field\n  adaptWidth: boolean = false\n\n  @ObservableComponent.field\n  adaptHeight: boolean = false\n\n  @ObservableComponent.field\n  thickness: number = 0\n\n  @ObservableComponent.field\n  color: Color4 = Color4.Clear()\n\n  @ObservableComponent.field\n  alignmentUsesSize: boolean = true\n}\n\n/**\n * @public\n */\nexport enum UIStackOrientation {\n  VERTICAL,\n  HORIZONTAL\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_CONTAINER_STACK)\nexport class UIContainerStack extends UIShape {\n  @ObservableComponent.field\n  adaptWidth: boolean = true\n\n  @ObservableComponent.field\n  adaptHeight: boolean = true\n\n  @ObservableComponent.field\n  color: Color4 = Color4.Clear()\n\n  @ObservableComponent.field\n  stackOrientation: UIStackOrientation = UIStackOrientation.VERTICAL\n\n  @ObservableComponent.field\n  spacing: Number = 0\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_BUTTON_SHAPE)\nexport class UIButton extends UIShape {\n  @ObservableComponent.field\n  fontSize: number = 10\n\n  @ObservableComponent.field\n  fontWeight: string = 'normal'\n\n  @ObservableComponent.field\n  thickness: number = 0\n\n  @ObservableComponent.field\n  cornerRadius: number = 0\n\n  @ObservableComponent.field\n  color: Color4 = Color4.White()\n\n  @ObservableComponent.field\n  background: Color4 = Color4.White()\n\n  @ObservableComponent.field\n  paddingTop: number = 0\n\n  @ObservableComponent.field\n  paddingRight: number = 0\n\n  @ObservableComponent.field\n  paddingBottom: number = 0\n\n  @ObservableComponent.field\n  paddingLeft: number = 0\n\n  @ObservableComponent.field\n  shadowBlur: number = 0\n\n  @ObservableComponent.field\n  shadowOffsetX: number = 0\n\n  @ObservableComponent.field\n  shadowOffsetY: number = 0\n\n  @ObservableComponent.field\n  shadowColor: Color4 = Color4.Black()\n\n  @ObservableComponent.field\n  text: string = 'button'\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_TEXT_SHAPE)\nexport class UIText extends UIShape {\n  @ObservableComponent.field\n  outlineWidth: number = 0\n\n  @ObservableComponent.field\n  outlineColor: Color4 = Color4.White()\n\n  @ObservableComponent.field\n  color: Color4 = Color4.White()\n\n  @ObservableComponent.field\n  fontSize: number = 10\n\n  @ObservableComponent.field\n  fontAutoSize: boolean = false\n\n  @ObservableComponent.field\n  fontWeight: string = 'normal'\n\n  @ObservableComponent.component\n  font?: Font\n\n  @ObservableComponent.field\n  value: string = ''\n\n  @ObservableComponent.field\n  lineSpacing: number = 0\n\n  @ObservableComponent.field\n  lineCount: number = 0\n\n  @ObservableComponent.field\n  adaptWidth: boolean = false\n\n  @ObservableComponent.field\n  adaptHeight: boolean = false\n\n  @ObservableComponent.field\n  textWrapping: boolean = false\n\n  @ObservableComponent.field\n  shadowBlur: number = 0\n\n  @ObservableComponent.field\n  shadowOffsetX: number = 0\n\n  @ObservableComponent.field\n  shadowOffsetY: number = 0\n\n  @ObservableComponent.field\n  shadowColor: Color4 = Color4.Black()\n\n  @ObservableComponent.field\n  hTextAlign: string = 'left'\n\n  @ObservableComponent.field\n  vTextAlign: string = 'bottom'\n\n  @ObservableComponent.field\n  paddingTop: number = 0\n\n  @ObservableComponent.field\n  paddingRight: number = 0\n\n  @ObservableComponent.field\n  paddingBottom: number = 0\n\n  @ObservableComponent.field\n  paddingLeft: number = 0\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_INPUT_TEXT_SHAPE)\nexport class UIInputText extends UIShape {\n  @ObservableComponent.field\n  outlineWidth: number = 0\n\n  @ObservableComponent.field\n  outlineColor: Color4 = Color4.Black()\n\n  @ObservableComponent.field\n  color: Color4 = Color4.Clear()\n\n  @ObservableComponent.field\n  thickness: number = 1\n\n  @ObservableComponent.field\n  fontSize: number = 10\n\n  @ObservableComponent.field\n  fontWeight: string = 'normal'\n\n  @ObservableComponent.component\n  font?: Font\n\n  @ObservableComponent.field\n  value: string = ''\n\n  @ObservableComponent.field\n  placeholderColor: Color4 = Color4.White()\n\n  @ObservableComponent.field\n  placeholder: string = ''\n\n  @ObservableComponent.field\n  margin: number = 10\n\n  @ObservableComponent.field\n  maxWidth: number = 100\n\n  @ObservableComponent.field\n  hTextAlign: string = 'left'\n\n  @ObservableComponent.field\n  vTextAlign: string = 'bottom'\n\n  @ObservableComponent.field\n  autoStretchWidth: boolean = true\n\n  @ObservableComponent.field\n  background: Color4 = Color4.Black()\n\n  @ObservableComponent.field\n  focusedBackground: Color4 = Color4.Black()\n\n  @ObservableComponent.field\n  textWrapping: boolean = false\n\n  @ObservableComponent.field\n  shadowBlur: number = 0\n\n  @ObservableComponent.field\n  shadowOffsetX: number = 0\n\n  @ObservableComponent.field\n  shadowOffsetY: number = 0\n\n  @ObservableComponent.field\n  shadowColor: Color4 = Color4.White()\n\n  @ObservableComponent.field\n  paddingTop: number = 0\n\n  @ObservableComponent.field\n  paddingRight: number = 0\n\n  @ObservableComponent.field\n  paddingBottom: number = 0\n\n  @ObservableComponent.field\n  paddingLeft: number = 0\n\n  @OnUUIDEvent.uuidEvent\n  onTextSubmit: OnTextSubmit | null = null\n\n  @OnUUIDEvent.uuidEvent\n  onChanged: OnChanged | null = null\n\n  @OnUUIDEvent.uuidEvent\n  onFocus: OnFocus | null = null\n\n  @OnUUIDEvent.uuidEvent\n  onBlur: OnBlur | null = null\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_IMAGE_SHAPE)\nexport class UIImage extends UIShape {\n  @ObservableComponent.field\n  sourceLeft: number = 0\n\n  @ObservableComponent.field\n  sourceTop: number = 0\n\n  @ObservableComponent.field\n  sourceWidth: number = 1\n\n  @ObservableComponent.field\n  sourceHeight: number = 1\n\n  @ObservableComponent.component\n  source?: Texture\n\n  @ObservableComponent.field\n  paddingTop: number = 0\n\n  @ObservableComponent.field\n  paddingRight: number = 0\n\n  @ObservableComponent.field\n  paddingBottom: number = 0\n\n  @ObservableComponent.field\n  paddingLeft: number = 0\n\n  @ObservableComponent.field\n  sizeInPixels: boolean = true\n\n  @OnUUIDEvent.uuidEvent\n  onClick: OnClick | null = null\n\n  constructor(parent: UIShape, source: Texture) {\n    super(parent)\n    this.source = source\n  }\n}\n\n/**\n * @public\n */\n@DisposableComponent('engine.shape', CLASS_ID.UI_SLIDER_SHAPE)\nexport class UIScrollRect extends UIShape {\n  @ObservableComponent.field\n  valueX: number = 0\n\n  @ObservableComponent.field\n  valueY: number = 0\n\n  @ObservableComponent.field\n  borderColor: Color4 = Color4.White()\n\n  @ObservableComponent.field\n  backgroundColor: Color4 = Color4.Clear()\n\n  @ObservableComponent.field\n  isHorizontal: boolean = false\n\n  @ObservableComponent.field\n  isVertical: boolean = false\n\n  @ObservableComponent.field\n  paddingTop: number = 0\n\n  @ObservableComponent.field\n  paddingRight: number = 0\n\n  @ObservableComponent.field\n  paddingBottom: number = 0\n\n  @ObservableComponent.field\n  paddingLeft: number = 0\n\n  @OnUUIDEvent.uuidEvent\n  onChanged: OnChanged | null = null\n}\n","import { WearableId } from '../decentraland/Types'\nimport { Component, ObservableComponent } from '../ecs/Component'\nimport { CLASS_ID } from './Components'\nimport { ReadOnlyColor4 } from './math'\n\n/**\n * @public\n */\n@Component('engine.avatarShape', CLASS_ID.AVATAR_SHAPE)\nexport class AvatarShape extends ObservableComponent {\n  @ObservableComponent.field\n  id!: string\n\n  @ObservableComponent.field\n  name!: string\n\n  @ObservableComponent.field\n  expressionTriggerId!: string\n\n  @ObservableComponent.field\n  expressionTriggerTimestamp!: number\n\n  @ObservableComponent.field\n  bodyShape!: WearableId\n\n  @ObservableComponent.field\n  wearables!: WearableId[]\n\n  @ObservableComponent.field\n  skinColor!: ReadOnlyColor4\n\n  @ObservableComponent.field\n  hairColor!: ReadOnlyColor4\n\n  @ObservableComponent.field\n  eyeColor!: ReadOnlyColor4\n\n  @ObservableComponent.field\n  useDummyModel: boolean = false\n\n  @ObservableComponent.field\n  talking: boolean = false\n\n  public static Dummy(): AvatarShape {\n    const avatarShape = new AvatarShape()\n    avatarShape.useDummyModel = true\n    return avatarShape\n  }\n}\n","import { Component, ObservableComponent } from '../ecs/Component'\nimport { uuidEventSystem } from './Systems'\nimport { CLASS_ID, OnUUIDEvent, OnPointerUUIDEvent } from './Components'\nimport { ActionButton } from './Input'\n\n/**\n * @public\n */\n@Component('engine.onFocus', CLASS_ID.UUID_CALLBACK)\nexport class OnFocus extends OnUUIDEvent<'onFocus'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'onFocus'\n  constructor(callback: (event: IEvents['onFocus']) => void) {\n    super(callback)\n    // This injection is necessary ONLY in events that are ALWAYS turned on and are\n    // not assignable to entities. Like events for the UI elements\n\n    // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n    uuidEventSystem.handlerMap[this.uuid] = this\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.onTextSubmit', CLASS_ID.UUID_CALLBACK)\nexport class OnTextSubmit extends OnUUIDEvent<'onTextSubmit'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'onTextSubmit'\n  constructor(callback: (event: IEvents['onTextSubmit']) => void) {\n    super(callback)\n    // This injection is necessary ONLY in events that are ALWAYS turned on and are\n    // not assignable to entities. Like events for the UI elements\n\n    // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n    uuidEventSystem.handlerMap[this.uuid] = this\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.onBlur', CLASS_ID.UUID_CALLBACK)\nexport class OnBlur extends OnUUIDEvent<'onBlur'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'onBlur'\n  constructor(callback: (event: IEvents['onBlur']) => void) {\n    super(callback)\n    // This injection is necessary ONLY in events that are ALWAYS turned on and are\n    // not assignable to entities. Like events for the UI elements\n\n    // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n    uuidEventSystem.handlerMap[this.uuid] = this\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.onEnter', CLASS_ID.UUID_CALLBACK)\nexport class OnEnter extends OnUUIDEvent<'onEnter'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'onEnter'\n  constructor(callback: (event: IEvents['onEnter']) => void) {\n    super(callback)\n    // This injection is necessary ONLY in events that are ALWAYS turned on and are\n    // not assignable to entities. Like events for the UI elements\n\n    // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n    uuidEventSystem.handlerMap[this.uuid] = this\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.onChange', CLASS_ID.UUID_CALLBACK)\nexport class OnChanged extends OnUUIDEvent<'onChange'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'onChange'\n  constructor(callback: (event: IEvents['onChange']) => void) {\n    super(callback)\n    // This injection is necessary ONLY in events that are ALWAYS turned on and are\n    // not assignable to entities. Like events for the UI elements\n\n    // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n    uuidEventSystem.handlerMap[this.uuid] = this\n  }\n}\n\n/**\n * @public\n */\nexport type OnPointerUUIDEventOptions = {\n  button?: ActionButton\n  hoverText?: string\n  showFeedback?: boolean\n  distance?: number\n}\n\n/**\n * @public\n */\n@Component('engine.onClick', CLASS_ID.UUID_CALLBACK)\nexport class OnClick extends OnPointerUUIDEvent<'onClick'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'onClick'\n\n  constructor(callback: (event: IEvents['onClick']) => void)\n  constructor(callback: (event: IEvents['onClick']) => void, options: OnPointerUUIDEventOptions)\n  constructor(callback: (event: IEvents['onClick']) => void, options?: any) {\n    super(callback)\n    // This injection is necessary ONLY in events that are ALWAYS turned on and are\n    // not assignable to entities. Like events for the UI elements\n\n    // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n    uuidEventSystem.handlerMap[this.uuid] = this\n\n    if (options) {\n      this.showFeedback = !(options.showFeedback === false)\n\n      if (options.button) {\n        this.button = options.button\n      }\n\n      if (options.hoverText) {\n        this.hoverText = options.hoverText\n      }\n\n      if (options.distance) {\n        this.distance = options.distance\n      }\n    }\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.pointerDown', CLASS_ID.UUID_CALLBACK)\nexport class OnPointerDown extends OnPointerUUIDEvent<'pointerDown'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'pointerDown'\n\n  constructor(callback: (event: IEvents['pointerDown']) => void)\n  constructor(callback: (event: IEvents['pointerDown']) => void, options: OnPointerUUIDEventOptions)\n  constructor(callback: (event: IEvents['pointerDown']) => void, options?: any) {\n    super(callback)\n    // This injection is necessary ONLY in events that are ALWAYS turned on and are\n    // not assignable to entities. Like events for the UI elements\n\n    // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n    uuidEventSystem.handlerMap[this.uuid] = this\n\n    if (options) {\n      this.showFeedback = !(options.showFeedback === false)\n\n      if (options.button) {\n        this.button = options.button\n      }\n\n      if (options.hoverText) {\n        this.hoverText = options.hoverText\n      }\n\n      if (options.distance) {\n        this.distance = options.distance\n      }\n    }\n  }\n}\n\n/**\n * @public\n */\n@Component('engine.pointerUp', CLASS_ID.UUID_CALLBACK)\nexport class OnPointerUp extends OnPointerUUIDEvent<'pointerUp'> {\n  @ObservableComponent.readonly\n  readonly type: string = 'pointerUp'\n\n  constructor(callback: (event: IEvents['pointerUp']) => void)\n  constructor(callback: (event: IEvents['pointerUp']) => void, options: OnPointerUUIDEventOptions)\n  constructor(callback: (event: IEvents['pointerUp']) => void, options?: any) {\n    super(callback)\n    // This injection is necessary ONLY in events that are ALWAYS turned on and are\n    // not assignable to entities. Like events for the UI elements\n\n    // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n    uuidEventSystem.handlerMap[this.uuid] = this\n\n    if (options) {\n      this.showFeedback = !(options.showFeedback === false)\n\n      if (options.button) {\n        this.button = options.button\n      }\n\n      if (options.hoverText) {\n        this.hoverText = options.hoverText\n      }\n\n      if (options.distance) {\n        this.distance = options.distance\n      }\n    }\n  }\n}\n","import { Observable, Observer } from '../ecs/Observable'\nimport { error } from '../ecs/helpers'\n\nlet communicationsController: ModuleDescriptor | null = null\nlet communicationsControllerPromise: PromiseLike<ModuleDescriptor> | null = null\n\nlet _messageObserver: null | Observable<IEvents['comms']> = null\n\n/**\n * @internal\n */\nexport function getMessageObserver() {\n  if (!_messageObserver) {\n    _messageObserver = new Observable<IEvents['comms']>()\n  }\n  return _messageObserver\n}\n\nfunction ensureCommunicationsController() {\n  if (!communicationsControllerPromise) {\n    communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController', {})\n\n    communicationsControllerPromise.then(($) => {\n      communicationsController = $\n    })\n\n    const observer = getMessageObserver()\n\n    dcl.subscribe('comms')\n    dcl.onEvent((event) => {\n      if (event.type === 'comms') {\n        observer.notifyObservers(event.data as any)\n      }\n    })\n  }\n  return communicationsControllerPromise\n}\n\n/**\n * @public\n */\nexport class MessageBus {\n  private messageQueue: string[] = []\n  private connected = false\n  private flushing = false\n\n  constructor() {\n    ensureCommunicationsController().then(($) => {\n      this.connected = true\n      this.flush()\n    })\n  }\n\n  on(message: string, callback: (value: any, sender: string) => void): Observer<IEvents['comms']> {\n    return getMessageObserver().add((e) => {\n      try {\n        let m = JSON.parse(e.message)\n\n        if (m.message === message) {\n          callback(m.payload, e.sender)\n        }\n      } catch (e) {\n        dcl.error('Error parsing comms message ' + ((e as Error).message || ''), e)\n      }\n    })!\n  }\n\n  // @internal\n  sendRaw(message: string) {\n    this.messageQueue.push(message)\n\n    if (this.connected) {\n      this.flush()\n    }\n  }\n\n  emit(message: string, payload: Record<any, any>) {\n    const messageToSend = JSON.stringify({ message, payload })\n    this.sendRaw(messageToSend)\n    getMessageObserver().notifyObservers({ message: messageToSend, sender: 'self' })\n  }\n\n  private flush() {\n    if (this.messageQueue.length === 0) return\n    if (!this.connected) return\n    if (!communicationsController) return\n    if (this.flushing) return\n\n    const message = this.messageQueue.shift()\n\n    this.flushing = true\n\n    dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(\n      (_) => {\n        this.flushing = false\n        this.flush()\n      },\n      (e) => {\n        this.flushing = false\n        error('Error flushing MessageBus', e)\n      }\n    )\n  }\n}\n","// CORE DEPENDENCIES\nexport * from './ecs/Attachable'\nexport * from './ecs/Engine'\nexport * from './ecs/Component'\nexport * from './ecs/ComponentGroup'\nexport * from './ecs/Entity'\nexport * from './ecs/IEntity'\nexport * from './ecs/Task'\nexport * from './ecs/helpers'\nexport * from './ecs/Observable'\nexport * from './ecs/UIValue'\nexport * from './ecs/EventManager'\nexport * from './ecs/UserActions'\n\nimport { _initEventObservables } from './decentraland/Events'\nimport { DecentralandSynchronizationSystem } from './decentraland/Implementation'\n\n// ECS INITIALIZATION\nimport { Engine } from './ecs/Engine'\nimport { Entity } from './ecs/Entity'\n\nconst entity = new Entity('scene')\n;(entity as any).uuid = '0'\n\n// Initialize engine\n/** @public */\nconst engine = new Engine(entity)\n\nimport { DisposableComponent } from './ecs/Component'\nDisposableComponent.engine = engine\n\n// Initialize Decentraland interface\nif (typeof dcl !== 'undefined') {\n  engine.addSystem(new DecentralandSynchronizationSystem(dcl), Infinity)\n  _initEventObservables(dcl)\n}\n\nimport { uuidEventSystem, pointerEventSystem, raycastEventSystem } from './decentraland/Systems'\n\n// Initialize UUID Events system\nengine.addSystem(uuidEventSystem)\n// Initialize Pointer Events System\nengine.addSystem(pointerEventSystem)\n// Initialize Raycast Events System\nengine.addSystem(raycastEventSystem)\n\n// DECENTRALAND DEPENDENCIES\nexport * from './decentraland/math'\nexport * from './decentraland/Types'\nexport * from './decentraland/Components'\nexport * from './decentraland/Systems'\nexport * from './decentraland/Events'\nexport * from './decentraland/Camera'\nexport * from './decentraland/AnimationState'\nexport * from './decentraland/Input'\nexport * from './decentraland/Audio'\nexport * from './decentraland/Gizmos'\nexport * from './decentraland/UIShapes'\nexport * from './decentraland/AvatarShape'\nexport * from './decentraland/UIEvents'\nexport * from './decentraland/MessageBus'\nexport * from './decentraland/PhysicsCast'\n\nexport { engine }\n"],"names":["Attachable","getEntityRepresentation","engine","avatarEntity","firstPersonCameraEntity","lastGeneratedId","log","_i","args","dcl","console","error","data","newId","type","length","Error","toString","uuid","replace","c","r","Math","random","buildArray","size","itemBuilder","a","i","push","eventNameSymbol","takenEventNames","getEventNameFromConstructor","ctor","this","EventManager","eventClass","listener","listenerFunction","eventName","listeners","fn","splice","event","constructor","l","call","e","EventConstructor","indexOf","target","UIValueType","entity","componentName","component","ComponentRemoved","classId","ComponentAdded","parent","ParentChanged","value","PIXELS","valueAsString","PERCENT","parseFloat","UIValue","result","componentSymbol","componentClassIdSymbol","componentIdSymbol","componentId","DisposableComponentCreated","DisposableComponentRemoved","DisposableComponentUpdated","Component","isComponent","TypeError","originalClassName","extendedClass","RegisteredComponent","Array","prototype","slice","arguments","ret","Object","defineProperty","enumerable","writable","configurable","undefined","DisposableComponent","isNaN","id","registerComponent","isDisposableComponent","getComponentName","getComponentClassId","getComponentId","ObservableComponent","propertyKey","componentSymbol_1","getOwnPropertyDescriptor","get","set","oldValue","dirty","subscriptions","finalValue","requires","_requiresNames","ix","name","this_1","some","$","ComponentGroup","isAddedToEngine","entities","removeEntity","components","Entity","removeComponent","addComponent","typeOfComponent","storedComponent","identifier","getComponentOrNull","addComponentOrReplace","eventManager","fireEvent","addedToEntity","triggerRemovedEvent","removedFromEntity","rootEntity","_parent","newParent","currentParent","getParent","circularAncestor","getCircularAncestor","children","addEntity","registerAsChild","ent","root","addListener","componentAddedHandler","componentRemovedHandler","Engine","_entities","_disposableComponents","checkRequirementsAndAdd","setParent","alive","child","componentGroups","_componentGroups","groupIndex","entityLists","simpleSystems","system","onRemoveEntity","priority","addedSystems","systems","entry","isLast","registerSystem","idx","active","deactivate","dt","update","onDispose","componentGroup","traversedComponentGroup","j","requiresNames","entityId","checkRequirements","activate","systemIndex","onAddEntity","meetsRequirements","hasEntity","_defer","Promise","resolve","then","bind","executeTask","task","isComplete","didFail","catch","modulePromise","mask","skipNextObservers","currentTarget","initalize","ObserverEventState","callback","scope","MultiObserver","observables","_observers","_observables","observables_1","__values","observer","add","index","remove","onObserverAdded","_eventState","_onObserverAdded","Observable","insertFirst","unregisterOnFirstCall","Observer","unregisterOnNextCall","unshift","_deferUnregister","eventData","state","lastReturnValue","_b","obs","_willBeUnregistered","apply","p","forEach","lastReturnedValue","_this","_remove","internalDcl","payload","UUIDEvent","RaycastResponse","PointerEvent","createSubscriber","subscribe","onCameraModeChangedObservable","onIdleStateChangedObservable","onEnterSceneObservable","onEnterScene","onLeaveSceneObservable","onLeaveScene","onSceneReadyObservable","onPlayerExpressionObservable","onVideoEvent","onProfileChanged","_initEventObservables","onEvent","notifyObservers","videoData","disposableComponents","Orientation","Space","DecentralandSynchronizationSystem","componentAdded","componentRemoved","disposableComponentCreated","disposableComponentRemoved","disposableComponentUpdated","parentChanged","rootId","onUpdate","presentEntities","queryType","cachedComponents","attachEntityComponent","componentJson","JSON","stringify","updateEntityComponent","jsonRepresentation","getJsonIfDirty","clearDirty","componentUpdated","removeEntityComponent","componentCreated","componentDisposed","InputEventType","CameraMode","ToGammaSpace","ToLinearSpace","Epsilon","DEG2RAD","PI","RAD2DEG","Scalar","b","epsilon","num","str","toUpperCase","_value","min","max","LOG2E","floor","normalized","current","Repeat","tx","t","abs","from","to","Clamp","maxDelta","Sign","DeltaAngle","MoveTowards","start","end","amount","value1","tangent1","value2","tangent2","squared","cubed","percent","angle","TwoPi","x","y","z","w","Vector4","vector1","vector2","addInPlace","array","offset","FromArrayToRef","vector","Zero","NormalizeToRef","copyFrom","normalize","left","right","minimizeInPlace","maximizeInPlace","sqrt","DistanceSquared","center","Add","scaleInPlace","transformation","TransformNormalToRef","m","hash","toArray","otherVector","scale","WithinEpsilon","divideToRef","other","len","Vector3","source","copyFromFloats","v","_updateIdentityStatus","Matrix","_m","_identityReadOnly","_markAsUpdated","initialM11","initialM12","initialM13","initialM14","initialM21","initialM22","initialM23","initialM24","initialM31","initialM32","initialM33","initialM34","initialM41","initialM42","initialM43","initialM44","rotation","translation","ComposeToRef","ScalingToRef","MathTmp","toRotationMatrix","multiplyToRef","setTranslation","identity","FromValues","FromValuesToRef","zero","RotationXToRef","invertToRef","s","sin","cos","RotationYToRef","RotationZToRef","axis","RotationAxisToRef","c1","yaw","pitch","roll","RotationYawPitchRollToRef","Quaternion","TranslationToRef","startValue","endValue","gradient","LerpToRef","DecomposeLerpToRef","startScale","startRotation","startTranslation","decompose","endScale","endRotation","endTranslation","resultScale","resultRotation","SlerpToRef","resultTranslation","eye","up","LookAtLHToRef","xAxis","yAxis","zAxis","subtractToRef","CrossToRef","xSquareLength","lengthSquared","normalizeFromLength","ex","Dot","ey","ez","LookAtRHToRef","width","height","znear","zfar","matrix","OrthoLHToRef","d","bottom","top","OrthoOffCenterLHToRef","i0","i1","OrthoOffCenterRHToRef","fov","aspect","PerspectiveFovLHToRef","isVerticalFovFixed","n","f","tan","PerspectiveFovRHToRef","rightHanded","rightHandedFactor","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","TransposeToRef","rm","mm","_isIdentity","_isIdentityDirty","plane","ReflectionToRef","normal","temp","temp2","temp3","xaxis","yaxis","zaxis","quat","xx","yy","zz","xy","zw","zx","yw","yz","xw","updateFlag","_updateFlagSeed","_isIdentity3x2","_isIdentity3x2Dirty","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","det_22_33","det_21_33","det_21_32","det_20_33","det_20_32","det_20_31","addToRef","IdentityToRef","cofact_00","cofact_01","cofact_02","cofact_03","det","detInv","det_12_33","det_11_33","det_11_32","det_10_33","det_10_32","det_10_31","det_12_23","det_11_23","det_11_22","det_10_23","det_10_22","det_10_21","cofact_10","cofact_11","cofact_12","cofact_13","cofact_20","cofact_21","cofact_22","cofact_23","cofact_30","cofact_31","cofact_32","cofact_33","vector3","setTranslationFromFloats","copyToArray","o","multiplyToArray","otherM","tm0","tm1","tm2","tm3","tm4","tm5","tm6","tm7","tm8","tm9","tm10","tm11","tm12","tm13","tm14","tm15","om0","om1","om2","om3","om4","om5","om6","om7","om8","om9","om10","om11","om12","om13","om14","om15","om","setAll","usedScale","determinant","sx","sy","sz","FromRotationMatrixToRef","row","setRowFromFloats","Transpose","scaleToRef","ref","tmp","transposeToRef","getRotationMatrixToRef","isIdentity","isIdentityDirty","isIdentity3x2","isIdentity3x2Dirty","Identity","trace","quat0","quat1","q","quaternion","angleRad","halfPitch","halfYaw","halfRoll","c2","c3","s1","s2","s3","alpha","beta","gamma","RotationAlphaBetaGammaToRef","halfGammaPlusAlpha","halfGammaMinusAlpha","halfBeta","axis1","axis2","axis3","RotationQuaternionFromAxisToRef","rotMat","FromXYZAxesToRef","num2","num3","num4","flag","num5","acos","num6","part1","part2","part3","part4","quat2","dot","RotationYawPitchRoll","forward","staticUp","forwardNew","Normalize","Cross","upNew","num8","num7","maxDegreesDelta","Angle","Slerp","v0","v1","FromToRotation","out","unit","test","atan2","asin","euler","setEuler","otherQuaternion","q1","degress","radians","a2","FromQuaternionToRef","absX","absY","absZ","vector0","d0","normalizeToRef","FromArray","TransformCoordinatesToRef","TransformCoordinatesFromFloatsToRef","rx","ry","rz","rw","TransformNormalFromFloatsToRef","value3","value4","ClampToRef","RotationFromAxisToRef","eulerAngles","addInPlaceFromFloats","subtractFromFloatsToRef","applyMatrix4ToRef","_a","rotateToRef","qx","qy","qz","qw","iy","iz","iw","multiplyByFloats","minimizeInPlaceFromFloats","maximizeInPlaceFromFloats","reference","Up","tmpMatrix","_radians","delta","subtract","degrees","Vector2","newVector","TransformToRef","p0","p1","p2","sign","segA","segB","l2","Distance","proj","startPoint","midPoint","endPoint","pow","startToMid","midToEnd","centerPoint","radius","startAngle","BetweenTwoPoints","a1","a3","orientation","CW","CCW","FromDegrees","Axis","BezierCurve","x1","y1","x2","y2","f0","f1","f2","refinedT","refinedT2","g","Color4","hex","substring","parseInt","FromInts","color3","colors","count","colors4","newIndex","color","intR","intG","intB","intA","ToHex","convertedColor","toLinearSpaceToRef","toGammaSpaceToRef","Color3","otherColor","points","_points","_length","_computeLength","Curve3","v2","nbPoints","bez","equation","val0","val1","val2","v3","val3","t1","t2","hermite","step","Hermite","closed","catmullRom","pointsCount","CatmullRom","totalPoints","clone","curve","lastPoint","continuedPoints","curvePoints","getPoints","path","Plane","point1","point2","point3","copyFromPoints","origin","point","getHashCode","norm","magnitude","transposedMatrix","invPyth","z1","z2","xz","pyth","direction","Frustum","transform","frustumPlanes","GetPlanesToRef","frustumPlane","GetNearPlaneToRef","GetFarPlaneToRef","GetLeftPlaneToRef","GetRightPlaneToRef","GetTopPlaneToRef","GetBottomPlaneToRef","Path2","newPoint","previousPoint","midX","midY","endX","endY","numberOfSegments","arc","Arc2","increment","currentAngle","addLineTo","normalizedLengthPosition","lengthPosition","previousOffset","bToA","nextOffset","dir","localOffset","firstNormal","raw","_curve","_raw","_compute","Path3D","_tangents","_normals","_binormals","_distances","_getFirstNonNullVector","prev","cur","curTang","prevBinor","tg0","pp0","_normalVector","_getLastNonNullVector","nNVector","nLVector","vt","va","normal0","tgl","Size","src","h","otherSize","defaultParams","looping","speed","weight","layer","clip","params","_super","setParams","__extends","AnimationState","parse","toJSON","shouldReset","reset","owner","play","pause","stop","__decorate","readonly","field","LandRole","ActionButton","CLASS_ID","AvatarModifiers","Input","ensureInstance","GlobalPointerDown","PointerEventComponent","GlobalPointerUp","useRaycast","POINTER","BUTTON_DOWN","BUTTON_UP","PRIMARY","SECONDARY","ANY","_instance","buttonId","internalState","Subscription","unsubscribe","getSubscriptionId","button","getPointerById","eventResult","hit","hitPoint","worldNormal","DOWN","subscription","handler","PictureFrameStyle","area","modifiers","AvatarModifierArea","AVATAR_MODIFIER_AREA","position","Transform","worldUp","invert","multiplyInPlace","angleAxis","vec","TRANSFORM","Billboard","BILLBOARD","BoxShape","BOX_SHAPE","Shape","SphereShape","SPHERE_SHAPE","CircleShape","CIRCLE_SHAPE","PlaneShape","PLANE_SHAPE","ConeShape","CONE_SHAPE","CylinderShape","CYLINDER_SHAPE","GLTFShape","GLTF_SHAPE","Fonts","style","Classic","NFTShape","NFT_SHAPE","opts","Texture","TEXTURE","Animator","states","onChange","clipName","newClip","addClip","playing","animationState","nonce","ANIMATION","OBJShape","OBJ_SHAPE","Font","FONT","TransparencyMode","TextShape","TEXT_SHAPE","VideoStatus","AUTO","Material","PBR_MATERIAL","BasicMaterial","BASIC_MATERIAL","OnUUIDEvent","OnPointerUUIDEvent","hoverText","distance","showFeedback","OnPointerLock","UUID_CALLBACK","OnAnimationEnd","SmartItem","SMART_ITEM","url","VideoClip","VIDEO_CLIP","QueryPrefix","videoClip","NONE","videoClipId","VideoTexture","seekTime","seconds","seek","videoEvent","_status","videoStatus","_videoLength","totalVideoLength","_position","currentOffset","VIDEO_TEXTURE","FirstPerson","positionChanged","rotationChanged","cameraModeChanged","lastEventPosition","worldPosition","lastEventWorldPosition","feetPosition","playerHeight","lastEventRotation","Camera","_playerHeight","_cameraMode","cameraPosition","cameraMode","Gizmo","PhysicsCast","instance","rotationMat","TransformCoordinates","Forward","ray","hitCallback","queryId","HitFirst","queries","query","HitAll","response","RaycastEventSystem","handleRaycastHitFirstResponse","handleRaycastHitAllResponse","PointerEventSystem","handlePointerEvent","UUIDEventSystem","handleEvent","handlerMap","raycastEventSystem","pointerEventSystem","uuidEventSystem","AudioClip","AUDIO_CLIP","audioClip","Date","now","audioClipId","AudioSource","playedAtTimestamp","AUDIO_SOURCE","AudioStream","AUDIO_STREAM","UIStackOrientation","OnGizmoEvent","Gizmos","GIZMOS","parentComponent","UIShape","uiValue","UIFullScreen","UI_FULLSCREEN_SHAPE","UIWorldSpace","UI_WORLD_SPACE_SHAPE","UICanvas","UI_SCREEN_SPACE_SHAPE","Clear","UIContainerRect","UI_CONTAINER_RECT","VERTICAL","UIContainerStack","UI_CONTAINER_STACK","White","Black","UIButton","UI_BUTTON_SHAPE","UIText","UI_TEXT_SHAPE","uuidEvent","UIInputText","UI_INPUT_TEXT_SHAPE","UIImage","UI_IMAGE_SHAPE","UIScrollRect","UI_SLIDER_SHAPE","AvatarShape","avatarShape","AvatarShape_1","useDummyModel","AVATAR_SHAPE","OnFocus","OnTextSubmit","OnBlur","OnEnter","OnChanged","options","OnClick","OnPointerDown","OnPointerUp","communicationsController","communicationsControllerPromise","_messageObserver","getMessageObserver","loadModule","observer_1","ensureCommunicationsController","connected","flush","MessageBus","message","sender","messageQueue","messageToSend","sendRaw","flushing","shift","callRpc","rpcHandle","_","addSystem","Infinity","openExternalUrl","scr","comment","matches","match","openNFTDialog","destination","methodName"],"mappings":"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"}